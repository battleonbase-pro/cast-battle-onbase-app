
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Battle
 * 
 */
export type Battle = $Result.DefaultSelection<Prisma.$BattlePayload>
/**
 * Model BattleParticipation
 * 
 */
export type BattleParticipation = $Result.DefaultSelection<Prisma.$BattleParticipationPayload>
/**
 * Model Cast
 * 
 */
export type Cast = $Result.DefaultSelection<Prisma.$CastPayload>
/**
 * Model BattleWin
 * 
 */
export type BattleWin = $Result.DefaultSelection<Prisma.$BattleWinPayload>
/**
 * Model BattleHistory
 * 
 */
export type BattleHistory = $Result.DefaultSelection<Prisma.$BattleHistoryPayload>
/**
 * Model SystemConfig
 * 
 */
export type SystemConfig = $Result.DefaultSelection<Prisma.$SystemConfigPayload>
/**
 * Model SharedState
 * 
 */
export type SharedState = $Result.DefaultSelection<Prisma.$SharedStatePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const BattleStatus: {
  PREPARING: 'PREPARING',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type BattleStatus = (typeof BattleStatus)[keyof typeof BattleStatus]


export const CastSide: {
  SUPPORT: 'SUPPORT',
  OPPOSE: 'OPPOSE'
};

export type CastSide = (typeof CastSide)[keyof typeof CastSide]

}

export type BattleStatus = $Enums.BattleStatus

export const BattleStatus: typeof $Enums.BattleStatus

export type CastSide = $Enums.CastSide

export const CastSide: typeof $Enums.CastSide

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.battle`: Exposes CRUD operations for the **Battle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Battles
    * const battles = await prisma.battle.findMany()
    * ```
    */
  get battle(): Prisma.BattleDelegate<ExtArgs>;

  /**
   * `prisma.battleParticipation`: Exposes CRUD operations for the **BattleParticipation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BattleParticipations
    * const battleParticipations = await prisma.battleParticipation.findMany()
    * ```
    */
  get battleParticipation(): Prisma.BattleParticipationDelegate<ExtArgs>;

  /**
   * `prisma.cast`: Exposes CRUD operations for the **Cast** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Casts
    * const casts = await prisma.cast.findMany()
    * ```
    */
  get cast(): Prisma.CastDelegate<ExtArgs>;

  /**
   * `prisma.battleWin`: Exposes CRUD operations for the **BattleWin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BattleWins
    * const battleWins = await prisma.battleWin.findMany()
    * ```
    */
  get battleWin(): Prisma.BattleWinDelegate<ExtArgs>;

  /**
   * `prisma.battleHistory`: Exposes CRUD operations for the **BattleHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BattleHistories
    * const battleHistories = await prisma.battleHistory.findMany()
    * ```
    */
  get battleHistory(): Prisma.BattleHistoryDelegate<ExtArgs>;

  /**
   * `prisma.systemConfig`: Exposes CRUD operations for the **SystemConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemConfigs
    * const systemConfigs = await prisma.systemConfig.findMany()
    * ```
    */
  get systemConfig(): Prisma.SystemConfigDelegate<ExtArgs>;

  /**
   * `prisma.sharedState`: Exposes CRUD operations for the **SharedState** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SharedStates
    * const sharedStates = await prisma.sharedState.findMany()
    * ```
    */
  get sharedState(): Prisma.SharedStateDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Battle: 'Battle',
    BattleParticipation: 'BattleParticipation',
    Cast: 'Cast',
    BattleWin: 'BattleWin',
    BattleHistory: 'BattleHistory',
    SystemConfig: 'SystemConfig',
    SharedState: 'SharedState'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "battle" | "battleParticipation" | "cast" | "battleWin" | "battleHistory" | "systemConfig" | "sharedState"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Battle: {
        payload: Prisma.$BattlePayload<ExtArgs>
        fields: Prisma.BattleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BattleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BattleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload>
          }
          findFirst: {
            args: Prisma.BattleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BattleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload>
          }
          findMany: {
            args: Prisma.BattleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload>[]
          }
          create: {
            args: Prisma.BattleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload>
          }
          createMany: {
            args: Prisma.BattleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BattleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload>[]
          }
          delete: {
            args: Prisma.BattleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload>
          }
          update: {
            args: Prisma.BattleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload>
          }
          deleteMany: {
            args: Prisma.BattleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BattleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BattleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattlePayload>
          }
          aggregate: {
            args: Prisma.BattleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBattle>
          }
          groupBy: {
            args: Prisma.BattleGroupByArgs<ExtArgs>
            result: $Utils.Optional<BattleGroupByOutputType>[]
          }
          count: {
            args: Prisma.BattleCountArgs<ExtArgs>
            result: $Utils.Optional<BattleCountAggregateOutputType> | number
          }
        }
      }
      BattleParticipation: {
        payload: Prisma.$BattleParticipationPayload<ExtArgs>
        fields: Prisma.BattleParticipationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BattleParticipationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleParticipationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BattleParticipationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleParticipationPayload>
          }
          findFirst: {
            args: Prisma.BattleParticipationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleParticipationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BattleParticipationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleParticipationPayload>
          }
          findMany: {
            args: Prisma.BattleParticipationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleParticipationPayload>[]
          }
          create: {
            args: Prisma.BattleParticipationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleParticipationPayload>
          }
          createMany: {
            args: Prisma.BattleParticipationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BattleParticipationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleParticipationPayload>[]
          }
          delete: {
            args: Prisma.BattleParticipationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleParticipationPayload>
          }
          update: {
            args: Prisma.BattleParticipationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleParticipationPayload>
          }
          deleteMany: {
            args: Prisma.BattleParticipationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BattleParticipationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BattleParticipationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleParticipationPayload>
          }
          aggregate: {
            args: Prisma.BattleParticipationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBattleParticipation>
          }
          groupBy: {
            args: Prisma.BattleParticipationGroupByArgs<ExtArgs>
            result: $Utils.Optional<BattleParticipationGroupByOutputType>[]
          }
          count: {
            args: Prisma.BattleParticipationCountArgs<ExtArgs>
            result: $Utils.Optional<BattleParticipationCountAggregateOutputType> | number
          }
        }
      }
      Cast: {
        payload: Prisma.$CastPayload<ExtArgs>
        fields: Prisma.CastFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CastFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CastPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CastFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CastPayload>
          }
          findFirst: {
            args: Prisma.CastFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CastPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CastFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CastPayload>
          }
          findMany: {
            args: Prisma.CastFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CastPayload>[]
          }
          create: {
            args: Prisma.CastCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CastPayload>
          }
          createMany: {
            args: Prisma.CastCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CastCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CastPayload>[]
          }
          delete: {
            args: Prisma.CastDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CastPayload>
          }
          update: {
            args: Prisma.CastUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CastPayload>
          }
          deleteMany: {
            args: Prisma.CastDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CastUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CastUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CastPayload>
          }
          aggregate: {
            args: Prisma.CastAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCast>
          }
          groupBy: {
            args: Prisma.CastGroupByArgs<ExtArgs>
            result: $Utils.Optional<CastGroupByOutputType>[]
          }
          count: {
            args: Prisma.CastCountArgs<ExtArgs>
            result: $Utils.Optional<CastCountAggregateOutputType> | number
          }
        }
      }
      BattleWin: {
        payload: Prisma.$BattleWinPayload<ExtArgs>
        fields: Prisma.BattleWinFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BattleWinFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleWinPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BattleWinFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleWinPayload>
          }
          findFirst: {
            args: Prisma.BattleWinFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleWinPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BattleWinFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleWinPayload>
          }
          findMany: {
            args: Prisma.BattleWinFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleWinPayload>[]
          }
          create: {
            args: Prisma.BattleWinCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleWinPayload>
          }
          createMany: {
            args: Prisma.BattleWinCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BattleWinCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleWinPayload>[]
          }
          delete: {
            args: Prisma.BattleWinDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleWinPayload>
          }
          update: {
            args: Prisma.BattleWinUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleWinPayload>
          }
          deleteMany: {
            args: Prisma.BattleWinDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BattleWinUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BattleWinUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleWinPayload>
          }
          aggregate: {
            args: Prisma.BattleWinAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBattleWin>
          }
          groupBy: {
            args: Prisma.BattleWinGroupByArgs<ExtArgs>
            result: $Utils.Optional<BattleWinGroupByOutputType>[]
          }
          count: {
            args: Prisma.BattleWinCountArgs<ExtArgs>
            result: $Utils.Optional<BattleWinCountAggregateOutputType> | number
          }
        }
      }
      BattleHistory: {
        payload: Prisma.$BattleHistoryPayload<ExtArgs>
        fields: Prisma.BattleHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BattleHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BattleHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleHistoryPayload>
          }
          findFirst: {
            args: Prisma.BattleHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BattleHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleHistoryPayload>
          }
          findMany: {
            args: Prisma.BattleHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleHistoryPayload>[]
          }
          create: {
            args: Prisma.BattleHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleHistoryPayload>
          }
          createMany: {
            args: Prisma.BattleHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BattleHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleHistoryPayload>[]
          }
          delete: {
            args: Prisma.BattleHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleHistoryPayload>
          }
          update: {
            args: Prisma.BattleHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleHistoryPayload>
          }
          deleteMany: {
            args: Prisma.BattleHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BattleHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BattleHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BattleHistoryPayload>
          }
          aggregate: {
            args: Prisma.BattleHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBattleHistory>
          }
          groupBy: {
            args: Prisma.BattleHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<BattleHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.BattleHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<BattleHistoryCountAggregateOutputType> | number
          }
        }
      }
      SystemConfig: {
        payload: Prisma.$SystemConfigPayload<ExtArgs>
        fields: Prisma.SystemConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          findFirst: {
            args: Prisma.SystemConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          findMany: {
            args: Prisma.SystemConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          create: {
            args: Prisma.SystemConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          createMany: {
            args: Prisma.SystemConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>[]
          }
          delete: {
            args: Prisma.SystemConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          update: {
            args: Prisma.SystemConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          deleteMany: {
            args: Prisma.SystemConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SystemConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemConfigPayload>
          }
          aggregate: {
            args: Prisma.SystemConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemConfig>
          }
          groupBy: {
            args: Prisma.SystemConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemConfigCountArgs<ExtArgs>
            result: $Utils.Optional<SystemConfigCountAggregateOutputType> | number
          }
        }
      }
      SharedState: {
        payload: Prisma.$SharedStatePayload<ExtArgs>
        fields: Prisma.SharedStateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SharedStateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedStatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SharedStateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedStatePayload>
          }
          findFirst: {
            args: Prisma.SharedStateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedStatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SharedStateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedStatePayload>
          }
          findMany: {
            args: Prisma.SharedStateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedStatePayload>[]
          }
          create: {
            args: Prisma.SharedStateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedStatePayload>
          }
          createMany: {
            args: Prisma.SharedStateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SharedStateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedStatePayload>[]
          }
          delete: {
            args: Prisma.SharedStateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedStatePayload>
          }
          update: {
            args: Prisma.SharedStateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedStatePayload>
          }
          deleteMany: {
            args: Prisma.SharedStateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SharedStateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SharedStateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharedStatePayload>
          }
          aggregate: {
            args: Prisma.SharedStateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSharedState>
          }
          groupBy: {
            args: Prisma.SharedStateGroupByArgs<ExtArgs>
            result: $Utils.Optional<SharedStateGroupByOutputType>[]
          }
          count: {
            args: Prisma.SharedStateCountArgs<ExtArgs>
            result: $Utils.Optional<SharedStateCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    participations: number
    wins: number
    casts: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participations?: boolean | UserCountOutputTypeCountParticipationsArgs
    wins?: boolean | UserCountOutputTypeCountWinsArgs
    casts?: boolean | UserCountOutputTypeCountCastsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountParticipationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BattleParticipationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BattleWinWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCastsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CastWhereInput
  }


  /**
   * Count Type BattleCountOutputType
   */

  export type BattleCountOutputType = {
    participants: number
    casts: number
    winners: number
  }

  export type BattleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | BattleCountOutputTypeCountParticipantsArgs
    casts?: boolean | BattleCountOutputTypeCountCastsArgs
    winners?: boolean | BattleCountOutputTypeCountWinnersArgs
  }

  // Custom InputTypes
  /**
   * BattleCountOutputType without action
   */
  export type BattleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleCountOutputType
     */
    select?: BattleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BattleCountOutputType without action
   */
  export type BattleCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BattleParticipationWhereInput
  }

  /**
   * BattleCountOutputType without action
   */
  export type BattleCountOutputTypeCountCastsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CastWhereInput
  }

  /**
   * BattleCountOutputType without action
   */
  export type BattleCountOutputTypeCountWinnersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BattleWinWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    points: number | null
  }

  export type UserSumAggregateOutputType = {
    points: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    address: string | null
    username: string | null
    points: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    address: string | null
    username: string | null
    points: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    address: number
    username: number
    points: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    points?: true
  }

  export type UserSumAggregateInputType = {
    points?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    address?: true
    username?: true
    points?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    address?: true
    username?: true
    points?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    address?: true
    username?: true
    points?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    address: string
    username: string | null
    points: number
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    username?: boolean
    points?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    participations?: boolean | User$participationsArgs<ExtArgs>
    wins?: boolean | User$winsArgs<ExtArgs>
    casts?: boolean | User$castsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    username?: boolean
    points?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    address?: boolean
    username?: boolean
    points?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participations?: boolean | User$participationsArgs<ExtArgs>
    wins?: boolean | User$winsArgs<ExtArgs>
    casts?: boolean | User$castsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      participations: Prisma.$BattleParticipationPayload<ExtArgs>[]
      wins: Prisma.$BattleWinPayload<ExtArgs>[]
      casts: Prisma.$CastPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      address: string
      username: string | null
      points: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    participations<T extends User$participationsArgs<ExtArgs> = {}>(args?: Subset<T, User$participationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattleParticipationPayload<ExtArgs>, T, "findMany"> | Null>
    wins<T extends User$winsArgs<ExtArgs> = {}>(args?: Subset<T, User$winsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattleWinPayload<ExtArgs>, T, "findMany"> | Null>
    casts<T extends User$castsArgs<ExtArgs> = {}>(args?: Subset<T, User$castsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CastPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly points: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.participations
   */
  export type User$participationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleParticipation
     */
    select?: BattleParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleParticipationInclude<ExtArgs> | null
    where?: BattleParticipationWhereInput
    orderBy?: BattleParticipationOrderByWithRelationInput | BattleParticipationOrderByWithRelationInput[]
    cursor?: BattleParticipationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BattleParticipationScalarFieldEnum | BattleParticipationScalarFieldEnum[]
  }

  /**
   * User.wins
   */
  export type User$winsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleWin
     */
    select?: BattleWinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleWinInclude<ExtArgs> | null
    where?: BattleWinWhereInput
    orderBy?: BattleWinOrderByWithRelationInput | BattleWinOrderByWithRelationInput[]
    cursor?: BattleWinWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BattleWinScalarFieldEnum | BattleWinScalarFieldEnum[]
  }

  /**
   * User.casts
   */
  export type User$castsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cast
     */
    select?: CastSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CastInclude<ExtArgs> | null
    where?: CastWhereInput
    orderBy?: CastOrderByWithRelationInput | CastOrderByWithRelationInput[]
    cursor?: CastWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CastScalarFieldEnum | CastScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Battle
   */

  export type AggregateBattle = {
    _count: BattleCountAggregateOutputType | null
    _avg: BattleAvgAggregateOutputType | null
    _sum: BattleSumAggregateOutputType | null
    _min: BattleMinAggregateOutputType | null
    _max: BattleMaxAggregateOutputType | null
  }

  export type BattleAvgAggregateOutputType = {
    durationHours: number | null
    maxParticipants: number | null
    overallScore: number | null
    balanceScore: number | null
  }

  export type BattleSumAggregateOutputType = {
    durationHours: number | null
    maxParticipants: number | null
    overallScore: number | null
    balanceScore: number | null
  }

  export type BattleMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    category: string | null
    source: string | null
    sourceUrl: string | null
    status: $Enums.BattleStatus | null
    startTime: Date | null
    endTime: Date | null
    durationHours: number | null
    maxParticipants: number | null
    overallScore: number | null
    balanceScore: number | null
    complexity: string | null
    controversyLevel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BattleMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    category: string | null
    source: string | null
    sourceUrl: string | null
    status: $Enums.BattleStatus | null
    startTime: Date | null
    endTime: Date | null
    durationHours: number | null
    maxParticipants: number | null
    overallScore: number | null
    balanceScore: number | null
    complexity: string | null
    controversyLevel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BattleCountAggregateOutputType = {
    id: number
    title: number
    description: number
    category: number
    source: number
    sourceUrl: number
    status: number
    startTime: number
    endTime: number
    durationHours: number
    maxParticipants: number
    debatePoints: number
    overallScore: number
    balanceScore: number
    complexity: number
    controversyLevel: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BattleAvgAggregateInputType = {
    durationHours?: true
    maxParticipants?: true
    overallScore?: true
    balanceScore?: true
  }

  export type BattleSumAggregateInputType = {
    durationHours?: true
    maxParticipants?: true
    overallScore?: true
    balanceScore?: true
  }

  export type BattleMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    source?: true
    sourceUrl?: true
    status?: true
    startTime?: true
    endTime?: true
    durationHours?: true
    maxParticipants?: true
    overallScore?: true
    balanceScore?: true
    complexity?: true
    controversyLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BattleMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    source?: true
    sourceUrl?: true
    status?: true
    startTime?: true
    endTime?: true
    durationHours?: true
    maxParticipants?: true
    overallScore?: true
    balanceScore?: true
    complexity?: true
    controversyLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BattleCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    category?: true
    source?: true
    sourceUrl?: true
    status?: true
    startTime?: true
    endTime?: true
    durationHours?: true
    maxParticipants?: true
    debatePoints?: true
    overallScore?: true
    balanceScore?: true
    complexity?: true
    controversyLevel?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BattleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Battle to aggregate.
     */
    where?: BattleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Battles to fetch.
     */
    orderBy?: BattleOrderByWithRelationInput | BattleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BattleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Battles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Battles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Battles
    **/
    _count?: true | BattleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BattleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BattleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BattleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BattleMaxAggregateInputType
  }

  export type GetBattleAggregateType<T extends BattleAggregateArgs> = {
        [P in keyof T & keyof AggregateBattle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBattle[P]>
      : GetScalarType<T[P], AggregateBattle[P]>
  }




  export type BattleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BattleWhereInput
    orderBy?: BattleOrderByWithAggregationInput | BattleOrderByWithAggregationInput[]
    by: BattleScalarFieldEnum[] | BattleScalarFieldEnum
    having?: BattleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BattleCountAggregateInputType | true
    _avg?: BattleAvgAggregateInputType
    _sum?: BattleSumAggregateInputType
    _min?: BattleMinAggregateInputType
    _max?: BattleMaxAggregateInputType
  }

  export type BattleGroupByOutputType = {
    id: string
    title: string
    description: string
    category: string
    source: string
    sourceUrl: string | null
    status: $Enums.BattleStatus
    startTime: Date
    endTime: Date
    durationHours: number
    maxParticipants: number
    debatePoints: JsonValue
    overallScore: number | null
    balanceScore: number | null
    complexity: string | null
    controversyLevel: string | null
    createdAt: Date
    updatedAt: Date
    _count: BattleCountAggregateOutputType | null
    _avg: BattleAvgAggregateOutputType | null
    _sum: BattleSumAggregateOutputType | null
    _min: BattleMinAggregateOutputType | null
    _max: BattleMaxAggregateOutputType | null
  }

  type GetBattleGroupByPayload<T extends BattleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BattleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BattleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BattleGroupByOutputType[P]>
            : GetScalarType<T[P], BattleGroupByOutputType[P]>
        }
      >
    >


  export type BattleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    source?: boolean
    sourceUrl?: boolean
    status?: boolean
    startTime?: boolean
    endTime?: boolean
    durationHours?: boolean
    maxParticipants?: boolean
    debatePoints?: boolean
    overallScore?: boolean
    balanceScore?: boolean
    complexity?: boolean
    controversyLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    participants?: boolean | Battle$participantsArgs<ExtArgs>
    casts?: boolean | Battle$castsArgs<ExtArgs>
    winners?: boolean | Battle$winnersArgs<ExtArgs>
    history?: boolean | Battle$historyArgs<ExtArgs>
    _count?: boolean | BattleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["battle"]>

  export type BattleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    source?: boolean
    sourceUrl?: boolean
    status?: boolean
    startTime?: boolean
    endTime?: boolean
    durationHours?: boolean
    maxParticipants?: boolean
    debatePoints?: boolean
    overallScore?: boolean
    balanceScore?: boolean
    complexity?: boolean
    controversyLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["battle"]>

  export type BattleSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    category?: boolean
    source?: boolean
    sourceUrl?: boolean
    status?: boolean
    startTime?: boolean
    endTime?: boolean
    durationHours?: boolean
    maxParticipants?: boolean
    debatePoints?: boolean
    overallScore?: boolean
    balanceScore?: boolean
    complexity?: boolean
    controversyLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BattleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | Battle$participantsArgs<ExtArgs>
    casts?: boolean | Battle$castsArgs<ExtArgs>
    winners?: boolean | Battle$winnersArgs<ExtArgs>
    history?: boolean | Battle$historyArgs<ExtArgs>
    _count?: boolean | BattleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BattleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BattlePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Battle"
    objects: {
      participants: Prisma.$BattleParticipationPayload<ExtArgs>[]
      casts: Prisma.$CastPayload<ExtArgs>[]
      winners: Prisma.$BattleWinPayload<ExtArgs>[]
      history: Prisma.$BattleHistoryPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      category: string
      source: string
      sourceUrl: string | null
      status: $Enums.BattleStatus
      startTime: Date
      endTime: Date
      durationHours: number
      maxParticipants: number
      debatePoints: Prisma.JsonValue
      overallScore: number | null
      balanceScore: number | null
      complexity: string | null
      controversyLevel: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["battle"]>
    composites: {}
  }

  type BattleGetPayload<S extends boolean | null | undefined | BattleDefaultArgs> = $Result.GetResult<Prisma.$BattlePayload, S>

  type BattleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BattleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BattleCountAggregateInputType | true
    }

  export interface BattleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Battle'], meta: { name: 'Battle' } }
    /**
     * Find zero or one Battle that matches the filter.
     * @param {BattleFindUniqueArgs} args - Arguments to find a Battle
     * @example
     * // Get one Battle
     * const battle = await prisma.battle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BattleFindUniqueArgs>(args: SelectSubset<T, BattleFindUniqueArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Battle that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BattleFindUniqueOrThrowArgs} args - Arguments to find a Battle
     * @example
     * // Get one Battle
     * const battle = await prisma.battle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BattleFindUniqueOrThrowArgs>(args: SelectSubset<T, BattleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Battle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleFindFirstArgs} args - Arguments to find a Battle
     * @example
     * // Get one Battle
     * const battle = await prisma.battle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BattleFindFirstArgs>(args?: SelectSubset<T, BattleFindFirstArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Battle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleFindFirstOrThrowArgs} args - Arguments to find a Battle
     * @example
     * // Get one Battle
     * const battle = await prisma.battle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BattleFindFirstOrThrowArgs>(args?: SelectSubset<T, BattleFindFirstOrThrowArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Battles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Battles
     * const battles = await prisma.battle.findMany()
     * 
     * // Get first 10 Battles
     * const battles = await prisma.battle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const battleWithIdOnly = await prisma.battle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BattleFindManyArgs>(args?: SelectSubset<T, BattleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Battle.
     * @param {BattleCreateArgs} args - Arguments to create a Battle.
     * @example
     * // Create one Battle
     * const Battle = await prisma.battle.create({
     *   data: {
     *     // ... data to create a Battle
     *   }
     * })
     * 
     */
    create<T extends BattleCreateArgs>(args: SelectSubset<T, BattleCreateArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Battles.
     * @param {BattleCreateManyArgs} args - Arguments to create many Battles.
     * @example
     * // Create many Battles
     * const battle = await prisma.battle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BattleCreateManyArgs>(args?: SelectSubset<T, BattleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Battles and returns the data saved in the database.
     * @param {BattleCreateManyAndReturnArgs} args - Arguments to create many Battles.
     * @example
     * // Create many Battles
     * const battle = await prisma.battle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Battles and only return the `id`
     * const battleWithIdOnly = await prisma.battle.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BattleCreateManyAndReturnArgs>(args?: SelectSubset<T, BattleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Battle.
     * @param {BattleDeleteArgs} args - Arguments to delete one Battle.
     * @example
     * // Delete one Battle
     * const Battle = await prisma.battle.delete({
     *   where: {
     *     // ... filter to delete one Battle
     *   }
     * })
     * 
     */
    delete<T extends BattleDeleteArgs>(args: SelectSubset<T, BattleDeleteArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Battle.
     * @param {BattleUpdateArgs} args - Arguments to update one Battle.
     * @example
     * // Update one Battle
     * const battle = await prisma.battle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BattleUpdateArgs>(args: SelectSubset<T, BattleUpdateArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Battles.
     * @param {BattleDeleteManyArgs} args - Arguments to filter Battles to delete.
     * @example
     * // Delete a few Battles
     * const { count } = await prisma.battle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BattleDeleteManyArgs>(args?: SelectSubset<T, BattleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Battles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Battles
     * const battle = await prisma.battle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BattleUpdateManyArgs>(args: SelectSubset<T, BattleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Battle.
     * @param {BattleUpsertArgs} args - Arguments to update or create a Battle.
     * @example
     * // Update or create a Battle
     * const battle = await prisma.battle.upsert({
     *   create: {
     *     // ... data to create a Battle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Battle we want to update
     *   }
     * })
     */
    upsert<T extends BattleUpsertArgs>(args: SelectSubset<T, BattleUpsertArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Battles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleCountArgs} args - Arguments to filter Battles to count.
     * @example
     * // Count the number of Battles
     * const count = await prisma.battle.count({
     *   where: {
     *     // ... the filter for the Battles we want to count
     *   }
     * })
    **/
    count<T extends BattleCountArgs>(
      args?: Subset<T, BattleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BattleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Battle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BattleAggregateArgs>(args: Subset<T, BattleAggregateArgs>): Prisma.PrismaPromise<GetBattleAggregateType<T>>

    /**
     * Group by Battle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BattleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BattleGroupByArgs['orderBy'] }
        : { orderBy?: BattleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BattleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBattleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Battle model
   */
  readonly fields: BattleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Battle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BattleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    participants<T extends Battle$participantsArgs<ExtArgs> = {}>(args?: Subset<T, Battle$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattleParticipationPayload<ExtArgs>, T, "findMany"> | Null>
    casts<T extends Battle$castsArgs<ExtArgs> = {}>(args?: Subset<T, Battle$castsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CastPayload<ExtArgs>, T, "findMany"> | Null>
    winners<T extends Battle$winnersArgs<ExtArgs> = {}>(args?: Subset<T, Battle$winnersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattleWinPayload<ExtArgs>, T, "findMany"> | Null>
    history<T extends Battle$historyArgs<ExtArgs> = {}>(args?: Subset<T, Battle$historyArgs<ExtArgs>>): Prisma__BattleHistoryClient<$Result.GetResult<Prisma.$BattleHistoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Battle model
   */ 
  interface BattleFieldRefs {
    readonly id: FieldRef<"Battle", 'String'>
    readonly title: FieldRef<"Battle", 'String'>
    readonly description: FieldRef<"Battle", 'String'>
    readonly category: FieldRef<"Battle", 'String'>
    readonly source: FieldRef<"Battle", 'String'>
    readonly sourceUrl: FieldRef<"Battle", 'String'>
    readonly status: FieldRef<"Battle", 'BattleStatus'>
    readonly startTime: FieldRef<"Battle", 'DateTime'>
    readonly endTime: FieldRef<"Battle", 'DateTime'>
    readonly durationHours: FieldRef<"Battle", 'Float'>
    readonly maxParticipants: FieldRef<"Battle", 'Int'>
    readonly debatePoints: FieldRef<"Battle", 'Json'>
    readonly overallScore: FieldRef<"Battle", 'Int'>
    readonly balanceScore: FieldRef<"Battle", 'Int'>
    readonly complexity: FieldRef<"Battle", 'String'>
    readonly controversyLevel: FieldRef<"Battle", 'String'>
    readonly createdAt: FieldRef<"Battle", 'DateTime'>
    readonly updatedAt: FieldRef<"Battle", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Battle findUnique
   */
  export type BattleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * Filter, which Battle to fetch.
     */
    where: BattleWhereUniqueInput
  }

  /**
   * Battle findUniqueOrThrow
   */
  export type BattleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * Filter, which Battle to fetch.
     */
    where: BattleWhereUniqueInput
  }

  /**
   * Battle findFirst
   */
  export type BattleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * Filter, which Battle to fetch.
     */
    where?: BattleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Battles to fetch.
     */
    orderBy?: BattleOrderByWithRelationInput | BattleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Battles.
     */
    cursor?: BattleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Battles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Battles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Battles.
     */
    distinct?: BattleScalarFieldEnum | BattleScalarFieldEnum[]
  }

  /**
   * Battle findFirstOrThrow
   */
  export type BattleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * Filter, which Battle to fetch.
     */
    where?: BattleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Battles to fetch.
     */
    orderBy?: BattleOrderByWithRelationInput | BattleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Battles.
     */
    cursor?: BattleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Battles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Battles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Battles.
     */
    distinct?: BattleScalarFieldEnum | BattleScalarFieldEnum[]
  }

  /**
   * Battle findMany
   */
  export type BattleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * Filter, which Battles to fetch.
     */
    where?: BattleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Battles to fetch.
     */
    orderBy?: BattleOrderByWithRelationInput | BattleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Battles.
     */
    cursor?: BattleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Battles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Battles.
     */
    skip?: number
    distinct?: BattleScalarFieldEnum | BattleScalarFieldEnum[]
  }

  /**
   * Battle create
   */
  export type BattleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * The data needed to create a Battle.
     */
    data: XOR<BattleCreateInput, BattleUncheckedCreateInput>
  }

  /**
   * Battle createMany
   */
  export type BattleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Battles.
     */
    data: BattleCreateManyInput | BattleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Battle createManyAndReturn
   */
  export type BattleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Battles.
     */
    data: BattleCreateManyInput | BattleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Battle update
   */
  export type BattleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * The data needed to update a Battle.
     */
    data: XOR<BattleUpdateInput, BattleUncheckedUpdateInput>
    /**
     * Choose, which Battle to update.
     */
    where: BattleWhereUniqueInput
  }

  /**
   * Battle updateMany
   */
  export type BattleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Battles.
     */
    data: XOR<BattleUpdateManyMutationInput, BattleUncheckedUpdateManyInput>
    /**
     * Filter which Battles to update
     */
    where?: BattleWhereInput
  }

  /**
   * Battle upsert
   */
  export type BattleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * The filter to search for the Battle to update in case it exists.
     */
    where: BattleWhereUniqueInput
    /**
     * In case the Battle found by the `where` argument doesn't exist, create a new Battle with this data.
     */
    create: XOR<BattleCreateInput, BattleUncheckedCreateInput>
    /**
     * In case the Battle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BattleUpdateInput, BattleUncheckedUpdateInput>
  }

  /**
   * Battle delete
   */
  export type BattleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
    /**
     * Filter which Battle to delete.
     */
    where: BattleWhereUniqueInput
  }

  /**
   * Battle deleteMany
   */
  export type BattleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Battles to delete
     */
    where?: BattleWhereInput
  }

  /**
   * Battle.participants
   */
  export type Battle$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleParticipation
     */
    select?: BattleParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleParticipationInclude<ExtArgs> | null
    where?: BattleParticipationWhereInput
    orderBy?: BattleParticipationOrderByWithRelationInput | BattleParticipationOrderByWithRelationInput[]
    cursor?: BattleParticipationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BattleParticipationScalarFieldEnum | BattleParticipationScalarFieldEnum[]
  }

  /**
   * Battle.casts
   */
  export type Battle$castsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cast
     */
    select?: CastSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CastInclude<ExtArgs> | null
    where?: CastWhereInput
    orderBy?: CastOrderByWithRelationInput | CastOrderByWithRelationInput[]
    cursor?: CastWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CastScalarFieldEnum | CastScalarFieldEnum[]
  }

  /**
   * Battle.winners
   */
  export type Battle$winnersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleWin
     */
    select?: BattleWinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleWinInclude<ExtArgs> | null
    where?: BattleWinWhereInput
    orderBy?: BattleWinOrderByWithRelationInput | BattleWinOrderByWithRelationInput[]
    cursor?: BattleWinWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BattleWinScalarFieldEnum | BattleWinScalarFieldEnum[]
  }

  /**
   * Battle.history
   */
  export type Battle$historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleHistory
     */
    select?: BattleHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleHistoryInclude<ExtArgs> | null
    where?: BattleHistoryWhereInput
  }

  /**
   * Battle without action
   */
  export type BattleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Battle
     */
    select?: BattleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleInclude<ExtArgs> | null
  }


  /**
   * Model BattleParticipation
   */

  export type AggregateBattleParticipation = {
    _count: BattleParticipationCountAggregateOutputType | null
    _min: BattleParticipationMinAggregateOutputType | null
    _max: BattleParticipationMaxAggregateOutputType | null
  }

  export type BattleParticipationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    battleId: string | null
    joinedAt: Date | null
  }

  export type BattleParticipationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    battleId: string | null
    joinedAt: Date | null
  }

  export type BattleParticipationCountAggregateOutputType = {
    id: number
    userId: number
    battleId: number
    joinedAt: number
    _all: number
  }


  export type BattleParticipationMinAggregateInputType = {
    id?: true
    userId?: true
    battleId?: true
    joinedAt?: true
  }

  export type BattleParticipationMaxAggregateInputType = {
    id?: true
    userId?: true
    battleId?: true
    joinedAt?: true
  }

  export type BattleParticipationCountAggregateInputType = {
    id?: true
    userId?: true
    battleId?: true
    joinedAt?: true
    _all?: true
  }

  export type BattleParticipationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BattleParticipation to aggregate.
     */
    where?: BattleParticipationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BattleParticipations to fetch.
     */
    orderBy?: BattleParticipationOrderByWithRelationInput | BattleParticipationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BattleParticipationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BattleParticipations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BattleParticipations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BattleParticipations
    **/
    _count?: true | BattleParticipationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BattleParticipationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BattleParticipationMaxAggregateInputType
  }

  export type GetBattleParticipationAggregateType<T extends BattleParticipationAggregateArgs> = {
        [P in keyof T & keyof AggregateBattleParticipation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBattleParticipation[P]>
      : GetScalarType<T[P], AggregateBattleParticipation[P]>
  }




  export type BattleParticipationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BattleParticipationWhereInput
    orderBy?: BattleParticipationOrderByWithAggregationInput | BattleParticipationOrderByWithAggregationInput[]
    by: BattleParticipationScalarFieldEnum[] | BattleParticipationScalarFieldEnum
    having?: BattleParticipationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BattleParticipationCountAggregateInputType | true
    _min?: BattleParticipationMinAggregateInputType
    _max?: BattleParticipationMaxAggregateInputType
  }

  export type BattleParticipationGroupByOutputType = {
    id: string
    userId: string
    battleId: string
    joinedAt: Date
    _count: BattleParticipationCountAggregateOutputType | null
    _min: BattleParticipationMinAggregateOutputType | null
    _max: BattleParticipationMaxAggregateOutputType | null
  }

  type GetBattleParticipationGroupByPayload<T extends BattleParticipationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BattleParticipationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BattleParticipationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BattleParticipationGroupByOutputType[P]>
            : GetScalarType<T[P], BattleParticipationGroupByOutputType[P]>
        }
      >
    >


  export type BattleParticipationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    battleId?: boolean
    joinedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    battle?: boolean | BattleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["battleParticipation"]>

  export type BattleParticipationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    battleId?: boolean
    joinedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    battle?: boolean | BattleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["battleParticipation"]>

  export type BattleParticipationSelectScalar = {
    id?: boolean
    userId?: boolean
    battleId?: boolean
    joinedAt?: boolean
  }

  export type BattleParticipationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    battle?: boolean | BattleDefaultArgs<ExtArgs>
  }
  export type BattleParticipationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    battle?: boolean | BattleDefaultArgs<ExtArgs>
  }

  export type $BattleParticipationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BattleParticipation"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      battle: Prisma.$BattlePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      battleId: string
      joinedAt: Date
    }, ExtArgs["result"]["battleParticipation"]>
    composites: {}
  }

  type BattleParticipationGetPayload<S extends boolean | null | undefined | BattleParticipationDefaultArgs> = $Result.GetResult<Prisma.$BattleParticipationPayload, S>

  type BattleParticipationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BattleParticipationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BattleParticipationCountAggregateInputType | true
    }

  export interface BattleParticipationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BattleParticipation'], meta: { name: 'BattleParticipation' } }
    /**
     * Find zero or one BattleParticipation that matches the filter.
     * @param {BattleParticipationFindUniqueArgs} args - Arguments to find a BattleParticipation
     * @example
     * // Get one BattleParticipation
     * const battleParticipation = await prisma.battleParticipation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BattleParticipationFindUniqueArgs>(args: SelectSubset<T, BattleParticipationFindUniqueArgs<ExtArgs>>): Prisma__BattleParticipationClient<$Result.GetResult<Prisma.$BattleParticipationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BattleParticipation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BattleParticipationFindUniqueOrThrowArgs} args - Arguments to find a BattleParticipation
     * @example
     * // Get one BattleParticipation
     * const battleParticipation = await prisma.battleParticipation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BattleParticipationFindUniqueOrThrowArgs>(args: SelectSubset<T, BattleParticipationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BattleParticipationClient<$Result.GetResult<Prisma.$BattleParticipationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BattleParticipation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleParticipationFindFirstArgs} args - Arguments to find a BattleParticipation
     * @example
     * // Get one BattleParticipation
     * const battleParticipation = await prisma.battleParticipation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BattleParticipationFindFirstArgs>(args?: SelectSubset<T, BattleParticipationFindFirstArgs<ExtArgs>>): Prisma__BattleParticipationClient<$Result.GetResult<Prisma.$BattleParticipationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BattleParticipation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleParticipationFindFirstOrThrowArgs} args - Arguments to find a BattleParticipation
     * @example
     * // Get one BattleParticipation
     * const battleParticipation = await prisma.battleParticipation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BattleParticipationFindFirstOrThrowArgs>(args?: SelectSubset<T, BattleParticipationFindFirstOrThrowArgs<ExtArgs>>): Prisma__BattleParticipationClient<$Result.GetResult<Prisma.$BattleParticipationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BattleParticipations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleParticipationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BattleParticipations
     * const battleParticipations = await prisma.battleParticipation.findMany()
     * 
     * // Get first 10 BattleParticipations
     * const battleParticipations = await prisma.battleParticipation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const battleParticipationWithIdOnly = await prisma.battleParticipation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BattleParticipationFindManyArgs>(args?: SelectSubset<T, BattleParticipationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattleParticipationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BattleParticipation.
     * @param {BattleParticipationCreateArgs} args - Arguments to create a BattleParticipation.
     * @example
     * // Create one BattleParticipation
     * const BattleParticipation = await prisma.battleParticipation.create({
     *   data: {
     *     // ... data to create a BattleParticipation
     *   }
     * })
     * 
     */
    create<T extends BattleParticipationCreateArgs>(args: SelectSubset<T, BattleParticipationCreateArgs<ExtArgs>>): Prisma__BattleParticipationClient<$Result.GetResult<Prisma.$BattleParticipationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BattleParticipations.
     * @param {BattleParticipationCreateManyArgs} args - Arguments to create many BattleParticipations.
     * @example
     * // Create many BattleParticipations
     * const battleParticipation = await prisma.battleParticipation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BattleParticipationCreateManyArgs>(args?: SelectSubset<T, BattleParticipationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BattleParticipations and returns the data saved in the database.
     * @param {BattleParticipationCreateManyAndReturnArgs} args - Arguments to create many BattleParticipations.
     * @example
     * // Create many BattleParticipations
     * const battleParticipation = await prisma.battleParticipation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BattleParticipations and only return the `id`
     * const battleParticipationWithIdOnly = await prisma.battleParticipation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BattleParticipationCreateManyAndReturnArgs>(args?: SelectSubset<T, BattleParticipationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattleParticipationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BattleParticipation.
     * @param {BattleParticipationDeleteArgs} args - Arguments to delete one BattleParticipation.
     * @example
     * // Delete one BattleParticipation
     * const BattleParticipation = await prisma.battleParticipation.delete({
     *   where: {
     *     // ... filter to delete one BattleParticipation
     *   }
     * })
     * 
     */
    delete<T extends BattleParticipationDeleteArgs>(args: SelectSubset<T, BattleParticipationDeleteArgs<ExtArgs>>): Prisma__BattleParticipationClient<$Result.GetResult<Prisma.$BattleParticipationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BattleParticipation.
     * @param {BattleParticipationUpdateArgs} args - Arguments to update one BattleParticipation.
     * @example
     * // Update one BattleParticipation
     * const battleParticipation = await prisma.battleParticipation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BattleParticipationUpdateArgs>(args: SelectSubset<T, BattleParticipationUpdateArgs<ExtArgs>>): Prisma__BattleParticipationClient<$Result.GetResult<Prisma.$BattleParticipationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BattleParticipations.
     * @param {BattleParticipationDeleteManyArgs} args - Arguments to filter BattleParticipations to delete.
     * @example
     * // Delete a few BattleParticipations
     * const { count } = await prisma.battleParticipation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BattleParticipationDeleteManyArgs>(args?: SelectSubset<T, BattleParticipationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BattleParticipations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleParticipationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BattleParticipations
     * const battleParticipation = await prisma.battleParticipation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BattleParticipationUpdateManyArgs>(args: SelectSubset<T, BattleParticipationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BattleParticipation.
     * @param {BattleParticipationUpsertArgs} args - Arguments to update or create a BattleParticipation.
     * @example
     * // Update or create a BattleParticipation
     * const battleParticipation = await prisma.battleParticipation.upsert({
     *   create: {
     *     // ... data to create a BattleParticipation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BattleParticipation we want to update
     *   }
     * })
     */
    upsert<T extends BattleParticipationUpsertArgs>(args: SelectSubset<T, BattleParticipationUpsertArgs<ExtArgs>>): Prisma__BattleParticipationClient<$Result.GetResult<Prisma.$BattleParticipationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BattleParticipations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleParticipationCountArgs} args - Arguments to filter BattleParticipations to count.
     * @example
     * // Count the number of BattleParticipations
     * const count = await prisma.battleParticipation.count({
     *   where: {
     *     // ... the filter for the BattleParticipations we want to count
     *   }
     * })
    **/
    count<T extends BattleParticipationCountArgs>(
      args?: Subset<T, BattleParticipationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BattleParticipationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BattleParticipation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleParticipationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BattleParticipationAggregateArgs>(args: Subset<T, BattleParticipationAggregateArgs>): Prisma.PrismaPromise<GetBattleParticipationAggregateType<T>>

    /**
     * Group by BattleParticipation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleParticipationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BattleParticipationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BattleParticipationGroupByArgs['orderBy'] }
        : { orderBy?: BattleParticipationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BattleParticipationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBattleParticipationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BattleParticipation model
   */
  readonly fields: BattleParticipationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BattleParticipation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BattleParticipationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    battle<T extends BattleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BattleDefaultArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BattleParticipation model
   */ 
  interface BattleParticipationFieldRefs {
    readonly id: FieldRef<"BattleParticipation", 'String'>
    readonly userId: FieldRef<"BattleParticipation", 'String'>
    readonly battleId: FieldRef<"BattleParticipation", 'String'>
    readonly joinedAt: FieldRef<"BattleParticipation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BattleParticipation findUnique
   */
  export type BattleParticipationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleParticipation
     */
    select?: BattleParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleParticipationInclude<ExtArgs> | null
    /**
     * Filter, which BattleParticipation to fetch.
     */
    where: BattleParticipationWhereUniqueInput
  }

  /**
   * BattleParticipation findUniqueOrThrow
   */
  export type BattleParticipationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleParticipation
     */
    select?: BattleParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleParticipationInclude<ExtArgs> | null
    /**
     * Filter, which BattleParticipation to fetch.
     */
    where: BattleParticipationWhereUniqueInput
  }

  /**
   * BattleParticipation findFirst
   */
  export type BattleParticipationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleParticipation
     */
    select?: BattleParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleParticipationInclude<ExtArgs> | null
    /**
     * Filter, which BattleParticipation to fetch.
     */
    where?: BattleParticipationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BattleParticipations to fetch.
     */
    orderBy?: BattleParticipationOrderByWithRelationInput | BattleParticipationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BattleParticipations.
     */
    cursor?: BattleParticipationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BattleParticipations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BattleParticipations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BattleParticipations.
     */
    distinct?: BattleParticipationScalarFieldEnum | BattleParticipationScalarFieldEnum[]
  }

  /**
   * BattleParticipation findFirstOrThrow
   */
  export type BattleParticipationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleParticipation
     */
    select?: BattleParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleParticipationInclude<ExtArgs> | null
    /**
     * Filter, which BattleParticipation to fetch.
     */
    where?: BattleParticipationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BattleParticipations to fetch.
     */
    orderBy?: BattleParticipationOrderByWithRelationInput | BattleParticipationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BattleParticipations.
     */
    cursor?: BattleParticipationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BattleParticipations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BattleParticipations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BattleParticipations.
     */
    distinct?: BattleParticipationScalarFieldEnum | BattleParticipationScalarFieldEnum[]
  }

  /**
   * BattleParticipation findMany
   */
  export type BattleParticipationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleParticipation
     */
    select?: BattleParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleParticipationInclude<ExtArgs> | null
    /**
     * Filter, which BattleParticipations to fetch.
     */
    where?: BattleParticipationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BattleParticipations to fetch.
     */
    orderBy?: BattleParticipationOrderByWithRelationInput | BattleParticipationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BattleParticipations.
     */
    cursor?: BattleParticipationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BattleParticipations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BattleParticipations.
     */
    skip?: number
    distinct?: BattleParticipationScalarFieldEnum | BattleParticipationScalarFieldEnum[]
  }

  /**
   * BattleParticipation create
   */
  export type BattleParticipationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleParticipation
     */
    select?: BattleParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleParticipationInclude<ExtArgs> | null
    /**
     * The data needed to create a BattleParticipation.
     */
    data: XOR<BattleParticipationCreateInput, BattleParticipationUncheckedCreateInput>
  }

  /**
   * BattleParticipation createMany
   */
  export type BattleParticipationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BattleParticipations.
     */
    data: BattleParticipationCreateManyInput | BattleParticipationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BattleParticipation createManyAndReturn
   */
  export type BattleParticipationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleParticipation
     */
    select?: BattleParticipationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BattleParticipations.
     */
    data: BattleParticipationCreateManyInput | BattleParticipationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleParticipationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BattleParticipation update
   */
  export type BattleParticipationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleParticipation
     */
    select?: BattleParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleParticipationInclude<ExtArgs> | null
    /**
     * The data needed to update a BattleParticipation.
     */
    data: XOR<BattleParticipationUpdateInput, BattleParticipationUncheckedUpdateInput>
    /**
     * Choose, which BattleParticipation to update.
     */
    where: BattleParticipationWhereUniqueInput
  }

  /**
   * BattleParticipation updateMany
   */
  export type BattleParticipationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BattleParticipations.
     */
    data: XOR<BattleParticipationUpdateManyMutationInput, BattleParticipationUncheckedUpdateManyInput>
    /**
     * Filter which BattleParticipations to update
     */
    where?: BattleParticipationWhereInput
  }

  /**
   * BattleParticipation upsert
   */
  export type BattleParticipationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleParticipation
     */
    select?: BattleParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleParticipationInclude<ExtArgs> | null
    /**
     * The filter to search for the BattleParticipation to update in case it exists.
     */
    where: BattleParticipationWhereUniqueInput
    /**
     * In case the BattleParticipation found by the `where` argument doesn't exist, create a new BattleParticipation with this data.
     */
    create: XOR<BattleParticipationCreateInput, BattleParticipationUncheckedCreateInput>
    /**
     * In case the BattleParticipation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BattleParticipationUpdateInput, BattleParticipationUncheckedUpdateInput>
  }

  /**
   * BattleParticipation delete
   */
  export type BattleParticipationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleParticipation
     */
    select?: BattleParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleParticipationInclude<ExtArgs> | null
    /**
     * Filter which BattleParticipation to delete.
     */
    where: BattleParticipationWhereUniqueInput
  }

  /**
   * BattleParticipation deleteMany
   */
  export type BattleParticipationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BattleParticipations to delete
     */
    where?: BattleParticipationWhereInput
  }

  /**
   * BattleParticipation without action
   */
  export type BattleParticipationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleParticipation
     */
    select?: BattleParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleParticipationInclude<ExtArgs> | null
  }


  /**
   * Model Cast
   */

  export type AggregateCast = {
    _count: CastCountAggregateOutputType | null
    _avg: CastAvgAggregateOutputType | null
    _sum: CastSumAggregateOutputType | null
    _min: CastMinAggregateOutputType | null
    _max: CastMaxAggregateOutputType | null
  }

  export type CastAvgAggregateOutputType = {
    qualityScore: number | null
    relevanceScore: number | null
  }

  export type CastSumAggregateOutputType = {
    qualityScore: number | null
    relevanceScore: number | null
  }

  export type CastMinAggregateOutputType = {
    id: string | null
    userId: string | null
    battleId: string | null
    content: string | null
    side: $Enums.CastSide | null
    qualityScore: number | null
    relevanceScore: number | null
    isAppropriate: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CastMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    battleId: string | null
    content: string | null
    side: $Enums.CastSide | null
    qualityScore: number | null
    relevanceScore: number | null
    isAppropriate: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CastCountAggregateOutputType = {
    id: number
    userId: number
    battleId: number
    content: number
    side: number
    qualityScore: number
    relevanceScore: number
    isAppropriate: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CastAvgAggregateInputType = {
    qualityScore?: true
    relevanceScore?: true
  }

  export type CastSumAggregateInputType = {
    qualityScore?: true
    relevanceScore?: true
  }

  export type CastMinAggregateInputType = {
    id?: true
    userId?: true
    battleId?: true
    content?: true
    side?: true
    qualityScore?: true
    relevanceScore?: true
    isAppropriate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CastMaxAggregateInputType = {
    id?: true
    userId?: true
    battleId?: true
    content?: true
    side?: true
    qualityScore?: true
    relevanceScore?: true
    isAppropriate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CastCountAggregateInputType = {
    id?: true
    userId?: true
    battleId?: true
    content?: true
    side?: true
    qualityScore?: true
    relevanceScore?: true
    isAppropriate?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CastAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cast to aggregate.
     */
    where?: CastWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Casts to fetch.
     */
    orderBy?: CastOrderByWithRelationInput | CastOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CastWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Casts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Casts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Casts
    **/
    _count?: true | CastCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CastAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CastSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CastMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CastMaxAggregateInputType
  }

  export type GetCastAggregateType<T extends CastAggregateArgs> = {
        [P in keyof T & keyof AggregateCast]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCast[P]>
      : GetScalarType<T[P], AggregateCast[P]>
  }




  export type CastGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CastWhereInput
    orderBy?: CastOrderByWithAggregationInput | CastOrderByWithAggregationInput[]
    by: CastScalarFieldEnum[] | CastScalarFieldEnum
    having?: CastScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CastCountAggregateInputType | true
    _avg?: CastAvgAggregateInputType
    _sum?: CastSumAggregateInputType
    _min?: CastMinAggregateInputType
    _max?: CastMaxAggregateInputType
  }

  export type CastGroupByOutputType = {
    id: string
    userId: string
    battleId: string
    content: string
    side: $Enums.CastSide
    qualityScore: number | null
    relevanceScore: number | null
    isAppropriate: boolean
    createdAt: Date
    updatedAt: Date
    _count: CastCountAggregateOutputType | null
    _avg: CastAvgAggregateOutputType | null
    _sum: CastSumAggregateOutputType | null
    _min: CastMinAggregateOutputType | null
    _max: CastMaxAggregateOutputType | null
  }

  type GetCastGroupByPayload<T extends CastGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CastGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CastGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CastGroupByOutputType[P]>
            : GetScalarType<T[P], CastGroupByOutputType[P]>
        }
      >
    >


  export type CastSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    battleId?: boolean
    content?: boolean
    side?: boolean
    qualityScore?: boolean
    relevanceScore?: boolean
    isAppropriate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    battle?: boolean | BattleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cast"]>

  export type CastSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    battleId?: boolean
    content?: boolean
    side?: boolean
    qualityScore?: boolean
    relevanceScore?: boolean
    isAppropriate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    battle?: boolean | BattleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cast"]>

  export type CastSelectScalar = {
    id?: boolean
    userId?: boolean
    battleId?: boolean
    content?: boolean
    side?: boolean
    qualityScore?: boolean
    relevanceScore?: boolean
    isAppropriate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CastInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    battle?: boolean | BattleDefaultArgs<ExtArgs>
  }
  export type CastIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    battle?: boolean | BattleDefaultArgs<ExtArgs>
  }

  export type $CastPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cast"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      battle: Prisma.$BattlePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      battleId: string
      content: string
      side: $Enums.CastSide
      qualityScore: number | null
      relevanceScore: number | null
      isAppropriate: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["cast"]>
    composites: {}
  }

  type CastGetPayload<S extends boolean | null | undefined | CastDefaultArgs> = $Result.GetResult<Prisma.$CastPayload, S>

  type CastCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CastFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CastCountAggregateInputType | true
    }

  export interface CastDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cast'], meta: { name: 'Cast' } }
    /**
     * Find zero or one Cast that matches the filter.
     * @param {CastFindUniqueArgs} args - Arguments to find a Cast
     * @example
     * // Get one Cast
     * const cast = await prisma.cast.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CastFindUniqueArgs>(args: SelectSubset<T, CastFindUniqueArgs<ExtArgs>>): Prisma__CastClient<$Result.GetResult<Prisma.$CastPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Cast that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CastFindUniqueOrThrowArgs} args - Arguments to find a Cast
     * @example
     * // Get one Cast
     * const cast = await prisma.cast.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CastFindUniqueOrThrowArgs>(args: SelectSubset<T, CastFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CastClient<$Result.GetResult<Prisma.$CastPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Cast that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CastFindFirstArgs} args - Arguments to find a Cast
     * @example
     * // Get one Cast
     * const cast = await prisma.cast.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CastFindFirstArgs>(args?: SelectSubset<T, CastFindFirstArgs<ExtArgs>>): Prisma__CastClient<$Result.GetResult<Prisma.$CastPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Cast that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CastFindFirstOrThrowArgs} args - Arguments to find a Cast
     * @example
     * // Get one Cast
     * const cast = await prisma.cast.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CastFindFirstOrThrowArgs>(args?: SelectSubset<T, CastFindFirstOrThrowArgs<ExtArgs>>): Prisma__CastClient<$Result.GetResult<Prisma.$CastPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Casts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CastFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Casts
     * const casts = await prisma.cast.findMany()
     * 
     * // Get first 10 Casts
     * const casts = await prisma.cast.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const castWithIdOnly = await prisma.cast.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CastFindManyArgs>(args?: SelectSubset<T, CastFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CastPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Cast.
     * @param {CastCreateArgs} args - Arguments to create a Cast.
     * @example
     * // Create one Cast
     * const Cast = await prisma.cast.create({
     *   data: {
     *     // ... data to create a Cast
     *   }
     * })
     * 
     */
    create<T extends CastCreateArgs>(args: SelectSubset<T, CastCreateArgs<ExtArgs>>): Prisma__CastClient<$Result.GetResult<Prisma.$CastPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Casts.
     * @param {CastCreateManyArgs} args - Arguments to create many Casts.
     * @example
     * // Create many Casts
     * const cast = await prisma.cast.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CastCreateManyArgs>(args?: SelectSubset<T, CastCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Casts and returns the data saved in the database.
     * @param {CastCreateManyAndReturnArgs} args - Arguments to create many Casts.
     * @example
     * // Create many Casts
     * const cast = await prisma.cast.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Casts and only return the `id`
     * const castWithIdOnly = await prisma.cast.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CastCreateManyAndReturnArgs>(args?: SelectSubset<T, CastCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CastPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Cast.
     * @param {CastDeleteArgs} args - Arguments to delete one Cast.
     * @example
     * // Delete one Cast
     * const Cast = await prisma.cast.delete({
     *   where: {
     *     // ... filter to delete one Cast
     *   }
     * })
     * 
     */
    delete<T extends CastDeleteArgs>(args: SelectSubset<T, CastDeleteArgs<ExtArgs>>): Prisma__CastClient<$Result.GetResult<Prisma.$CastPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Cast.
     * @param {CastUpdateArgs} args - Arguments to update one Cast.
     * @example
     * // Update one Cast
     * const cast = await prisma.cast.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CastUpdateArgs>(args: SelectSubset<T, CastUpdateArgs<ExtArgs>>): Prisma__CastClient<$Result.GetResult<Prisma.$CastPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Casts.
     * @param {CastDeleteManyArgs} args - Arguments to filter Casts to delete.
     * @example
     * // Delete a few Casts
     * const { count } = await prisma.cast.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CastDeleteManyArgs>(args?: SelectSubset<T, CastDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Casts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CastUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Casts
     * const cast = await prisma.cast.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CastUpdateManyArgs>(args: SelectSubset<T, CastUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cast.
     * @param {CastUpsertArgs} args - Arguments to update or create a Cast.
     * @example
     * // Update or create a Cast
     * const cast = await prisma.cast.upsert({
     *   create: {
     *     // ... data to create a Cast
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cast we want to update
     *   }
     * })
     */
    upsert<T extends CastUpsertArgs>(args: SelectSubset<T, CastUpsertArgs<ExtArgs>>): Prisma__CastClient<$Result.GetResult<Prisma.$CastPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Casts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CastCountArgs} args - Arguments to filter Casts to count.
     * @example
     * // Count the number of Casts
     * const count = await prisma.cast.count({
     *   where: {
     *     // ... the filter for the Casts we want to count
     *   }
     * })
    **/
    count<T extends CastCountArgs>(
      args?: Subset<T, CastCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CastCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cast.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CastAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CastAggregateArgs>(args: Subset<T, CastAggregateArgs>): Prisma.PrismaPromise<GetCastAggregateType<T>>

    /**
     * Group by Cast.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CastGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CastGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CastGroupByArgs['orderBy'] }
        : { orderBy?: CastGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CastGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCastGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cast model
   */
  readonly fields: CastFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cast.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CastClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    battle<T extends BattleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BattleDefaultArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cast model
   */ 
  interface CastFieldRefs {
    readonly id: FieldRef<"Cast", 'String'>
    readonly userId: FieldRef<"Cast", 'String'>
    readonly battleId: FieldRef<"Cast", 'String'>
    readonly content: FieldRef<"Cast", 'String'>
    readonly side: FieldRef<"Cast", 'CastSide'>
    readonly qualityScore: FieldRef<"Cast", 'Int'>
    readonly relevanceScore: FieldRef<"Cast", 'Int'>
    readonly isAppropriate: FieldRef<"Cast", 'Boolean'>
    readonly createdAt: FieldRef<"Cast", 'DateTime'>
    readonly updatedAt: FieldRef<"Cast", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Cast findUnique
   */
  export type CastFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cast
     */
    select?: CastSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CastInclude<ExtArgs> | null
    /**
     * Filter, which Cast to fetch.
     */
    where: CastWhereUniqueInput
  }

  /**
   * Cast findUniqueOrThrow
   */
  export type CastFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cast
     */
    select?: CastSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CastInclude<ExtArgs> | null
    /**
     * Filter, which Cast to fetch.
     */
    where: CastWhereUniqueInput
  }

  /**
   * Cast findFirst
   */
  export type CastFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cast
     */
    select?: CastSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CastInclude<ExtArgs> | null
    /**
     * Filter, which Cast to fetch.
     */
    where?: CastWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Casts to fetch.
     */
    orderBy?: CastOrderByWithRelationInput | CastOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Casts.
     */
    cursor?: CastWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Casts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Casts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Casts.
     */
    distinct?: CastScalarFieldEnum | CastScalarFieldEnum[]
  }

  /**
   * Cast findFirstOrThrow
   */
  export type CastFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cast
     */
    select?: CastSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CastInclude<ExtArgs> | null
    /**
     * Filter, which Cast to fetch.
     */
    where?: CastWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Casts to fetch.
     */
    orderBy?: CastOrderByWithRelationInput | CastOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Casts.
     */
    cursor?: CastWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Casts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Casts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Casts.
     */
    distinct?: CastScalarFieldEnum | CastScalarFieldEnum[]
  }

  /**
   * Cast findMany
   */
  export type CastFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cast
     */
    select?: CastSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CastInclude<ExtArgs> | null
    /**
     * Filter, which Casts to fetch.
     */
    where?: CastWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Casts to fetch.
     */
    orderBy?: CastOrderByWithRelationInput | CastOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Casts.
     */
    cursor?: CastWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Casts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Casts.
     */
    skip?: number
    distinct?: CastScalarFieldEnum | CastScalarFieldEnum[]
  }

  /**
   * Cast create
   */
  export type CastCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cast
     */
    select?: CastSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CastInclude<ExtArgs> | null
    /**
     * The data needed to create a Cast.
     */
    data: XOR<CastCreateInput, CastUncheckedCreateInput>
  }

  /**
   * Cast createMany
   */
  export type CastCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Casts.
     */
    data: CastCreateManyInput | CastCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cast createManyAndReturn
   */
  export type CastCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cast
     */
    select?: CastSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Casts.
     */
    data: CastCreateManyInput | CastCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CastIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cast update
   */
  export type CastUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cast
     */
    select?: CastSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CastInclude<ExtArgs> | null
    /**
     * The data needed to update a Cast.
     */
    data: XOR<CastUpdateInput, CastUncheckedUpdateInput>
    /**
     * Choose, which Cast to update.
     */
    where: CastWhereUniqueInput
  }

  /**
   * Cast updateMany
   */
  export type CastUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Casts.
     */
    data: XOR<CastUpdateManyMutationInput, CastUncheckedUpdateManyInput>
    /**
     * Filter which Casts to update
     */
    where?: CastWhereInput
  }

  /**
   * Cast upsert
   */
  export type CastUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cast
     */
    select?: CastSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CastInclude<ExtArgs> | null
    /**
     * The filter to search for the Cast to update in case it exists.
     */
    where: CastWhereUniqueInput
    /**
     * In case the Cast found by the `where` argument doesn't exist, create a new Cast with this data.
     */
    create: XOR<CastCreateInput, CastUncheckedCreateInput>
    /**
     * In case the Cast was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CastUpdateInput, CastUncheckedUpdateInput>
  }

  /**
   * Cast delete
   */
  export type CastDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cast
     */
    select?: CastSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CastInclude<ExtArgs> | null
    /**
     * Filter which Cast to delete.
     */
    where: CastWhereUniqueInput
  }

  /**
   * Cast deleteMany
   */
  export type CastDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Casts to delete
     */
    where?: CastWhereInput
  }

  /**
   * Cast without action
   */
  export type CastDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cast
     */
    select?: CastSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CastInclude<ExtArgs> | null
  }


  /**
   * Model BattleWin
   */

  export type AggregateBattleWin = {
    _count: BattleWinCountAggregateOutputType | null
    _avg: BattleWinAvgAggregateOutputType | null
    _sum: BattleWinSumAggregateOutputType | null
    _min: BattleWinMinAggregateOutputType | null
    _max: BattleWinMaxAggregateOutputType | null
  }

  export type BattleWinAvgAggregateOutputType = {
    position: number | null
  }

  export type BattleWinSumAggregateOutputType = {
    position: number | null
  }

  export type BattleWinMinAggregateOutputType = {
    id: string | null
    battleId: string | null
    userId: string | null
    position: number | null
    prize: string | null
  }

  export type BattleWinMaxAggregateOutputType = {
    id: string | null
    battleId: string | null
    userId: string | null
    position: number | null
    prize: string | null
  }

  export type BattleWinCountAggregateOutputType = {
    id: number
    battleId: number
    userId: number
    position: number
    prize: number
    _all: number
  }


  export type BattleWinAvgAggregateInputType = {
    position?: true
  }

  export type BattleWinSumAggregateInputType = {
    position?: true
  }

  export type BattleWinMinAggregateInputType = {
    id?: true
    battleId?: true
    userId?: true
    position?: true
    prize?: true
  }

  export type BattleWinMaxAggregateInputType = {
    id?: true
    battleId?: true
    userId?: true
    position?: true
    prize?: true
  }

  export type BattleWinCountAggregateInputType = {
    id?: true
    battleId?: true
    userId?: true
    position?: true
    prize?: true
    _all?: true
  }

  export type BattleWinAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BattleWin to aggregate.
     */
    where?: BattleWinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BattleWins to fetch.
     */
    orderBy?: BattleWinOrderByWithRelationInput | BattleWinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BattleWinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BattleWins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BattleWins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BattleWins
    **/
    _count?: true | BattleWinCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BattleWinAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BattleWinSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BattleWinMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BattleWinMaxAggregateInputType
  }

  export type GetBattleWinAggregateType<T extends BattleWinAggregateArgs> = {
        [P in keyof T & keyof AggregateBattleWin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBattleWin[P]>
      : GetScalarType<T[P], AggregateBattleWin[P]>
  }




  export type BattleWinGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BattleWinWhereInput
    orderBy?: BattleWinOrderByWithAggregationInput | BattleWinOrderByWithAggregationInput[]
    by: BattleWinScalarFieldEnum[] | BattleWinScalarFieldEnum
    having?: BattleWinScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BattleWinCountAggregateInputType | true
    _avg?: BattleWinAvgAggregateInputType
    _sum?: BattleWinSumAggregateInputType
    _min?: BattleWinMinAggregateInputType
    _max?: BattleWinMaxAggregateInputType
  }

  export type BattleWinGroupByOutputType = {
    id: string
    battleId: string
    userId: string
    position: number
    prize: string | null
    _count: BattleWinCountAggregateOutputType | null
    _avg: BattleWinAvgAggregateOutputType | null
    _sum: BattleWinSumAggregateOutputType | null
    _min: BattleWinMinAggregateOutputType | null
    _max: BattleWinMaxAggregateOutputType | null
  }

  type GetBattleWinGroupByPayload<T extends BattleWinGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BattleWinGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BattleWinGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BattleWinGroupByOutputType[P]>
            : GetScalarType<T[P], BattleWinGroupByOutputType[P]>
        }
      >
    >


  export type BattleWinSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    battleId?: boolean
    userId?: boolean
    position?: boolean
    prize?: boolean
    battle?: boolean | BattleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["battleWin"]>

  export type BattleWinSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    battleId?: boolean
    userId?: boolean
    position?: boolean
    prize?: boolean
    battle?: boolean | BattleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["battleWin"]>

  export type BattleWinSelectScalar = {
    id?: boolean
    battleId?: boolean
    userId?: boolean
    position?: boolean
    prize?: boolean
  }

  export type BattleWinInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    battle?: boolean | BattleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BattleWinIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    battle?: boolean | BattleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BattleWinPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BattleWin"
    objects: {
      battle: Prisma.$BattlePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      battleId: string
      userId: string
      position: number
      prize: string | null
    }, ExtArgs["result"]["battleWin"]>
    composites: {}
  }

  type BattleWinGetPayload<S extends boolean | null | undefined | BattleWinDefaultArgs> = $Result.GetResult<Prisma.$BattleWinPayload, S>

  type BattleWinCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BattleWinFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BattleWinCountAggregateInputType | true
    }

  export interface BattleWinDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BattleWin'], meta: { name: 'BattleWin' } }
    /**
     * Find zero or one BattleWin that matches the filter.
     * @param {BattleWinFindUniqueArgs} args - Arguments to find a BattleWin
     * @example
     * // Get one BattleWin
     * const battleWin = await prisma.battleWin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BattleWinFindUniqueArgs>(args: SelectSubset<T, BattleWinFindUniqueArgs<ExtArgs>>): Prisma__BattleWinClient<$Result.GetResult<Prisma.$BattleWinPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BattleWin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BattleWinFindUniqueOrThrowArgs} args - Arguments to find a BattleWin
     * @example
     * // Get one BattleWin
     * const battleWin = await prisma.battleWin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BattleWinFindUniqueOrThrowArgs>(args: SelectSubset<T, BattleWinFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BattleWinClient<$Result.GetResult<Prisma.$BattleWinPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BattleWin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleWinFindFirstArgs} args - Arguments to find a BattleWin
     * @example
     * // Get one BattleWin
     * const battleWin = await prisma.battleWin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BattleWinFindFirstArgs>(args?: SelectSubset<T, BattleWinFindFirstArgs<ExtArgs>>): Prisma__BattleWinClient<$Result.GetResult<Prisma.$BattleWinPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BattleWin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleWinFindFirstOrThrowArgs} args - Arguments to find a BattleWin
     * @example
     * // Get one BattleWin
     * const battleWin = await prisma.battleWin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BattleWinFindFirstOrThrowArgs>(args?: SelectSubset<T, BattleWinFindFirstOrThrowArgs<ExtArgs>>): Prisma__BattleWinClient<$Result.GetResult<Prisma.$BattleWinPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BattleWins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleWinFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BattleWins
     * const battleWins = await prisma.battleWin.findMany()
     * 
     * // Get first 10 BattleWins
     * const battleWins = await prisma.battleWin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const battleWinWithIdOnly = await prisma.battleWin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BattleWinFindManyArgs>(args?: SelectSubset<T, BattleWinFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattleWinPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BattleWin.
     * @param {BattleWinCreateArgs} args - Arguments to create a BattleWin.
     * @example
     * // Create one BattleWin
     * const BattleWin = await prisma.battleWin.create({
     *   data: {
     *     // ... data to create a BattleWin
     *   }
     * })
     * 
     */
    create<T extends BattleWinCreateArgs>(args: SelectSubset<T, BattleWinCreateArgs<ExtArgs>>): Prisma__BattleWinClient<$Result.GetResult<Prisma.$BattleWinPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BattleWins.
     * @param {BattleWinCreateManyArgs} args - Arguments to create many BattleWins.
     * @example
     * // Create many BattleWins
     * const battleWin = await prisma.battleWin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BattleWinCreateManyArgs>(args?: SelectSubset<T, BattleWinCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BattleWins and returns the data saved in the database.
     * @param {BattleWinCreateManyAndReturnArgs} args - Arguments to create many BattleWins.
     * @example
     * // Create many BattleWins
     * const battleWin = await prisma.battleWin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BattleWins and only return the `id`
     * const battleWinWithIdOnly = await prisma.battleWin.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BattleWinCreateManyAndReturnArgs>(args?: SelectSubset<T, BattleWinCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattleWinPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BattleWin.
     * @param {BattleWinDeleteArgs} args - Arguments to delete one BattleWin.
     * @example
     * // Delete one BattleWin
     * const BattleWin = await prisma.battleWin.delete({
     *   where: {
     *     // ... filter to delete one BattleWin
     *   }
     * })
     * 
     */
    delete<T extends BattleWinDeleteArgs>(args: SelectSubset<T, BattleWinDeleteArgs<ExtArgs>>): Prisma__BattleWinClient<$Result.GetResult<Prisma.$BattleWinPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BattleWin.
     * @param {BattleWinUpdateArgs} args - Arguments to update one BattleWin.
     * @example
     * // Update one BattleWin
     * const battleWin = await prisma.battleWin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BattleWinUpdateArgs>(args: SelectSubset<T, BattleWinUpdateArgs<ExtArgs>>): Prisma__BattleWinClient<$Result.GetResult<Prisma.$BattleWinPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BattleWins.
     * @param {BattleWinDeleteManyArgs} args - Arguments to filter BattleWins to delete.
     * @example
     * // Delete a few BattleWins
     * const { count } = await prisma.battleWin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BattleWinDeleteManyArgs>(args?: SelectSubset<T, BattleWinDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BattleWins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleWinUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BattleWins
     * const battleWin = await prisma.battleWin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BattleWinUpdateManyArgs>(args: SelectSubset<T, BattleWinUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BattleWin.
     * @param {BattleWinUpsertArgs} args - Arguments to update or create a BattleWin.
     * @example
     * // Update or create a BattleWin
     * const battleWin = await prisma.battleWin.upsert({
     *   create: {
     *     // ... data to create a BattleWin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BattleWin we want to update
     *   }
     * })
     */
    upsert<T extends BattleWinUpsertArgs>(args: SelectSubset<T, BattleWinUpsertArgs<ExtArgs>>): Prisma__BattleWinClient<$Result.GetResult<Prisma.$BattleWinPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BattleWins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleWinCountArgs} args - Arguments to filter BattleWins to count.
     * @example
     * // Count the number of BattleWins
     * const count = await prisma.battleWin.count({
     *   where: {
     *     // ... the filter for the BattleWins we want to count
     *   }
     * })
    **/
    count<T extends BattleWinCountArgs>(
      args?: Subset<T, BattleWinCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BattleWinCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BattleWin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleWinAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BattleWinAggregateArgs>(args: Subset<T, BattleWinAggregateArgs>): Prisma.PrismaPromise<GetBattleWinAggregateType<T>>

    /**
     * Group by BattleWin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleWinGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BattleWinGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BattleWinGroupByArgs['orderBy'] }
        : { orderBy?: BattleWinGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BattleWinGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBattleWinGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BattleWin model
   */
  readonly fields: BattleWinFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BattleWin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BattleWinClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    battle<T extends BattleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BattleDefaultArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BattleWin model
   */ 
  interface BattleWinFieldRefs {
    readonly id: FieldRef<"BattleWin", 'String'>
    readonly battleId: FieldRef<"BattleWin", 'String'>
    readonly userId: FieldRef<"BattleWin", 'String'>
    readonly position: FieldRef<"BattleWin", 'Int'>
    readonly prize: FieldRef<"BattleWin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BattleWin findUnique
   */
  export type BattleWinFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleWin
     */
    select?: BattleWinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleWinInclude<ExtArgs> | null
    /**
     * Filter, which BattleWin to fetch.
     */
    where: BattleWinWhereUniqueInput
  }

  /**
   * BattleWin findUniqueOrThrow
   */
  export type BattleWinFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleWin
     */
    select?: BattleWinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleWinInclude<ExtArgs> | null
    /**
     * Filter, which BattleWin to fetch.
     */
    where: BattleWinWhereUniqueInput
  }

  /**
   * BattleWin findFirst
   */
  export type BattleWinFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleWin
     */
    select?: BattleWinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleWinInclude<ExtArgs> | null
    /**
     * Filter, which BattleWin to fetch.
     */
    where?: BattleWinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BattleWins to fetch.
     */
    orderBy?: BattleWinOrderByWithRelationInput | BattleWinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BattleWins.
     */
    cursor?: BattleWinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BattleWins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BattleWins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BattleWins.
     */
    distinct?: BattleWinScalarFieldEnum | BattleWinScalarFieldEnum[]
  }

  /**
   * BattleWin findFirstOrThrow
   */
  export type BattleWinFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleWin
     */
    select?: BattleWinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleWinInclude<ExtArgs> | null
    /**
     * Filter, which BattleWin to fetch.
     */
    where?: BattleWinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BattleWins to fetch.
     */
    orderBy?: BattleWinOrderByWithRelationInput | BattleWinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BattleWins.
     */
    cursor?: BattleWinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BattleWins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BattleWins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BattleWins.
     */
    distinct?: BattleWinScalarFieldEnum | BattleWinScalarFieldEnum[]
  }

  /**
   * BattleWin findMany
   */
  export type BattleWinFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleWin
     */
    select?: BattleWinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleWinInclude<ExtArgs> | null
    /**
     * Filter, which BattleWins to fetch.
     */
    where?: BattleWinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BattleWins to fetch.
     */
    orderBy?: BattleWinOrderByWithRelationInput | BattleWinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BattleWins.
     */
    cursor?: BattleWinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BattleWins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BattleWins.
     */
    skip?: number
    distinct?: BattleWinScalarFieldEnum | BattleWinScalarFieldEnum[]
  }

  /**
   * BattleWin create
   */
  export type BattleWinCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleWin
     */
    select?: BattleWinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleWinInclude<ExtArgs> | null
    /**
     * The data needed to create a BattleWin.
     */
    data: XOR<BattleWinCreateInput, BattleWinUncheckedCreateInput>
  }

  /**
   * BattleWin createMany
   */
  export type BattleWinCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BattleWins.
     */
    data: BattleWinCreateManyInput | BattleWinCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BattleWin createManyAndReturn
   */
  export type BattleWinCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleWin
     */
    select?: BattleWinSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BattleWins.
     */
    data: BattleWinCreateManyInput | BattleWinCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleWinIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BattleWin update
   */
  export type BattleWinUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleWin
     */
    select?: BattleWinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleWinInclude<ExtArgs> | null
    /**
     * The data needed to update a BattleWin.
     */
    data: XOR<BattleWinUpdateInput, BattleWinUncheckedUpdateInput>
    /**
     * Choose, which BattleWin to update.
     */
    where: BattleWinWhereUniqueInput
  }

  /**
   * BattleWin updateMany
   */
  export type BattleWinUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BattleWins.
     */
    data: XOR<BattleWinUpdateManyMutationInput, BattleWinUncheckedUpdateManyInput>
    /**
     * Filter which BattleWins to update
     */
    where?: BattleWinWhereInput
  }

  /**
   * BattleWin upsert
   */
  export type BattleWinUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleWin
     */
    select?: BattleWinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleWinInclude<ExtArgs> | null
    /**
     * The filter to search for the BattleWin to update in case it exists.
     */
    where: BattleWinWhereUniqueInput
    /**
     * In case the BattleWin found by the `where` argument doesn't exist, create a new BattleWin with this data.
     */
    create: XOR<BattleWinCreateInput, BattleWinUncheckedCreateInput>
    /**
     * In case the BattleWin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BattleWinUpdateInput, BattleWinUncheckedUpdateInput>
  }

  /**
   * BattleWin delete
   */
  export type BattleWinDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleWin
     */
    select?: BattleWinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleWinInclude<ExtArgs> | null
    /**
     * Filter which BattleWin to delete.
     */
    where: BattleWinWhereUniqueInput
  }

  /**
   * BattleWin deleteMany
   */
  export type BattleWinDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BattleWins to delete
     */
    where?: BattleWinWhereInput
  }

  /**
   * BattleWin without action
   */
  export type BattleWinDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleWin
     */
    select?: BattleWinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleWinInclude<ExtArgs> | null
  }


  /**
   * Model BattleHistory
   */

  export type AggregateBattleHistory = {
    _count: BattleHistoryCountAggregateOutputType | null
    _avg: BattleHistoryAvgAggregateOutputType | null
    _sum: BattleHistorySumAggregateOutputType | null
    _min: BattleHistoryMinAggregateOutputType | null
    _max: BattleHistoryMaxAggregateOutputType | null
  }

  export type BattleHistoryAvgAggregateOutputType = {
    totalParticipants: number | null
    totalCasts: number | null
  }

  export type BattleHistorySumAggregateOutputType = {
    totalParticipants: number | null
    totalCasts: number | null
  }

  export type BattleHistoryMinAggregateOutputType = {
    id: string | null
    battleId: string | null
    completedAt: Date | null
    totalParticipants: number | null
    totalCasts: number | null
    winnerAddress: string | null
  }

  export type BattleHistoryMaxAggregateOutputType = {
    id: string | null
    battleId: string | null
    completedAt: Date | null
    totalParticipants: number | null
    totalCasts: number | null
    winnerAddress: string | null
  }

  export type BattleHistoryCountAggregateOutputType = {
    id: number
    battleId: number
    completedAt: number
    totalParticipants: number
    totalCasts: number
    winnerAddress: number
    _all: number
  }


  export type BattleHistoryAvgAggregateInputType = {
    totalParticipants?: true
    totalCasts?: true
  }

  export type BattleHistorySumAggregateInputType = {
    totalParticipants?: true
    totalCasts?: true
  }

  export type BattleHistoryMinAggregateInputType = {
    id?: true
    battleId?: true
    completedAt?: true
    totalParticipants?: true
    totalCasts?: true
    winnerAddress?: true
  }

  export type BattleHistoryMaxAggregateInputType = {
    id?: true
    battleId?: true
    completedAt?: true
    totalParticipants?: true
    totalCasts?: true
    winnerAddress?: true
  }

  export type BattleHistoryCountAggregateInputType = {
    id?: true
    battleId?: true
    completedAt?: true
    totalParticipants?: true
    totalCasts?: true
    winnerAddress?: true
    _all?: true
  }

  export type BattleHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BattleHistory to aggregate.
     */
    where?: BattleHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BattleHistories to fetch.
     */
    orderBy?: BattleHistoryOrderByWithRelationInput | BattleHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BattleHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BattleHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BattleHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BattleHistories
    **/
    _count?: true | BattleHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BattleHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BattleHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BattleHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BattleHistoryMaxAggregateInputType
  }

  export type GetBattleHistoryAggregateType<T extends BattleHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateBattleHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBattleHistory[P]>
      : GetScalarType<T[P], AggregateBattleHistory[P]>
  }




  export type BattleHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BattleHistoryWhereInput
    orderBy?: BattleHistoryOrderByWithAggregationInput | BattleHistoryOrderByWithAggregationInput[]
    by: BattleHistoryScalarFieldEnum[] | BattleHistoryScalarFieldEnum
    having?: BattleHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BattleHistoryCountAggregateInputType | true
    _avg?: BattleHistoryAvgAggregateInputType
    _sum?: BattleHistorySumAggregateInputType
    _min?: BattleHistoryMinAggregateInputType
    _max?: BattleHistoryMaxAggregateInputType
  }

  export type BattleHistoryGroupByOutputType = {
    id: string
    battleId: string
    completedAt: Date
    totalParticipants: number
    totalCasts: number
    winnerAddress: string | null
    _count: BattleHistoryCountAggregateOutputType | null
    _avg: BattleHistoryAvgAggregateOutputType | null
    _sum: BattleHistorySumAggregateOutputType | null
    _min: BattleHistoryMinAggregateOutputType | null
    _max: BattleHistoryMaxAggregateOutputType | null
  }

  type GetBattleHistoryGroupByPayload<T extends BattleHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BattleHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BattleHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BattleHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], BattleHistoryGroupByOutputType[P]>
        }
      >
    >


  export type BattleHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    battleId?: boolean
    completedAt?: boolean
    totalParticipants?: boolean
    totalCasts?: boolean
    winnerAddress?: boolean
    battle?: boolean | BattleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["battleHistory"]>

  export type BattleHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    battleId?: boolean
    completedAt?: boolean
    totalParticipants?: boolean
    totalCasts?: boolean
    winnerAddress?: boolean
    battle?: boolean | BattleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["battleHistory"]>

  export type BattleHistorySelectScalar = {
    id?: boolean
    battleId?: boolean
    completedAt?: boolean
    totalParticipants?: boolean
    totalCasts?: boolean
    winnerAddress?: boolean
  }

  export type BattleHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    battle?: boolean | BattleDefaultArgs<ExtArgs>
  }
  export type BattleHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    battle?: boolean | BattleDefaultArgs<ExtArgs>
  }

  export type $BattleHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BattleHistory"
    objects: {
      battle: Prisma.$BattlePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      battleId: string
      completedAt: Date
      totalParticipants: number
      totalCasts: number
      winnerAddress: string | null
    }, ExtArgs["result"]["battleHistory"]>
    composites: {}
  }

  type BattleHistoryGetPayload<S extends boolean | null | undefined | BattleHistoryDefaultArgs> = $Result.GetResult<Prisma.$BattleHistoryPayload, S>

  type BattleHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BattleHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BattleHistoryCountAggregateInputType | true
    }

  export interface BattleHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BattleHistory'], meta: { name: 'BattleHistory' } }
    /**
     * Find zero or one BattleHistory that matches the filter.
     * @param {BattleHistoryFindUniqueArgs} args - Arguments to find a BattleHistory
     * @example
     * // Get one BattleHistory
     * const battleHistory = await prisma.battleHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BattleHistoryFindUniqueArgs>(args: SelectSubset<T, BattleHistoryFindUniqueArgs<ExtArgs>>): Prisma__BattleHistoryClient<$Result.GetResult<Prisma.$BattleHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BattleHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BattleHistoryFindUniqueOrThrowArgs} args - Arguments to find a BattleHistory
     * @example
     * // Get one BattleHistory
     * const battleHistory = await prisma.battleHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BattleHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, BattleHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BattleHistoryClient<$Result.GetResult<Prisma.$BattleHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BattleHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleHistoryFindFirstArgs} args - Arguments to find a BattleHistory
     * @example
     * // Get one BattleHistory
     * const battleHistory = await prisma.battleHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BattleHistoryFindFirstArgs>(args?: SelectSubset<T, BattleHistoryFindFirstArgs<ExtArgs>>): Prisma__BattleHistoryClient<$Result.GetResult<Prisma.$BattleHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BattleHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleHistoryFindFirstOrThrowArgs} args - Arguments to find a BattleHistory
     * @example
     * // Get one BattleHistory
     * const battleHistory = await prisma.battleHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BattleHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, BattleHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__BattleHistoryClient<$Result.GetResult<Prisma.$BattleHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BattleHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BattleHistories
     * const battleHistories = await prisma.battleHistory.findMany()
     * 
     * // Get first 10 BattleHistories
     * const battleHistories = await prisma.battleHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const battleHistoryWithIdOnly = await prisma.battleHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BattleHistoryFindManyArgs>(args?: SelectSubset<T, BattleHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattleHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BattleHistory.
     * @param {BattleHistoryCreateArgs} args - Arguments to create a BattleHistory.
     * @example
     * // Create one BattleHistory
     * const BattleHistory = await prisma.battleHistory.create({
     *   data: {
     *     // ... data to create a BattleHistory
     *   }
     * })
     * 
     */
    create<T extends BattleHistoryCreateArgs>(args: SelectSubset<T, BattleHistoryCreateArgs<ExtArgs>>): Prisma__BattleHistoryClient<$Result.GetResult<Prisma.$BattleHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BattleHistories.
     * @param {BattleHistoryCreateManyArgs} args - Arguments to create many BattleHistories.
     * @example
     * // Create many BattleHistories
     * const battleHistory = await prisma.battleHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BattleHistoryCreateManyArgs>(args?: SelectSubset<T, BattleHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BattleHistories and returns the data saved in the database.
     * @param {BattleHistoryCreateManyAndReturnArgs} args - Arguments to create many BattleHistories.
     * @example
     * // Create many BattleHistories
     * const battleHistory = await prisma.battleHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BattleHistories and only return the `id`
     * const battleHistoryWithIdOnly = await prisma.battleHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BattleHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, BattleHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BattleHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BattleHistory.
     * @param {BattleHistoryDeleteArgs} args - Arguments to delete one BattleHistory.
     * @example
     * // Delete one BattleHistory
     * const BattleHistory = await prisma.battleHistory.delete({
     *   where: {
     *     // ... filter to delete one BattleHistory
     *   }
     * })
     * 
     */
    delete<T extends BattleHistoryDeleteArgs>(args: SelectSubset<T, BattleHistoryDeleteArgs<ExtArgs>>): Prisma__BattleHistoryClient<$Result.GetResult<Prisma.$BattleHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BattleHistory.
     * @param {BattleHistoryUpdateArgs} args - Arguments to update one BattleHistory.
     * @example
     * // Update one BattleHistory
     * const battleHistory = await prisma.battleHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BattleHistoryUpdateArgs>(args: SelectSubset<T, BattleHistoryUpdateArgs<ExtArgs>>): Prisma__BattleHistoryClient<$Result.GetResult<Prisma.$BattleHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BattleHistories.
     * @param {BattleHistoryDeleteManyArgs} args - Arguments to filter BattleHistories to delete.
     * @example
     * // Delete a few BattleHistories
     * const { count } = await prisma.battleHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BattleHistoryDeleteManyArgs>(args?: SelectSubset<T, BattleHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BattleHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BattleHistories
     * const battleHistory = await prisma.battleHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BattleHistoryUpdateManyArgs>(args: SelectSubset<T, BattleHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BattleHistory.
     * @param {BattleHistoryUpsertArgs} args - Arguments to update or create a BattleHistory.
     * @example
     * // Update or create a BattleHistory
     * const battleHistory = await prisma.battleHistory.upsert({
     *   create: {
     *     // ... data to create a BattleHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BattleHistory we want to update
     *   }
     * })
     */
    upsert<T extends BattleHistoryUpsertArgs>(args: SelectSubset<T, BattleHistoryUpsertArgs<ExtArgs>>): Prisma__BattleHistoryClient<$Result.GetResult<Prisma.$BattleHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BattleHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleHistoryCountArgs} args - Arguments to filter BattleHistories to count.
     * @example
     * // Count the number of BattleHistories
     * const count = await prisma.battleHistory.count({
     *   where: {
     *     // ... the filter for the BattleHistories we want to count
     *   }
     * })
    **/
    count<T extends BattleHistoryCountArgs>(
      args?: Subset<T, BattleHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BattleHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BattleHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BattleHistoryAggregateArgs>(args: Subset<T, BattleHistoryAggregateArgs>): Prisma.PrismaPromise<GetBattleHistoryAggregateType<T>>

    /**
     * Group by BattleHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BattleHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BattleHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BattleHistoryGroupByArgs['orderBy'] }
        : { orderBy?: BattleHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BattleHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBattleHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BattleHistory model
   */
  readonly fields: BattleHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BattleHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BattleHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    battle<T extends BattleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BattleDefaultArgs<ExtArgs>>): Prisma__BattleClient<$Result.GetResult<Prisma.$BattlePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BattleHistory model
   */ 
  interface BattleHistoryFieldRefs {
    readonly id: FieldRef<"BattleHistory", 'String'>
    readonly battleId: FieldRef<"BattleHistory", 'String'>
    readonly completedAt: FieldRef<"BattleHistory", 'DateTime'>
    readonly totalParticipants: FieldRef<"BattleHistory", 'Int'>
    readonly totalCasts: FieldRef<"BattleHistory", 'Int'>
    readonly winnerAddress: FieldRef<"BattleHistory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BattleHistory findUnique
   */
  export type BattleHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleHistory
     */
    select?: BattleHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleHistoryInclude<ExtArgs> | null
    /**
     * Filter, which BattleHistory to fetch.
     */
    where: BattleHistoryWhereUniqueInput
  }

  /**
   * BattleHistory findUniqueOrThrow
   */
  export type BattleHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleHistory
     */
    select?: BattleHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleHistoryInclude<ExtArgs> | null
    /**
     * Filter, which BattleHistory to fetch.
     */
    where: BattleHistoryWhereUniqueInput
  }

  /**
   * BattleHistory findFirst
   */
  export type BattleHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleHistory
     */
    select?: BattleHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleHistoryInclude<ExtArgs> | null
    /**
     * Filter, which BattleHistory to fetch.
     */
    where?: BattleHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BattleHistories to fetch.
     */
    orderBy?: BattleHistoryOrderByWithRelationInput | BattleHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BattleHistories.
     */
    cursor?: BattleHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BattleHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BattleHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BattleHistories.
     */
    distinct?: BattleHistoryScalarFieldEnum | BattleHistoryScalarFieldEnum[]
  }

  /**
   * BattleHistory findFirstOrThrow
   */
  export type BattleHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleHistory
     */
    select?: BattleHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleHistoryInclude<ExtArgs> | null
    /**
     * Filter, which BattleHistory to fetch.
     */
    where?: BattleHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BattleHistories to fetch.
     */
    orderBy?: BattleHistoryOrderByWithRelationInput | BattleHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BattleHistories.
     */
    cursor?: BattleHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BattleHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BattleHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BattleHistories.
     */
    distinct?: BattleHistoryScalarFieldEnum | BattleHistoryScalarFieldEnum[]
  }

  /**
   * BattleHistory findMany
   */
  export type BattleHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleHistory
     */
    select?: BattleHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleHistoryInclude<ExtArgs> | null
    /**
     * Filter, which BattleHistories to fetch.
     */
    where?: BattleHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BattleHistories to fetch.
     */
    orderBy?: BattleHistoryOrderByWithRelationInput | BattleHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BattleHistories.
     */
    cursor?: BattleHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BattleHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BattleHistories.
     */
    skip?: number
    distinct?: BattleHistoryScalarFieldEnum | BattleHistoryScalarFieldEnum[]
  }

  /**
   * BattleHistory create
   */
  export type BattleHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleHistory
     */
    select?: BattleHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a BattleHistory.
     */
    data: XOR<BattleHistoryCreateInput, BattleHistoryUncheckedCreateInput>
  }

  /**
   * BattleHistory createMany
   */
  export type BattleHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BattleHistories.
     */
    data: BattleHistoryCreateManyInput | BattleHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BattleHistory createManyAndReturn
   */
  export type BattleHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleHistory
     */
    select?: BattleHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BattleHistories.
     */
    data: BattleHistoryCreateManyInput | BattleHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BattleHistory update
   */
  export type BattleHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleHistory
     */
    select?: BattleHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a BattleHistory.
     */
    data: XOR<BattleHistoryUpdateInput, BattleHistoryUncheckedUpdateInput>
    /**
     * Choose, which BattleHistory to update.
     */
    where: BattleHistoryWhereUniqueInput
  }

  /**
   * BattleHistory updateMany
   */
  export type BattleHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BattleHistories.
     */
    data: XOR<BattleHistoryUpdateManyMutationInput, BattleHistoryUncheckedUpdateManyInput>
    /**
     * Filter which BattleHistories to update
     */
    where?: BattleHistoryWhereInput
  }

  /**
   * BattleHistory upsert
   */
  export type BattleHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleHistory
     */
    select?: BattleHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the BattleHistory to update in case it exists.
     */
    where: BattleHistoryWhereUniqueInput
    /**
     * In case the BattleHistory found by the `where` argument doesn't exist, create a new BattleHistory with this data.
     */
    create: XOR<BattleHistoryCreateInput, BattleHistoryUncheckedCreateInput>
    /**
     * In case the BattleHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BattleHistoryUpdateInput, BattleHistoryUncheckedUpdateInput>
  }

  /**
   * BattleHistory delete
   */
  export type BattleHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleHistory
     */
    select?: BattleHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleHistoryInclude<ExtArgs> | null
    /**
     * Filter which BattleHistory to delete.
     */
    where: BattleHistoryWhereUniqueInput
  }

  /**
   * BattleHistory deleteMany
   */
  export type BattleHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BattleHistories to delete
     */
    where?: BattleHistoryWhereInput
  }

  /**
   * BattleHistory without action
   */
  export type BattleHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BattleHistory
     */
    select?: BattleHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BattleHistoryInclude<ExtArgs> | null
  }


  /**
   * Model SystemConfig
   */

  export type AggregateSystemConfig = {
    _count: SystemConfigCountAggregateOutputType | null
    _min: SystemConfigMinAggregateOutputType | null
    _max: SystemConfigMaxAggregateOutputType | null
  }

  export type SystemConfigMinAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
  }

  export type SystemConfigMaxAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
  }

  export type SystemConfigCountAggregateOutputType = {
    id: number
    key: number
    value: number
    _all: number
  }


  export type SystemConfigMinAggregateInputType = {
    id?: true
    key?: true
    value?: true
  }

  export type SystemConfigMaxAggregateInputType = {
    id?: true
    key?: true
    value?: true
  }

  export type SystemConfigCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    _all?: true
  }

  export type SystemConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemConfig to aggregate.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemConfigs
    **/
    _count?: true | SystemConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemConfigMaxAggregateInputType
  }

  export type GetSystemConfigAggregateType<T extends SystemConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemConfig[P]>
      : GetScalarType<T[P], AggregateSystemConfig[P]>
  }




  export type SystemConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemConfigWhereInput
    orderBy?: SystemConfigOrderByWithAggregationInput | SystemConfigOrderByWithAggregationInput[]
    by: SystemConfigScalarFieldEnum[] | SystemConfigScalarFieldEnum
    having?: SystemConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemConfigCountAggregateInputType | true
    _min?: SystemConfigMinAggregateInputType
    _max?: SystemConfigMaxAggregateInputType
  }

  export type SystemConfigGroupByOutputType = {
    id: string
    key: string
    value: string
    _count: SystemConfigCountAggregateOutputType | null
    _min: SystemConfigMinAggregateOutputType | null
    _max: SystemConfigMaxAggregateOutputType | null
  }

  type GetSystemConfigGroupByPayload<T extends SystemConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemConfigGroupByOutputType[P]>
            : GetScalarType<T[P], SystemConfigGroupByOutputType[P]>
        }
      >
    >


  export type SystemConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
  }, ExtArgs["result"]["systemConfig"]>

  export type SystemConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
  }, ExtArgs["result"]["systemConfig"]>

  export type SystemConfigSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
  }


  export type $SystemConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      value: string
    }, ExtArgs["result"]["systemConfig"]>
    composites: {}
  }

  type SystemConfigGetPayload<S extends boolean | null | undefined | SystemConfigDefaultArgs> = $Result.GetResult<Prisma.$SystemConfigPayload, S>

  type SystemConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SystemConfigFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SystemConfigCountAggregateInputType | true
    }

  export interface SystemConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemConfig'], meta: { name: 'SystemConfig' } }
    /**
     * Find zero or one SystemConfig that matches the filter.
     * @param {SystemConfigFindUniqueArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemConfigFindUniqueArgs>(args: SelectSubset<T, SystemConfigFindUniqueArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SystemConfig that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SystemConfigFindUniqueOrThrowArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SystemConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindFirstArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemConfigFindFirstArgs>(args?: SelectSubset<T, SystemConfigFindFirstArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SystemConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindFirstOrThrowArgs} args - Arguments to find a SystemConfig
     * @example
     * // Get one SystemConfig
     * const systemConfig = await prisma.systemConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SystemConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemConfigs
     * const systemConfigs = await prisma.systemConfig.findMany()
     * 
     * // Get first 10 SystemConfigs
     * const systemConfigs = await prisma.systemConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemConfigFindManyArgs>(args?: SelectSubset<T, SystemConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SystemConfig.
     * @param {SystemConfigCreateArgs} args - Arguments to create a SystemConfig.
     * @example
     * // Create one SystemConfig
     * const SystemConfig = await prisma.systemConfig.create({
     *   data: {
     *     // ... data to create a SystemConfig
     *   }
     * })
     * 
     */
    create<T extends SystemConfigCreateArgs>(args: SelectSubset<T, SystemConfigCreateArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SystemConfigs.
     * @param {SystemConfigCreateManyArgs} args - Arguments to create many SystemConfigs.
     * @example
     * // Create many SystemConfigs
     * const systemConfig = await prisma.systemConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemConfigCreateManyArgs>(args?: SelectSubset<T, SystemConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemConfigs and returns the data saved in the database.
     * @param {SystemConfigCreateManyAndReturnArgs} args - Arguments to create many SystemConfigs.
     * @example
     * // Create many SystemConfigs
     * const systemConfig = await prisma.systemConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemConfigs and only return the `id`
     * const systemConfigWithIdOnly = await prisma.systemConfig.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SystemConfig.
     * @param {SystemConfigDeleteArgs} args - Arguments to delete one SystemConfig.
     * @example
     * // Delete one SystemConfig
     * const SystemConfig = await prisma.systemConfig.delete({
     *   where: {
     *     // ... filter to delete one SystemConfig
     *   }
     * })
     * 
     */
    delete<T extends SystemConfigDeleteArgs>(args: SelectSubset<T, SystemConfigDeleteArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SystemConfig.
     * @param {SystemConfigUpdateArgs} args - Arguments to update one SystemConfig.
     * @example
     * // Update one SystemConfig
     * const systemConfig = await prisma.systemConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemConfigUpdateArgs>(args: SelectSubset<T, SystemConfigUpdateArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SystemConfigs.
     * @param {SystemConfigDeleteManyArgs} args - Arguments to filter SystemConfigs to delete.
     * @example
     * // Delete a few SystemConfigs
     * const { count } = await prisma.systemConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemConfigDeleteManyArgs>(args?: SelectSubset<T, SystemConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemConfigs
     * const systemConfig = await prisma.systemConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemConfigUpdateManyArgs>(args: SelectSubset<T, SystemConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SystemConfig.
     * @param {SystemConfigUpsertArgs} args - Arguments to update or create a SystemConfig.
     * @example
     * // Update or create a SystemConfig
     * const systemConfig = await prisma.systemConfig.upsert({
     *   create: {
     *     // ... data to create a SystemConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemConfig we want to update
     *   }
     * })
     */
    upsert<T extends SystemConfigUpsertArgs>(args: SelectSubset<T, SystemConfigUpsertArgs<ExtArgs>>): Prisma__SystemConfigClient<$Result.GetResult<Prisma.$SystemConfigPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SystemConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigCountArgs} args - Arguments to filter SystemConfigs to count.
     * @example
     * // Count the number of SystemConfigs
     * const count = await prisma.systemConfig.count({
     *   where: {
     *     // ... the filter for the SystemConfigs we want to count
     *   }
     * })
    **/
    count<T extends SystemConfigCountArgs>(
      args?: Subset<T, SystemConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemConfigAggregateArgs>(args: Subset<T, SystemConfigAggregateArgs>): Prisma.PrismaPromise<GetSystemConfigAggregateType<T>>

    /**
     * Group by SystemConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemConfigGroupByArgs['orderBy'] }
        : { orderBy?: SystemConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemConfig model
   */
  readonly fields: SystemConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemConfig model
   */ 
  interface SystemConfigFieldRefs {
    readonly id: FieldRef<"SystemConfig", 'String'>
    readonly key: FieldRef<"SystemConfig", 'String'>
    readonly value: FieldRef<"SystemConfig", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SystemConfig findUnique
   */
  export type SystemConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig findUniqueOrThrow
   */
  export type SystemConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig findFirst
   */
  export type SystemConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemConfigs.
     */
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig findFirstOrThrow
   */
  export type SystemConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfig to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemConfigs.
     */
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig findMany
   */
  export type SystemConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter, which SystemConfigs to fetch.
     */
    where?: SystemConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemConfigs to fetch.
     */
    orderBy?: SystemConfigOrderByWithRelationInput | SystemConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemConfigs.
     */
    cursor?: SystemConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemConfigs.
     */
    skip?: number
    distinct?: SystemConfigScalarFieldEnum | SystemConfigScalarFieldEnum[]
  }

  /**
   * SystemConfig create
   */
  export type SystemConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * The data needed to create a SystemConfig.
     */
    data: XOR<SystemConfigCreateInput, SystemConfigUncheckedCreateInput>
  }

  /**
   * SystemConfig createMany
   */
  export type SystemConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemConfigs.
     */
    data: SystemConfigCreateManyInput | SystemConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemConfig createManyAndReturn
   */
  export type SystemConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SystemConfigs.
     */
    data: SystemConfigCreateManyInput | SystemConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemConfig update
   */
  export type SystemConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * The data needed to update a SystemConfig.
     */
    data: XOR<SystemConfigUpdateInput, SystemConfigUncheckedUpdateInput>
    /**
     * Choose, which SystemConfig to update.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig updateMany
   */
  export type SystemConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemConfigs.
     */
    data: XOR<SystemConfigUpdateManyMutationInput, SystemConfigUncheckedUpdateManyInput>
    /**
     * Filter which SystemConfigs to update
     */
    where?: SystemConfigWhereInput
  }

  /**
   * SystemConfig upsert
   */
  export type SystemConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * The filter to search for the SystemConfig to update in case it exists.
     */
    where: SystemConfigWhereUniqueInput
    /**
     * In case the SystemConfig found by the `where` argument doesn't exist, create a new SystemConfig with this data.
     */
    create: XOR<SystemConfigCreateInput, SystemConfigUncheckedCreateInput>
    /**
     * In case the SystemConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemConfigUpdateInput, SystemConfigUncheckedUpdateInput>
  }

  /**
   * SystemConfig delete
   */
  export type SystemConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
    /**
     * Filter which SystemConfig to delete.
     */
    where: SystemConfigWhereUniqueInput
  }

  /**
   * SystemConfig deleteMany
   */
  export type SystemConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemConfigs to delete
     */
    where?: SystemConfigWhereInput
  }

  /**
   * SystemConfig without action
   */
  export type SystemConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemConfig
     */
    select?: SystemConfigSelect<ExtArgs> | null
  }


  /**
   * Model SharedState
   */

  export type AggregateSharedState = {
    _count: SharedStateCountAggregateOutputType | null
    _min: SharedStateMinAggregateOutputType | null
    _max: SharedStateMaxAggregateOutputType | null
  }

  export type SharedStateMinAggregateOutputType = {
    id: string | null
    key: string | null
    rateLimitCooldown: Date | null
    lastUpdated: Date | null
    createdAt: Date | null
  }

  export type SharedStateMaxAggregateOutputType = {
    id: string | null
    key: string | null
    rateLimitCooldown: Date | null
    lastUpdated: Date | null
    createdAt: Date | null
  }

  export type SharedStateCountAggregateOutputType = {
    id: number
    key: number
    rateLimitCooldown: number
    lastUpdated: number
    createdAt: number
    _all: number
  }


  export type SharedStateMinAggregateInputType = {
    id?: true
    key?: true
    rateLimitCooldown?: true
    lastUpdated?: true
    createdAt?: true
  }

  export type SharedStateMaxAggregateInputType = {
    id?: true
    key?: true
    rateLimitCooldown?: true
    lastUpdated?: true
    createdAt?: true
  }

  export type SharedStateCountAggregateInputType = {
    id?: true
    key?: true
    rateLimitCooldown?: true
    lastUpdated?: true
    createdAt?: true
    _all?: true
  }

  export type SharedStateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SharedState to aggregate.
     */
    where?: SharedStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SharedStates to fetch.
     */
    orderBy?: SharedStateOrderByWithRelationInput | SharedStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SharedStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SharedStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SharedStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SharedStates
    **/
    _count?: true | SharedStateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SharedStateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SharedStateMaxAggregateInputType
  }

  export type GetSharedStateAggregateType<T extends SharedStateAggregateArgs> = {
        [P in keyof T & keyof AggregateSharedState]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSharedState[P]>
      : GetScalarType<T[P], AggregateSharedState[P]>
  }




  export type SharedStateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SharedStateWhereInput
    orderBy?: SharedStateOrderByWithAggregationInput | SharedStateOrderByWithAggregationInput[]
    by: SharedStateScalarFieldEnum[] | SharedStateScalarFieldEnum
    having?: SharedStateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SharedStateCountAggregateInputType | true
    _min?: SharedStateMinAggregateInputType
    _max?: SharedStateMaxAggregateInputType
  }

  export type SharedStateGroupByOutputType = {
    id: string
    key: string
    rateLimitCooldown: Date | null
    lastUpdated: Date
    createdAt: Date
    _count: SharedStateCountAggregateOutputType | null
    _min: SharedStateMinAggregateOutputType | null
    _max: SharedStateMaxAggregateOutputType | null
  }

  type GetSharedStateGroupByPayload<T extends SharedStateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SharedStateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SharedStateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SharedStateGroupByOutputType[P]>
            : GetScalarType<T[P], SharedStateGroupByOutputType[P]>
        }
      >
    >


  export type SharedStateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    rateLimitCooldown?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["sharedState"]>

  export type SharedStateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    rateLimitCooldown?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["sharedState"]>

  export type SharedStateSelectScalar = {
    id?: boolean
    key?: boolean
    rateLimitCooldown?: boolean
    lastUpdated?: boolean
    createdAt?: boolean
  }


  export type $SharedStatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SharedState"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      rateLimitCooldown: Date | null
      lastUpdated: Date
      createdAt: Date
    }, ExtArgs["result"]["sharedState"]>
    composites: {}
  }

  type SharedStateGetPayload<S extends boolean | null | undefined | SharedStateDefaultArgs> = $Result.GetResult<Prisma.$SharedStatePayload, S>

  type SharedStateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SharedStateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SharedStateCountAggregateInputType | true
    }

  export interface SharedStateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SharedState'], meta: { name: 'SharedState' } }
    /**
     * Find zero or one SharedState that matches the filter.
     * @param {SharedStateFindUniqueArgs} args - Arguments to find a SharedState
     * @example
     * // Get one SharedState
     * const sharedState = await prisma.sharedState.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SharedStateFindUniqueArgs>(args: SelectSubset<T, SharedStateFindUniqueArgs<ExtArgs>>): Prisma__SharedStateClient<$Result.GetResult<Prisma.$SharedStatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SharedState that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SharedStateFindUniqueOrThrowArgs} args - Arguments to find a SharedState
     * @example
     * // Get one SharedState
     * const sharedState = await prisma.sharedState.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SharedStateFindUniqueOrThrowArgs>(args: SelectSubset<T, SharedStateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SharedStateClient<$Result.GetResult<Prisma.$SharedStatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SharedState that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedStateFindFirstArgs} args - Arguments to find a SharedState
     * @example
     * // Get one SharedState
     * const sharedState = await prisma.sharedState.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SharedStateFindFirstArgs>(args?: SelectSubset<T, SharedStateFindFirstArgs<ExtArgs>>): Prisma__SharedStateClient<$Result.GetResult<Prisma.$SharedStatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SharedState that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedStateFindFirstOrThrowArgs} args - Arguments to find a SharedState
     * @example
     * // Get one SharedState
     * const sharedState = await prisma.sharedState.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SharedStateFindFirstOrThrowArgs>(args?: SelectSubset<T, SharedStateFindFirstOrThrowArgs<ExtArgs>>): Prisma__SharedStateClient<$Result.GetResult<Prisma.$SharedStatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SharedStates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedStateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SharedStates
     * const sharedStates = await prisma.sharedState.findMany()
     * 
     * // Get first 10 SharedStates
     * const sharedStates = await prisma.sharedState.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sharedStateWithIdOnly = await prisma.sharedState.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SharedStateFindManyArgs>(args?: SelectSubset<T, SharedStateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharedStatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SharedState.
     * @param {SharedStateCreateArgs} args - Arguments to create a SharedState.
     * @example
     * // Create one SharedState
     * const SharedState = await prisma.sharedState.create({
     *   data: {
     *     // ... data to create a SharedState
     *   }
     * })
     * 
     */
    create<T extends SharedStateCreateArgs>(args: SelectSubset<T, SharedStateCreateArgs<ExtArgs>>): Prisma__SharedStateClient<$Result.GetResult<Prisma.$SharedStatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SharedStates.
     * @param {SharedStateCreateManyArgs} args - Arguments to create many SharedStates.
     * @example
     * // Create many SharedStates
     * const sharedState = await prisma.sharedState.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SharedStateCreateManyArgs>(args?: SelectSubset<T, SharedStateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SharedStates and returns the data saved in the database.
     * @param {SharedStateCreateManyAndReturnArgs} args - Arguments to create many SharedStates.
     * @example
     * // Create many SharedStates
     * const sharedState = await prisma.sharedState.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SharedStates and only return the `id`
     * const sharedStateWithIdOnly = await prisma.sharedState.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SharedStateCreateManyAndReturnArgs>(args?: SelectSubset<T, SharedStateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharedStatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SharedState.
     * @param {SharedStateDeleteArgs} args - Arguments to delete one SharedState.
     * @example
     * // Delete one SharedState
     * const SharedState = await prisma.sharedState.delete({
     *   where: {
     *     // ... filter to delete one SharedState
     *   }
     * })
     * 
     */
    delete<T extends SharedStateDeleteArgs>(args: SelectSubset<T, SharedStateDeleteArgs<ExtArgs>>): Prisma__SharedStateClient<$Result.GetResult<Prisma.$SharedStatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SharedState.
     * @param {SharedStateUpdateArgs} args - Arguments to update one SharedState.
     * @example
     * // Update one SharedState
     * const sharedState = await prisma.sharedState.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SharedStateUpdateArgs>(args: SelectSubset<T, SharedStateUpdateArgs<ExtArgs>>): Prisma__SharedStateClient<$Result.GetResult<Prisma.$SharedStatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SharedStates.
     * @param {SharedStateDeleteManyArgs} args - Arguments to filter SharedStates to delete.
     * @example
     * // Delete a few SharedStates
     * const { count } = await prisma.sharedState.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SharedStateDeleteManyArgs>(args?: SelectSubset<T, SharedStateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SharedStates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedStateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SharedStates
     * const sharedState = await prisma.sharedState.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SharedStateUpdateManyArgs>(args: SelectSubset<T, SharedStateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SharedState.
     * @param {SharedStateUpsertArgs} args - Arguments to update or create a SharedState.
     * @example
     * // Update or create a SharedState
     * const sharedState = await prisma.sharedState.upsert({
     *   create: {
     *     // ... data to create a SharedState
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SharedState we want to update
     *   }
     * })
     */
    upsert<T extends SharedStateUpsertArgs>(args: SelectSubset<T, SharedStateUpsertArgs<ExtArgs>>): Prisma__SharedStateClient<$Result.GetResult<Prisma.$SharedStatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SharedStates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedStateCountArgs} args - Arguments to filter SharedStates to count.
     * @example
     * // Count the number of SharedStates
     * const count = await prisma.sharedState.count({
     *   where: {
     *     // ... the filter for the SharedStates we want to count
     *   }
     * })
    **/
    count<T extends SharedStateCountArgs>(
      args?: Subset<T, SharedStateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SharedStateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SharedState.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedStateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SharedStateAggregateArgs>(args: Subset<T, SharedStateAggregateArgs>): Prisma.PrismaPromise<GetSharedStateAggregateType<T>>

    /**
     * Group by SharedState.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SharedStateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SharedStateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SharedStateGroupByArgs['orderBy'] }
        : { orderBy?: SharedStateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SharedStateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSharedStateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SharedState model
   */
  readonly fields: SharedStateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SharedState.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SharedStateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SharedState model
   */ 
  interface SharedStateFieldRefs {
    readonly id: FieldRef<"SharedState", 'String'>
    readonly key: FieldRef<"SharedState", 'String'>
    readonly rateLimitCooldown: FieldRef<"SharedState", 'DateTime'>
    readonly lastUpdated: FieldRef<"SharedState", 'DateTime'>
    readonly createdAt: FieldRef<"SharedState", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SharedState findUnique
   */
  export type SharedStateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedState
     */
    select?: SharedStateSelect<ExtArgs> | null
    /**
     * Filter, which SharedState to fetch.
     */
    where: SharedStateWhereUniqueInput
  }

  /**
   * SharedState findUniqueOrThrow
   */
  export type SharedStateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedState
     */
    select?: SharedStateSelect<ExtArgs> | null
    /**
     * Filter, which SharedState to fetch.
     */
    where: SharedStateWhereUniqueInput
  }

  /**
   * SharedState findFirst
   */
  export type SharedStateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedState
     */
    select?: SharedStateSelect<ExtArgs> | null
    /**
     * Filter, which SharedState to fetch.
     */
    where?: SharedStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SharedStates to fetch.
     */
    orderBy?: SharedStateOrderByWithRelationInput | SharedStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SharedStates.
     */
    cursor?: SharedStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SharedStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SharedStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SharedStates.
     */
    distinct?: SharedStateScalarFieldEnum | SharedStateScalarFieldEnum[]
  }

  /**
   * SharedState findFirstOrThrow
   */
  export type SharedStateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedState
     */
    select?: SharedStateSelect<ExtArgs> | null
    /**
     * Filter, which SharedState to fetch.
     */
    where?: SharedStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SharedStates to fetch.
     */
    orderBy?: SharedStateOrderByWithRelationInput | SharedStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SharedStates.
     */
    cursor?: SharedStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SharedStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SharedStates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SharedStates.
     */
    distinct?: SharedStateScalarFieldEnum | SharedStateScalarFieldEnum[]
  }

  /**
   * SharedState findMany
   */
  export type SharedStateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedState
     */
    select?: SharedStateSelect<ExtArgs> | null
    /**
     * Filter, which SharedStates to fetch.
     */
    where?: SharedStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SharedStates to fetch.
     */
    orderBy?: SharedStateOrderByWithRelationInput | SharedStateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SharedStates.
     */
    cursor?: SharedStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SharedStates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SharedStates.
     */
    skip?: number
    distinct?: SharedStateScalarFieldEnum | SharedStateScalarFieldEnum[]
  }

  /**
   * SharedState create
   */
  export type SharedStateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedState
     */
    select?: SharedStateSelect<ExtArgs> | null
    /**
     * The data needed to create a SharedState.
     */
    data: XOR<SharedStateCreateInput, SharedStateUncheckedCreateInput>
  }

  /**
   * SharedState createMany
   */
  export type SharedStateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SharedStates.
     */
    data: SharedStateCreateManyInput | SharedStateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SharedState createManyAndReturn
   */
  export type SharedStateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedState
     */
    select?: SharedStateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SharedStates.
     */
    data: SharedStateCreateManyInput | SharedStateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SharedState update
   */
  export type SharedStateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedState
     */
    select?: SharedStateSelect<ExtArgs> | null
    /**
     * The data needed to update a SharedState.
     */
    data: XOR<SharedStateUpdateInput, SharedStateUncheckedUpdateInput>
    /**
     * Choose, which SharedState to update.
     */
    where: SharedStateWhereUniqueInput
  }

  /**
   * SharedState updateMany
   */
  export type SharedStateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SharedStates.
     */
    data: XOR<SharedStateUpdateManyMutationInput, SharedStateUncheckedUpdateManyInput>
    /**
     * Filter which SharedStates to update
     */
    where?: SharedStateWhereInput
  }

  /**
   * SharedState upsert
   */
  export type SharedStateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedState
     */
    select?: SharedStateSelect<ExtArgs> | null
    /**
     * The filter to search for the SharedState to update in case it exists.
     */
    where: SharedStateWhereUniqueInput
    /**
     * In case the SharedState found by the `where` argument doesn't exist, create a new SharedState with this data.
     */
    create: XOR<SharedStateCreateInput, SharedStateUncheckedCreateInput>
    /**
     * In case the SharedState was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SharedStateUpdateInput, SharedStateUncheckedUpdateInput>
  }

  /**
   * SharedState delete
   */
  export type SharedStateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedState
     */
    select?: SharedStateSelect<ExtArgs> | null
    /**
     * Filter which SharedState to delete.
     */
    where: SharedStateWhereUniqueInput
  }

  /**
   * SharedState deleteMany
   */
  export type SharedStateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SharedStates to delete
     */
    where?: SharedStateWhereInput
  }

  /**
   * SharedState without action
   */
  export type SharedStateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SharedState
     */
    select?: SharedStateSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    address: 'address',
    username: 'username',
    points: 'points',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BattleScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    category: 'category',
    source: 'source',
    sourceUrl: 'sourceUrl',
    status: 'status',
    startTime: 'startTime',
    endTime: 'endTime',
    durationHours: 'durationHours',
    maxParticipants: 'maxParticipants',
    debatePoints: 'debatePoints',
    overallScore: 'overallScore',
    balanceScore: 'balanceScore',
    complexity: 'complexity',
    controversyLevel: 'controversyLevel',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BattleScalarFieldEnum = (typeof BattleScalarFieldEnum)[keyof typeof BattleScalarFieldEnum]


  export const BattleParticipationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    battleId: 'battleId',
    joinedAt: 'joinedAt'
  };

  export type BattleParticipationScalarFieldEnum = (typeof BattleParticipationScalarFieldEnum)[keyof typeof BattleParticipationScalarFieldEnum]


  export const CastScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    battleId: 'battleId',
    content: 'content',
    side: 'side',
    qualityScore: 'qualityScore',
    relevanceScore: 'relevanceScore',
    isAppropriate: 'isAppropriate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CastScalarFieldEnum = (typeof CastScalarFieldEnum)[keyof typeof CastScalarFieldEnum]


  export const BattleWinScalarFieldEnum: {
    id: 'id',
    battleId: 'battleId',
    userId: 'userId',
    position: 'position',
    prize: 'prize'
  };

  export type BattleWinScalarFieldEnum = (typeof BattleWinScalarFieldEnum)[keyof typeof BattleWinScalarFieldEnum]


  export const BattleHistoryScalarFieldEnum: {
    id: 'id',
    battleId: 'battleId',
    completedAt: 'completedAt',
    totalParticipants: 'totalParticipants',
    totalCasts: 'totalCasts',
    winnerAddress: 'winnerAddress'
  };

  export type BattleHistoryScalarFieldEnum = (typeof BattleHistoryScalarFieldEnum)[keyof typeof BattleHistoryScalarFieldEnum]


  export const SystemConfigScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value'
  };

  export type SystemConfigScalarFieldEnum = (typeof SystemConfigScalarFieldEnum)[keyof typeof SystemConfigScalarFieldEnum]


  export const SharedStateScalarFieldEnum: {
    id: 'id',
    key: 'key',
    rateLimitCooldown: 'rateLimitCooldown',
    lastUpdated: 'lastUpdated',
    createdAt: 'createdAt'
  };

  export type SharedStateScalarFieldEnum = (typeof SharedStateScalarFieldEnum)[keyof typeof SharedStateScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'BattleStatus'
   */
  export type EnumBattleStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BattleStatus'>
    


  /**
   * Reference to a field of type 'BattleStatus[]'
   */
  export type ListEnumBattleStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BattleStatus[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'CastSide'
   */
  export type EnumCastSideFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CastSide'>
    


  /**
   * Reference to a field of type 'CastSide[]'
   */
  export type ListEnumCastSideFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CastSide[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    address?: StringFilter<"User"> | string
    username?: StringNullableFilter<"User"> | string | null
    points?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    participations?: BattleParticipationListRelationFilter
    wins?: BattleWinListRelationFilter
    casts?: CastListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrder
    username?: SortOrderInput | SortOrder
    points?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    participations?: BattleParticipationOrderByRelationAggregateInput
    wins?: BattleWinOrderByRelationAggregateInput
    casts?: CastOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    address?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    username?: StringNullableFilter<"User"> | string | null
    points?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    participations?: BattleParticipationListRelationFilter
    wins?: BattleWinListRelationFilter
    casts?: CastListRelationFilter
  }, "id" | "address">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrder
    username?: SortOrderInput | SortOrder
    points?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    address?: StringWithAggregatesFilter<"User"> | string
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    points?: IntWithAggregatesFilter<"User"> | number
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type BattleWhereInput = {
    AND?: BattleWhereInput | BattleWhereInput[]
    OR?: BattleWhereInput[]
    NOT?: BattleWhereInput | BattleWhereInput[]
    id?: StringFilter<"Battle"> | string
    title?: StringFilter<"Battle"> | string
    description?: StringFilter<"Battle"> | string
    category?: StringFilter<"Battle"> | string
    source?: StringFilter<"Battle"> | string
    sourceUrl?: StringNullableFilter<"Battle"> | string | null
    status?: EnumBattleStatusFilter<"Battle"> | $Enums.BattleStatus
    startTime?: DateTimeFilter<"Battle"> | Date | string
    endTime?: DateTimeFilter<"Battle"> | Date | string
    durationHours?: FloatFilter<"Battle"> | number
    maxParticipants?: IntFilter<"Battle"> | number
    debatePoints?: JsonFilter<"Battle">
    overallScore?: IntNullableFilter<"Battle"> | number | null
    balanceScore?: IntNullableFilter<"Battle"> | number | null
    complexity?: StringNullableFilter<"Battle"> | string | null
    controversyLevel?: StringNullableFilter<"Battle"> | string | null
    createdAt?: DateTimeFilter<"Battle"> | Date | string
    updatedAt?: DateTimeFilter<"Battle"> | Date | string
    participants?: BattleParticipationListRelationFilter
    casts?: CastListRelationFilter
    winners?: BattleWinListRelationFilter
    history?: XOR<BattleHistoryNullableRelationFilter, BattleHistoryWhereInput> | null
  }

  export type BattleOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    source?: SortOrder
    sourceUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    durationHours?: SortOrder
    maxParticipants?: SortOrder
    debatePoints?: SortOrder
    overallScore?: SortOrderInput | SortOrder
    balanceScore?: SortOrderInput | SortOrder
    complexity?: SortOrderInput | SortOrder
    controversyLevel?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    participants?: BattleParticipationOrderByRelationAggregateInput
    casts?: CastOrderByRelationAggregateInput
    winners?: BattleWinOrderByRelationAggregateInput
    history?: BattleHistoryOrderByWithRelationInput
  }

  export type BattleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BattleWhereInput | BattleWhereInput[]
    OR?: BattleWhereInput[]
    NOT?: BattleWhereInput | BattleWhereInput[]
    title?: StringFilter<"Battle"> | string
    description?: StringFilter<"Battle"> | string
    category?: StringFilter<"Battle"> | string
    source?: StringFilter<"Battle"> | string
    sourceUrl?: StringNullableFilter<"Battle"> | string | null
    status?: EnumBattleStatusFilter<"Battle"> | $Enums.BattleStatus
    startTime?: DateTimeFilter<"Battle"> | Date | string
    endTime?: DateTimeFilter<"Battle"> | Date | string
    durationHours?: FloatFilter<"Battle"> | number
    maxParticipants?: IntFilter<"Battle"> | number
    debatePoints?: JsonFilter<"Battle">
    overallScore?: IntNullableFilter<"Battle"> | number | null
    balanceScore?: IntNullableFilter<"Battle"> | number | null
    complexity?: StringNullableFilter<"Battle"> | string | null
    controversyLevel?: StringNullableFilter<"Battle"> | string | null
    createdAt?: DateTimeFilter<"Battle"> | Date | string
    updatedAt?: DateTimeFilter<"Battle"> | Date | string
    participants?: BattleParticipationListRelationFilter
    casts?: CastListRelationFilter
    winners?: BattleWinListRelationFilter
    history?: XOR<BattleHistoryNullableRelationFilter, BattleHistoryWhereInput> | null
  }, "id">

  export type BattleOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    source?: SortOrder
    sourceUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    durationHours?: SortOrder
    maxParticipants?: SortOrder
    debatePoints?: SortOrder
    overallScore?: SortOrderInput | SortOrder
    balanceScore?: SortOrderInput | SortOrder
    complexity?: SortOrderInput | SortOrder
    controversyLevel?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BattleCountOrderByAggregateInput
    _avg?: BattleAvgOrderByAggregateInput
    _max?: BattleMaxOrderByAggregateInput
    _min?: BattleMinOrderByAggregateInput
    _sum?: BattleSumOrderByAggregateInput
  }

  export type BattleScalarWhereWithAggregatesInput = {
    AND?: BattleScalarWhereWithAggregatesInput | BattleScalarWhereWithAggregatesInput[]
    OR?: BattleScalarWhereWithAggregatesInput[]
    NOT?: BattleScalarWhereWithAggregatesInput | BattleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Battle"> | string
    title?: StringWithAggregatesFilter<"Battle"> | string
    description?: StringWithAggregatesFilter<"Battle"> | string
    category?: StringWithAggregatesFilter<"Battle"> | string
    source?: StringWithAggregatesFilter<"Battle"> | string
    sourceUrl?: StringNullableWithAggregatesFilter<"Battle"> | string | null
    status?: EnumBattleStatusWithAggregatesFilter<"Battle"> | $Enums.BattleStatus
    startTime?: DateTimeWithAggregatesFilter<"Battle"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"Battle"> | Date | string
    durationHours?: FloatWithAggregatesFilter<"Battle"> | number
    maxParticipants?: IntWithAggregatesFilter<"Battle"> | number
    debatePoints?: JsonWithAggregatesFilter<"Battle">
    overallScore?: IntNullableWithAggregatesFilter<"Battle"> | number | null
    balanceScore?: IntNullableWithAggregatesFilter<"Battle"> | number | null
    complexity?: StringNullableWithAggregatesFilter<"Battle"> | string | null
    controversyLevel?: StringNullableWithAggregatesFilter<"Battle"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Battle"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Battle"> | Date | string
  }

  export type BattleParticipationWhereInput = {
    AND?: BattleParticipationWhereInput | BattleParticipationWhereInput[]
    OR?: BattleParticipationWhereInput[]
    NOT?: BattleParticipationWhereInput | BattleParticipationWhereInput[]
    id?: StringFilter<"BattleParticipation"> | string
    userId?: StringFilter<"BattleParticipation"> | string
    battleId?: StringFilter<"BattleParticipation"> | string
    joinedAt?: DateTimeFilter<"BattleParticipation"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    battle?: XOR<BattleRelationFilter, BattleWhereInput>
  }

  export type BattleParticipationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    battleId?: SortOrder
    joinedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    battle?: BattleOrderByWithRelationInput
  }

  export type BattleParticipationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_battleId?: BattleParticipationUserIdBattleIdCompoundUniqueInput
    AND?: BattleParticipationWhereInput | BattleParticipationWhereInput[]
    OR?: BattleParticipationWhereInput[]
    NOT?: BattleParticipationWhereInput | BattleParticipationWhereInput[]
    userId?: StringFilter<"BattleParticipation"> | string
    battleId?: StringFilter<"BattleParticipation"> | string
    joinedAt?: DateTimeFilter<"BattleParticipation"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    battle?: XOR<BattleRelationFilter, BattleWhereInput>
  }, "id" | "userId_battleId">

  export type BattleParticipationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    battleId?: SortOrder
    joinedAt?: SortOrder
    _count?: BattleParticipationCountOrderByAggregateInput
    _max?: BattleParticipationMaxOrderByAggregateInput
    _min?: BattleParticipationMinOrderByAggregateInput
  }

  export type BattleParticipationScalarWhereWithAggregatesInput = {
    AND?: BattleParticipationScalarWhereWithAggregatesInput | BattleParticipationScalarWhereWithAggregatesInput[]
    OR?: BattleParticipationScalarWhereWithAggregatesInput[]
    NOT?: BattleParticipationScalarWhereWithAggregatesInput | BattleParticipationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BattleParticipation"> | string
    userId?: StringWithAggregatesFilter<"BattleParticipation"> | string
    battleId?: StringWithAggregatesFilter<"BattleParticipation"> | string
    joinedAt?: DateTimeWithAggregatesFilter<"BattleParticipation"> | Date | string
  }

  export type CastWhereInput = {
    AND?: CastWhereInput | CastWhereInput[]
    OR?: CastWhereInput[]
    NOT?: CastWhereInput | CastWhereInput[]
    id?: StringFilter<"Cast"> | string
    userId?: StringFilter<"Cast"> | string
    battleId?: StringFilter<"Cast"> | string
    content?: StringFilter<"Cast"> | string
    side?: EnumCastSideFilter<"Cast"> | $Enums.CastSide
    qualityScore?: IntNullableFilter<"Cast"> | number | null
    relevanceScore?: IntNullableFilter<"Cast"> | number | null
    isAppropriate?: BoolFilter<"Cast"> | boolean
    createdAt?: DateTimeFilter<"Cast"> | Date | string
    updatedAt?: DateTimeFilter<"Cast"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    battle?: XOR<BattleRelationFilter, BattleWhereInput>
  }

  export type CastOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    battleId?: SortOrder
    content?: SortOrder
    side?: SortOrder
    qualityScore?: SortOrderInput | SortOrder
    relevanceScore?: SortOrderInput | SortOrder
    isAppropriate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    battle?: BattleOrderByWithRelationInput
  }

  export type CastWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CastWhereInput | CastWhereInput[]
    OR?: CastWhereInput[]
    NOT?: CastWhereInput | CastWhereInput[]
    userId?: StringFilter<"Cast"> | string
    battleId?: StringFilter<"Cast"> | string
    content?: StringFilter<"Cast"> | string
    side?: EnumCastSideFilter<"Cast"> | $Enums.CastSide
    qualityScore?: IntNullableFilter<"Cast"> | number | null
    relevanceScore?: IntNullableFilter<"Cast"> | number | null
    isAppropriate?: BoolFilter<"Cast"> | boolean
    createdAt?: DateTimeFilter<"Cast"> | Date | string
    updatedAt?: DateTimeFilter<"Cast"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    battle?: XOR<BattleRelationFilter, BattleWhereInput>
  }, "id">

  export type CastOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    battleId?: SortOrder
    content?: SortOrder
    side?: SortOrder
    qualityScore?: SortOrderInput | SortOrder
    relevanceScore?: SortOrderInput | SortOrder
    isAppropriate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CastCountOrderByAggregateInput
    _avg?: CastAvgOrderByAggregateInput
    _max?: CastMaxOrderByAggregateInput
    _min?: CastMinOrderByAggregateInput
    _sum?: CastSumOrderByAggregateInput
  }

  export type CastScalarWhereWithAggregatesInput = {
    AND?: CastScalarWhereWithAggregatesInput | CastScalarWhereWithAggregatesInput[]
    OR?: CastScalarWhereWithAggregatesInput[]
    NOT?: CastScalarWhereWithAggregatesInput | CastScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Cast"> | string
    userId?: StringWithAggregatesFilter<"Cast"> | string
    battleId?: StringWithAggregatesFilter<"Cast"> | string
    content?: StringWithAggregatesFilter<"Cast"> | string
    side?: EnumCastSideWithAggregatesFilter<"Cast"> | $Enums.CastSide
    qualityScore?: IntNullableWithAggregatesFilter<"Cast"> | number | null
    relevanceScore?: IntNullableWithAggregatesFilter<"Cast"> | number | null
    isAppropriate?: BoolWithAggregatesFilter<"Cast"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Cast"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Cast"> | Date | string
  }

  export type BattleWinWhereInput = {
    AND?: BattleWinWhereInput | BattleWinWhereInput[]
    OR?: BattleWinWhereInput[]
    NOT?: BattleWinWhereInput | BattleWinWhereInput[]
    id?: StringFilter<"BattleWin"> | string
    battleId?: StringFilter<"BattleWin"> | string
    userId?: StringFilter<"BattleWin"> | string
    position?: IntFilter<"BattleWin"> | number
    prize?: StringNullableFilter<"BattleWin"> | string | null
    battle?: XOR<BattleRelationFilter, BattleWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BattleWinOrderByWithRelationInput = {
    id?: SortOrder
    battleId?: SortOrder
    userId?: SortOrder
    position?: SortOrder
    prize?: SortOrderInput | SortOrder
    battle?: BattleOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type BattleWinWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    battleId_position?: BattleWinBattleIdPositionCompoundUniqueInput
    AND?: BattleWinWhereInput | BattleWinWhereInput[]
    OR?: BattleWinWhereInput[]
    NOT?: BattleWinWhereInput | BattleWinWhereInput[]
    battleId?: StringFilter<"BattleWin"> | string
    userId?: StringFilter<"BattleWin"> | string
    position?: IntFilter<"BattleWin"> | number
    prize?: StringNullableFilter<"BattleWin"> | string | null
    battle?: XOR<BattleRelationFilter, BattleWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "battleId_position">

  export type BattleWinOrderByWithAggregationInput = {
    id?: SortOrder
    battleId?: SortOrder
    userId?: SortOrder
    position?: SortOrder
    prize?: SortOrderInput | SortOrder
    _count?: BattleWinCountOrderByAggregateInput
    _avg?: BattleWinAvgOrderByAggregateInput
    _max?: BattleWinMaxOrderByAggregateInput
    _min?: BattleWinMinOrderByAggregateInput
    _sum?: BattleWinSumOrderByAggregateInput
  }

  export type BattleWinScalarWhereWithAggregatesInput = {
    AND?: BattleWinScalarWhereWithAggregatesInput | BattleWinScalarWhereWithAggregatesInput[]
    OR?: BattleWinScalarWhereWithAggregatesInput[]
    NOT?: BattleWinScalarWhereWithAggregatesInput | BattleWinScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BattleWin"> | string
    battleId?: StringWithAggregatesFilter<"BattleWin"> | string
    userId?: StringWithAggregatesFilter<"BattleWin"> | string
    position?: IntWithAggregatesFilter<"BattleWin"> | number
    prize?: StringNullableWithAggregatesFilter<"BattleWin"> | string | null
  }

  export type BattleHistoryWhereInput = {
    AND?: BattleHistoryWhereInput | BattleHistoryWhereInput[]
    OR?: BattleHistoryWhereInput[]
    NOT?: BattleHistoryWhereInput | BattleHistoryWhereInput[]
    id?: StringFilter<"BattleHistory"> | string
    battleId?: StringFilter<"BattleHistory"> | string
    completedAt?: DateTimeFilter<"BattleHistory"> | Date | string
    totalParticipants?: IntFilter<"BattleHistory"> | number
    totalCasts?: IntFilter<"BattleHistory"> | number
    winnerAddress?: StringNullableFilter<"BattleHistory"> | string | null
    battle?: XOR<BattleRelationFilter, BattleWhereInput>
  }

  export type BattleHistoryOrderByWithRelationInput = {
    id?: SortOrder
    battleId?: SortOrder
    completedAt?: SortOrder
    totalParticipants?: SortOrder
    totalCasts?: SortOrder
    winnerAddress?: SortOrderInput | SortOrder
    battle?: BattleOrderByWithRelationInput
  }

  export type BattleHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    battleId?: string
    AND?: BattleHistoryWhereInput | BattleHistoryWhereInput[]
    OR?: BattleHistoryWhereInput[]
    NOT?: BattleHistoryWhereInput | BattleHistoryWhereInput[]
    completedAt?: DateTimeFilter<"BattleHistory"> | Date | string
    totalParticipants?: IntFilter<"BattleHistory"> | number
    totalCasts?: IntFilter<"BattleHistory"> | number
    winnerAddress?: StringNullableFilter<"BattleHistory"> | string | null
    battle?: XOR<BattleRelationFilter, BattleWhereInput>
  }, "id" | "battleId">

  export type BattleHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    battleId?: SortOrder
    completedAt?: SortOrder
    totalParticipants?: SortOrder
    totalCasts?: SortOrder
    winnerAddress?: SortOrderInput | SortOrder
    _count?: BattleHistoryCountOrderByAggregateInput
    _avg?: BattleHistoryAvgOrderByAggregateInput
    _max?: BattleHistoryMaxOrderByAggregateInput
    _min?: BattleHistoryMinOrderByAggregateInput
    _sum?: BattleHistorySumOrderByAggregateInput
  }

  export type BattleHistoryScalarWhereWithAggregatesInput = {
    AND?: BattleHistoryScalarWhereWithAggregatesInput | BattleHistoryScalarWhereWithAggregatesInput[]
    OR?: BattleHistoryScalarWhereWithAggregatesInput[]
    NOT?: BattleHistoryScalarWhereWithAggregatesInput | BattleHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BattleHistory"> | string
    battleId?: StringWithAggregatesFilter<"BattleHistory"> | string
    completedAt?: DateTimeWithAggregatesFilter<"BattleHistory"> | Date | string
    totalParticipants?: IntWithAggregatesFilter<"BattleHistory"> | number
    totalCasts?: IntWithAggregatesFilter<"BattleHistory"> | number
    winnerAddress?: StringNullableWithAggregatesFilter<"BattleHistory"> | string | null
  }

  export type SystemConfigWhereInput = {
    AND?: SystemConfigWhereInput | SystemConfigWhereInput[]
    OR?: SystemConfigWhereInput[]
    NOT?: SystemConfigWhereInput | SystemConfigWhereInput[]
    id?: StringFilter<"SystemConfig"> | string
    key?: StringFilter<"SystemConfig"> | string
    value?: StringFilter<"SystemConfig"> | string
  }

  export type SystemConfigOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
  }

  export type SystemConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: SystemConfigWhereInput | SystemConfigWhereInput[]
    OR?: SystemConfigWhereInput[]
    NOT?: SystemConfigWhereInput | SystemConfigWhereInput[]
    value?: StringFilter<"SystemConfig"> | string
  }, "id" | "key">

  export type SystemConfigOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    _count?: SystemConfigCountOrderByAggregateInput
    _max?: SystemConfigMaxOrderByAggregateInput
    _min?: SystemConfigMinOrderByAggregateInput
  }

  export type SystemConfigScalarWhereWithAggregatesInput = {
    AND?: SystemConfigScalarWhereWithAggregatesInput | SystemConfigScalarWhereWithAggregatesInput[]
    OR?: SystemConfigScalarWhereWithAggregatesInput[]
    NOT?: SystemConfigScalarWhereWithAggregatesInput | SystemConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SystemConfig"> | string
    key?: StringWithAggregatesFilter<"SystemConfig"> | string
    value?: StringWithAggregatesFilter<"SystemConfig"> | string
  }

  export type SharedStateWhereInput = {
    AND?: SharedStateWhereInput | SharedStateWhereInput[]
    OR?: SharedStateWhereInput[]
    NOT?: SharedStateWhereInput | SharedStateWhereInput[]
    id?: StringFilter<"SharedState"> | string
    key?: StringFilter<"SharedState"> | string
    rateLimitCooldown?: DateTimeNullableFilter<"SharedState"> | Date | string | null
    lastUpdated?: DateTimeFilter<"SharedState"> | Date | string
    createdAt?: DateTimeFilter<"SharedState"> | Date | string
  }

  export type SharedStateOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    rateLimitCooldown?: SortOrderInput | SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
  }

  export type SharedStateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: SharedStateWhereInput | SharedStateWhereInput[]
    OR?: SharedStateWhereInput[]
    NOT?: SharedStateWhereInput | SharedStateWhereInput[]
    rateLimitCooldown?: DateTimeNullableFilter<"SharedState"> | Date | string | null
    lastUpdated?: DateTimeFilter<"SharedState"> | Date | string
    createdAt?: DateTimeFilter<"SharedState"> | Date | string
  }, "id" | "key">

  export type SharedStateOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    rateLimitCooldown?: SortOrderInput | SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
    _count?: SharedStateCountOrderByAggregateInput
    _max?: SharedStateMaxOrderByAggregateInput
    _min?: SharedStateMinOrderByAggregateInput
  }

  export type SharedStateScalarWhereWithAggregatesInput = {
    AND?: SharedStateScalarWhereWithAggregatesInput | SharedStateScalarWhereWithAggregatesInput[]
    OR?: SharedStateScalarWhereWithAggregatesInput[]
    NOT?: SharedStateScalarWhereWithAggregatesInput | SharedStateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SharedState"> | string
    key?: StringWithAggregatesFilter<"SharedState"> | string
    rateLimitCooldown?: DateTimeNullableWithAggregatesFilter<"SharedState"> | Date | string | null
    lastUpdated?: DateTimeWithAggregatesFilter<"SharedState"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"SharedState"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    address: string
    username?: string | null
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    participations?: BattleParticipationCreateNestedManyWithoutUserInput
    wins?: BattleWinCreateNestedManyWithoutUserInput
    casts?: CastCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    address: string
    username?: string | null
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    participations?: BattleParticipationUncheckedCreateNestedManyWithoutUserInput
    wins?: BattleWinUncheckedCreateNestedManyWithoutUserInput
    casts?: CastUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participations?: BattleParticipationUpdateManyWithoutUserNestedInput
    wins?: BattleWinUpdateManyWithoutUserNestedInput
    casts?: CastUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participations?: BattleParticipationUncheckedUpdateManyWithoutUserNestedInput
    wins?: BattleWinUncheckedUpdateManyWithoutUserNestedInput
    casts?: CastUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    address: string
    username?: string | null
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BattleCreateInput = {
    id?: string
    title: string
    description: string
    category: string
    source: string
    sourceUrl?: string | null
    status?: $Enums.BattleStatus
    startTime: Date | string
    endTime: Date | string
    durationHours: number
    maxParticipants?: number
    debatePoints: JsonNullValueInput | InputJsonValue
    overallScore?: number | null
    balanceScore?: number | null
    complexity?: string | null
    controversyLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: BattleParticipationCreateNestedManyWithoutBattleInput
    casts?: CastCreateNestedManyWithoutBattleInput
    winners?: BattleWinCreateNestedManyWithoutBattleInput
    history?: BattleHistoryCreateNestedOneWithoutBattleInput
  }

  export type BattleUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    category: string
    source: string
    sourceUrl?: string | null
    status?: $Enums.BattleStatus
    startTime: Date | string
    endTime: Date | string
    durationHours: number
    maxParticipants?: number
    debatePoints: JsonNullValueInput | InputJsonValue
    overallScore?: number | null
    balanceScore?: number | null
    complexity?: string | null
    controversyLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: BattleParticipationUncheckedCreateNestedManyWithoutBattleInput
    casts?: CastUncheckedCreateNestedManyWithoutBattleInput
    winners?: BattleWinUncheckedCreateNestedManyWithoutBattleInput
    history?: BattleHistoryUncheckedCreateNestedOneWithoutBattleInput
  }

  export type BattleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationHours?: FloatFieldUpdateOperationsInput | number
    maxParticipants?: IntFieldUpdateOperationsInput | number
    debatePoints?: JsonNullValueInput | InputJsonValue
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: NullableStringFieldUpdateOperationsInput | string | null
    controversyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: BattleParticipationUpdateManyWithoutBattleNestedInput
    casts?: CastUpdateManyWithoutBattleNestedInput
    winners?: BattleWinUpdateManyWithoutBattleNestedInput
    history?: BattleHistoryUpdateOneWithoutBattleNestedInput
  }

  export type BattleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationHours?: FloatFieldUpdateOperationsInput | number
    maxParticipants?: IntFieldUpdateOperationsInput | number
    debatePoints?: JsonNullValueInput | InputJsonValue
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: NullableStringFieldUpdateOperationsInput | string | null
    controversyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: BattleParticipationUncheckedUpdateManyWithoutBattleNestedInput
    casts?: CastUncheckedUpdateManyWithoutBattleNestedInput
    winners?: BattleWinUncheckedUpdateManyWithoutBattleNestedInput
    history?: BattleHistoryUncheckedUpdateOneWithoutBattleNestedInput
  }

  export type BattleCreateManyInput = {
    id?: string
    title: string
    description: string
    category: string
    source: string
    sourceUrl?: string | null
    status?: $Enums.BattleStatus
    startTime: Date | string
    endTime: Date | string
    durationHours: number
    maxParticipants?: number
    debatePoints: JsonNullValueInput | InputJsonValue
    overallScore?: number | null
    balanceScore?: number | null
    complexity?: string | null
    controversyLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BattleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationHours?: FloatFieldUpdateOperationsInput | number
    maxParticipants?: IntFieldUpdateOperationsInput | number
    debatePoints?: JsonNullValueInput | InputJsonValue
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: NullableStringFieldUpdateOperationsInput | string | null
    controversyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BattleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationHours?: FloatFieldUpdateOperationsInput | number
    maxParticipants?: IntFieldUpdateOperationsInput | number
    debatePoints?: JsonNullValueInput | InputJsonValue
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: NullableStringFieldUpdateOperationsInput | string | null
    controversyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BattleParticipationCreateInput = {
    id?: string
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutParticipationsInput
    battle: BattleCreateNestedOneWithoutParticipantsInput
  }

  export type BattleParticipationUncheckedCreateInput = {
    id?: string
    userId: string
    battleId: string
    joinedAt?: Date | string
  }

  export type BattleParticipationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutParticipationsNestedInput
    battle?: BattleUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type BattleParticipationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BattleParticipationCreateManyInput = {
    id?: string
    userId: string
    battleId: string
    joinedAt?: Date | string
  }

  export type BattleParticipationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BattleParticipationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CastCreateInput = {
    id?: string
    content: string
    side: $Enums.CastSide
    qualityScore?: number | null
    relevanceScore?: number | null
    isAppropriate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCastsInput
    battle: BattleCreateNestedOneWithoutCastsInput
  }

  export type CastUncheckedCreateInput = {
    id?: string
    userId: string
    battleId: string
    content: string
    side: $Enums.CastSide
    qualityScore?: number | null
    relevanceScore?: number | null
    isAppropriate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CastUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    side?: EnumCastSideFieldUpdateOperationsInput | $Enums.CastSide
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    relevanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    isAppropriate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCastsNestedInput
    battle?: BattleUpdateOneRequiredWithoutCastsNestedInput
  }

  export type CastUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    side?: EnumCastSideFieldUpdateOperationsInput | $Enums.CastSide
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    relevanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    isAppropriate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CastCreateManyInput = {
    id?: string
    userId: string
    battleId: string
    content: string
    side: $Enums.CastSide
    qualityScore?: number | null
    relevanceScore?: number | null
    isAppropriate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CastUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    side?: EnumCastSideFieldUpdateOperationsInput | $Enums.CastSide
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    relevanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    isAppropriate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CastUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    side?: EnumCastSideFieldUpdateOperationsInput | $Enums.CastSide
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    relevanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    isAppropriate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BattleWinCreateInput = {
    id?: string
    position: number
    prize?: string | null
    battle: BattleCreateNestedOneWithoutWinnersInput
    user: UserCreateNestedOneWithoutWinsInput
  }

  export type BattleWinUncheckedCreateInput = {
    id?: string
    battleId: string
    userId: string
    position: number
    prize?: string | null
  }

  export type BattleWinUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    prize?: NullableStringFieldUpdateOperationsInput | string | null
    battle?: BattleUpdateOneRequiredWithoutWinnersNestedInput
    user?: UserUpdateOneRequiredWithoutWinsNestedInput
  }

  export type BattleWinUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    prize?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BattleWinCreateManyInput = {
    id?: string
    battleId: string
    userId: string
    position: number
    prize?: string | null
  }

  export type BattleWinUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    prize?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BattleWinUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    prize?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BattleHistoryCreateInput = {
    id?: string
    completedAt?: Date | string
    totalParticipants: number
    totalCasts: number
    winnerAddress?: string | null
    battle: BattleCreateNestedOneWithoutHistoryInput
  }

  export type BattleHistoryUncheckedCreateInput = {
    id?: string
    battleId: string
    completedAt?: Date | string
    totalParticipants: number
    totalCasts: number
    winnerAddress?: string | null
  }

  export type BattleHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalParticipants?: IntFieldUpdateOperationsInput | number
    totalCasts?: IntFieldUpdateOperationsInput | number
    winnerAddress?: NullableStringFieldUpdateOperationsInput | string | null
    battle?: BattleUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type BattleHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalParticipants?: IntFieldUpdateOperationsInput | number
    totalCasts?: IntFieldUpdateOperationsInput | number
    winnerAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BattleHistoryCreateManyInput = {
    id?: string
    battleId: string
    completedAt?: Date | string
    totalParticipants: number
    totalCasts: number
    winnerAddress?: string | null
  }

  export type BattleHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalParticipants?: IntFieldUpdateOperationsInput | number
    totalCasts?: IntFieldUpdateOperationsInput | number
    winnerAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BattleHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalParticipants?: IntFieldUpdateOperationsInput | number
    totalCasts?: IntFieldUpdateOperationsInput | number
    winnerAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SystemConfigCreateInput = {
    id?: string
    key: string
    value: string
  }

  export type SystemConfigUncheckedCreateInput = {
    id?: string
    key: string
    value: string
  }

  export type SystemConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type SystemConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type SystemConfigCreateManyInput = {
    id?: string
    key: string
    value: string
  }

  export type SystemConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type SystemConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type SharedStateCreateInput = {
    id?: string
    key: string
    rateLimitCooldown?: Date | string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type SharedStateUncheckedCreateInput = {
    id?: string
    key: string
    rateLimitCooldown?: Date | string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type SharedStateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    rateLimitCooldown?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharedStateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    rateLimitCooldown?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharedStateCreateManyInput = {
    id?: string
    key: string
    rateLimitCooldown?: Date | string | null
    lastUpdated?: Date | string
    createdAt?: Date | string
  }

  export type SharedStateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    rateLimitCooldown?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SharedStateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    rateLimitCooldown?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BattleParticipationListRelationFilter = {
    every?: BattleParticipationWhereInput
    some?: BattleParticipationWhereInput
    none?: BattleParticipationWhereInput
  }

  export type BattleWinListRelationFilter = {
    every?: BattleWinWhereInput
    some?: BattleWinWhereInput
    none?: BattleWinWhereInput
  }

  export type CastListRelationFilter = {
    every?: CastWhereInput
    some?: CastWhereInput
    none?: CastWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BattleParticipationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BattleWinOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CastOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    username?: SortOrder
    points?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    points?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    username?: SortOrder
    points?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    username?: SortOrder
    points?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    points?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumBattleStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BattleStatus | EnumBattleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BattleStatus[] | ListEnumBattleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BattleStatus[] | ListEnumBattleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBattleStatusFilter<$PrismaModel> | $Enums.BattleStatus
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BattleHistoryNullableRelationFilter = {
    is?: BattleHistoryWhereInput | null
    isNot?: BattleHistoryWhereInput | null
  }

  export type BattleCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    source?: SortOrder
    sourceUrl?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    durationHours?: SortOrder
    maxParticipants?: SortOrder
    debatePoints?: SortOrder
    overallScore?: SortOrder
    balanceScore?: SortOrder
    complexity?: SortOrder
    controversyLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BattleAvgOrderByAggregateInput = {
    durationHours?: SortOrder
    maxParticipants?: SortOrder
    overallScore?: SortOrder
    balanceScore?: SortOrder
  }

  export type BattleMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    source?: SortOrder
    sourceUrl?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    durationHours?: SortOrder
    maxParticipants?: SortOrder
    overallScore?: SortOrder
    balanceScore?: SortOrder
    complexity?: SortOrder
    controversyLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BattleMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    category?: SortOrder
    source?: SortOrder
    sourceUrl?: SortOrder
    status?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    durationHours?: SortOrder
    maxParticipants?: SortOrder
    overallScore?: SortOrder
    balanceScore?: SortOrder
    complexity?: SortOrder
    controversyLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BattleSumOrderByAggregateInput = {
    durationHours?: SortOrder
    maxParticipants?: SortOrder
    overallScore?: SortOrder
    balanceScore?: SortOrder
  }

  export type EnumBattleStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BattleStatus | EnumBattleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BattleStatus[] | ListEnumBattleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BattleStatus[] | ListEnumBattleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBattleStatusWithAggregatesFilter<$PrismaModel> | $Enums.BattleStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBattleStatusFilter<$PrismaModel>
    _max?: NestedEnumBattleStatusFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type BattleRelationFilter = {
    is?: BattleWhereInput
    isNot?: BattleWhereInput
  }

  export type BattleParticipationUserIdBattleIdCompoundUniqueInput = {
    userId: string
    battleId: string
  }

  export type BattleParticipationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    battleId?: SortOrder
    joinedAt?: SortOrder
  }

  export type BattleParticipationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    battleId?: SortOrder
    joinedAt?: SortOrder
  }

  export type BattleParticipationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    battleId?: SortOrder
    joinedAt?: SortOrder
  }

  export type EnumCastSideFilter<$PrismaModel = never> = {
    equals?: $Enums.CastSide | EnumCastSideFieldRefInput<$PrismaModel>
    in?: $Enums.CastSide[] | ListEnumCastSideFieldRefInput<$PrismaModel>
    notIn?: $Enums.CastSide[] | ListEnumCastSideFieldRefInput<$PrismaModel>
    not?: NestedEnumCastSideFilter<$PrismaModel> | $Enums.CastSide
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CastCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    battleId?: SortOrder
    content?: SortOrder
    side?: SortOrder
    qualityScore?: SortOrder
    relevanceScore?: SortOrder
    isAppropriate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CastAvgOrderByAggregateInput = {
    qualityScore?: SortOrder
    relevanceScore?: SortOrder
  }

  export type CastMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    battleId?: SortOrder
    content?: SortOrder
    side?: SortOrder
    qualityScore?: SortOrder
    relevanceScore?: SortOrder
    isAppropriate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CastMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    battleId?: SortOrder
    content?: SortOrder
    side?: SortOrder
    qualityScore?: SortOrder
    relevanceScore?: SortOrder
    isAppropriate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CastSumOrderByAggregateInput = {
    qualityScore?: SortOrder
    relevanceScore?: SortOrder
  }

  export type EnumCastSideWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CastSide | EnumCastSideFieldRefInput<$PrismaModel>
    in?: $Enums.CastSide[] | ListEnumCastSideFieldRefInput<$PrismaModel>
    notIn?: $Enums.CastSide[] | ListEnumCastSideFieldRefInput<$PrismaModel>
    not?: NestedEnumCastSideWithAggregatesFilter<$PrismaModel> | $Enums.CastSide
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCastSideFilter<$PrismaModel>
    _max?: NestedEnumCastSideFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BattleWinBattleIdPositionCompoundUniqueInput = {
    battleId: string
    position: number
  }

  export type BattleWinCountOrderByAggregateInput = {
    id?: SortOrder
    battleId?: SortOrder
    userId?: SortOrder
    position?: SortOrder
    prize?: SortOrder
  }

  export type BattleWinAvgOrderByAggregateInput = {
    position?: SortOrder
  }

  export type BattleWinMaxOrderByAggregateInput = {
    id?: SortOrder
    battleId?: SortOrder
    userId?: SortOrder
    position?: SortOrder
    prize?: SortOrder
  }

  export type BattleWinMinOrderByAggregateInput = {
    id?: SortOrder
    battleId?: SortOrder
    userId?: SortOrder
    position?: SortOrder
    prize?: SortOrder
  }

  export type BattleWinSumOrderByAggregateInput = {
    position?: SortOrder
  }

  export type BattleHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    battleId?: SortOrder
    completedAt?: SortOrder
    totalParticipants?: SortOrder
    totalCasts?: SortOrder
    winnerAddress?: SortOrder
  }

  export type BattleHistoryAvgOrderByAggregateInput = {
    totalParticipants?: SortOrder
    totalCasts?: SortOrder
  }

  export type BattleHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    battleId?: SortOrder
    completedAt?: SortOrder
    totalParticipants?: SortOrder
    totalCasts?: SortOrder
    winnerAddress?: SortOrder
  }

  export type BattleHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    battleId?: SortOrder
    completedAt?: SortOrder
    totalParticipants?: SortOrder
    totalCasts?: SortOrder
    winnerAddress?: SortOrder
  }

  export type BattleHistorySumOrderByAggregateInput = {
    totalParticipants?: SortOrder
    totalCasts?: SortOrder
  }

  export type SystemConfigCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
  }

  export type SystemConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
  }

  export type SystemConfigMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SharedStateCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    rateLimitCooldown?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
  }

  export type SharedStateMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    rateLimitCooldown?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
  }

  export type SharedStateMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    rateLimitCooldown?: SortOrder
    lastUpdated?: SortOrder
    createdAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BattleParticipationCreateNestedManyWithoutUserInput = {
    create?: XOR<BattleParticipationCreateWithoutUserInput, BattleParticipationUncheckedCreateWithoutUserInput> | BattleParticipationCreateWithoutUserInput[] | BattleParticipationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BattleParticipationCreateOrConnectWithoutUserInput | BattleParticipationCreateOrConnectWithoutUserInput[]
    createMany?: BattleParticipationCreateManyUserInputEnvelope
    connect?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
  }

  export type BattleWinCreateNestedManyWithoutUserInput = {
    create?: XOR<BattleWinCreateWithoutUserInput, BattleWinUncheckedCreateWithoutUserInput> | BattleWinCreateWithoutUserInput[] | BattleWinUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BattleWinCreateOrConnectWithoutUserInput | BattleWinCreateOrConnectWithoutUserInput[]
    createMany?: BattleWinCreateManyUserInputEnvelope
    connect?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
  }

  export type CastCreateNestedManyWithoutUserInput = {
    create?: XOR<CastCreateWithoutUserInput, CastUncheckedCreateWithoutUserInput> | CastCreateWithoutUserInput[] | CastUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CastCreateOrConnectWithoutUserInput | CastCreateOrConnectWithoutUserInput[]
    createMany?: CastCreateManyUserInputEnvelope
    connect?: CastWhereUniqueInput | CastWhereUniqueInput[]
  }

  export type BattleParticipationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BattleParticipationCreateWithoutUserInput, BattleParticipationUncheckedCreateWithoutUserInput> | BattleParticipationCreateWithoutUserInput[] | BattleParticipationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BattleParticipationCreateOrConnectWithoutUserInput | BattleParticipationCreateOrConnectWithoutUserInput[]
    createMany?: BattleParticipationCreateManyUserInputEnvelope
    connect?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
  }

  export type BattleWinUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BattleWinCreateWithoutUserInput, BattleWinUncheckedCreateWithoutUserInput> | BattleWinCreateWithoutUserInput[] | BattleWinUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BattleWinCreateOrConnectWithoutUserInput | BattleWinCreateOrConnectWithoutUserInput[]
    createMany?: BattleWinCreateManyUserInputEnvelope
    connect?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
  }

  export type CastUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CastCreateWithoutUserInput, CastUncheckedCreateWithoutUserInput> | CastCreateWithoutUserInput[] | CastUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CastCreateOrConnectWithoutUserInput | CastCreateOrConnectWithoutUserInput[]
    createMany?: CastCreateManyUserInputEnvelope
    connect?: CastWhereUniqueInput | CastWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BattleParticipationUpdateManyWithoutUserNestedInput = {
    create?: XOR<BattleParticipationCreateWithoutUserInput, BattleParticipationUncheckedCreateWithoutUserInput> | BattleParticipationCreateWithoutUserInput[] | BattleParticipationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BattleParticipationCreateOrConnectWithoutUserInput | BattleParticipationCreateOrConnectWithoutUserInput[]
    upsert?: BattleParticipationUpsertWithWhereUniqueWithoutUserInput | BattleParticipationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BattleParticipationCreateManyUserInputEnvelope
    set?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
    disconnect?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
    delete?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
    connect?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
    update?: BattleParticipationUpdateWithWhereUniqueWithoutUserInput | BattleParticipationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BattleParticipationUpdateManyWithWhereWithoutUserInput | BattleParticipationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BattleParticipationScalarWhereInput | BattleParticipationScalarWhereInput[]
  }

  export type BattleWinUpdateManyWithoutUserNestedInput = {
    create?: XOR<BattleWinCreateWithoutUserInput, BattleWinUncheckedCreateWithoutUserInput> | BattleWinCreateWithoutUserInput[] | BattleWinUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BattleWinCreateOrConnectWithoutUserInput | BattleWinCreateOrConnectWithoutUserInput[]
    upsert?: BattleWinUpsertWithWhereUniqueWithoutUserInput | BattleWinUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BattleWinCreateManyUserInputEnvelope
    set?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
    disconnect?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
    delete?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
    connect?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
    update?: BattleWinUpdateWithWhereUniqueWithoutUserInput | BattleWinUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BattleWinUpdateManyWithWhereWithoutUserInput | BattleWinUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BattleWinScalarWhereInput | BattleWinScalarWhereInput[]
  }

  export type CastUpdateManyWithoutUserNestedInput = {
    create?: XOR<CastCreateWithoutUserInput, CastUncheckedCreateWithoutUserInput> | CastCreateWithoutUserInput[] | CastUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CastCreateOrConnectWithoutUserInput | CastCreateOrConnectWithoutUserInput[]
    upsert?: CastUpsertWithWhereUniqueWithoutUserInput | CastUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CastCreateManyUserInputEnvelope
    set?: CastWhereUniqueInput | CastWhereUniqueInput[]
    disconnect?: CastWhereUniqueInput | CastWhereUniqueInput[]
    delete?: CastWhereUniqueInput | CastWhereUniqueInput[]
    connect?: CastWhereUniqueInput | CastWhereUniqueInput[]
    update?: CastUpdateWithWhereUniqueWithoutUserInput | CastUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CastUpdateManyWithWhereWithoutUserInput | CastUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CastScalarWhereInput | CastScalarWhereInput[]
  }

  export type BattleParticipationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BattleParticipationCreateWithoutUserInput, BattleParticipationUncheckedCreateWithoutUserInput> | BattleParticipationCreateWithoutUserInput[] | BattleParticipationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BattleParticipationCreateOrConnectWithoutUserInput | BattleParticipationCreateOrConnectWithoutUserInput[]
    upsert?: BattleParticipationUpsertWithWhereUniqueWithoutUserInput | BattleParticipationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BattleParticipationCreateManyUserInputEnvelope
    set?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
    disconnect?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
    delete?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
    connect?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
    update?: BattleParticipationUpdateWithWhereUniqueWithoutUserInput | BattleParticipationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BattleParticipationUpdateManyWithWhereWithoutUserInput | BattleParticipationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BattleParticipationScalarWhereInput | BattleParticipationScalarWhereInput[]
  }

  export type BattleWinUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BattleWinCreateWithoutUserInput, BattleWinUncheckedCreateWithoutUserInput> | BattleWinCreateWithoutUserInput[] | BattleWinUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BattleWinCreateOrConnectWithoutUserInput | BattleWinCreateOrConnectWithoutUserInput[]
    upsert?: BattleWinUpsertWithWhereUniqueWithoutUserInput | BattleWinUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BattleWinCreateManyUserInputEnvelope
    set?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
    disconnect?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
    delete?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
    connect?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
    update?: BattleWinUpdateWithWhereUniqueWithoutUserInput | BattleWinUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BattleWinUpdateManyWithWhereWithoutUserInput | BattleWinUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BattleWinScalarWhereInput | BattleWinScalarWhereInput[]
  }

  export type CastUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CastCreateWithoutUserInput, CastUncheckedCreateWithoutUserInput> | CastCreateWithoutUserInput[] | CastUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CastCreateOrConnectWithoutUserInput | CastCreateOrConnectWithoutUserInput[]
    upsert?: CastUpsertWithWhereUniqueWithoutUserInput | CastUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CastCreateManyUserInputEnvelope
    set?: CastWhereUniqueInput | CastWhereUniqueInput[]
    disconnect?: CastWhereUniqueInput | CastWhereUniqueInput[]
    delete?: CastWhereUniqueInput | CastWhereUniqueInput[]
    connect?: CastWhereUniqueInput | CastWhereUniqueInput[]
    update?: CastUpdateWithWhereUniqueWithoutUserInput | CastUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CastUpdateManyWithWhereWithoutUserInput | CastUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CastScalarWhereInput | CastScalarWhereInput[]
  }

  export type BattleParticipationCreateNestedManyWithoutBattleInput = {
    create?: XOR<BattleParticipationCreateWithoutBattleInput, BattleParticipationUncheckedCreateWithoutBattleInput> | BattleParticipationCreateWithoutBattleInput[] | BattleParticipationUncheckedCreateWithoutBattleInput[]
    connectOrCreate?: BattleParticipationCreateOrConnectWithoutBattleInput | BattleParticipationCreateOrConnectWithoutBattleInput[]
    createMany?: BattleParticipationCreateManyBattleInputEnvelope
    connect?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
  }

  export type CastCreateNestedManyWithoutBattleInput = {
    create?: XOR<CastCreateWithoutBattleInput, CastUncheckedCreateWithoutBattleInput> | CastCreateWithoutBattleInput[] | CastUncheckedCreateWithoutBattleInput[]
    connectOrCreate?: CastCreateOrConnectWithoutBattleInput | CastCreateOrConnectWithoutBattleInput[]
    createMany?: CastCreateManyBattleInputEnvelope
    connect?: CastWhereUniqueInput | CastWhereUniqueInput[]
  }

  export type BattleWinCreateNestedManyWithoutBattleInput = {
    create?: XOR<BattleWinCreateWithoutBattleInput, BattleWinUncheckedCreateWithoutBattleInput> | BattleWinCreateWithoutBattleInput[] | BattleWinUncheckedCreateWithoutBattleInput[]
    connectOrCreate?: BattleWinCreateOrConnectWithoutBattleInput | BattleWinCreateOrConnectWithoutBattleInput[]
    createMany?: BattleWinCreateManyBattleInputEnvelope
    connect?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
  }

  export type BattleHistoryCreateNestedOneWithoutBattleInput = {
    create?: XOR<BattleHistoryCreateWithoutBattleInput, BattleHistoryUncheckedCreateWithoutBattleInput>
    connectOrCreate?: BattleHistoryCreateOrConnectWithoutBattleInput
    connect?: BattleHistoryWhereUniqueInput
  }

  export type BattleParticipationUncheckedCreateNestedManyWithoutBattleInput = {
    create?: XOR<BattleParticipationCreateWithoutBattleInput, BattleParticipationUncheckedCreateWithoutBattleInput> | BattleParticipationCreateWithoutBattleInput[] | BattleParticipationUncheckedCreateWithoutBattleInput[]
    connectOrCreate?: BattleParticipationCreateOrConnectWithoutBattleInput | BattleParticipationCreateOrConnectWithoutBattleInput[]
    createMany?: BattleParticipationCreateManyBattleInputEnvelope
    connect?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
  }

  export type CastUncheckedCreateNestedManyWithoutBattleInput = {
    create?: XOR<CastCreateWithoutBattleInput, CastUncheckedCreateWithoutBattleInput> | CastCreateWithoutBattleInput[] | CastUncheckedCreateWithoutBattleInput[]
    connectOrCreate?: CastCreateOrConnectWithoutBattleInput | CastCreateOrConnectWithoutBattleInput[]
    createMany?: CastCreateManyBattleInputEnvelope
    connect?: CastWhereUniqueInput | CastWhereUniqueInput[]
  }

  export type BattleWinUncheckedCreateNestedManyWithoutBattleInput = {
    create?: XOR<BattleWinCreateWithoutBattleInput, BattleWinUncheckedCreateWithoutBattleInput> | BattleWinCreateWithoutBattleInput[] | BattleWinUncheckedCreateWithoutBattleInput[]
    connectOrCreate?: BattleWinCreateOrConnectWithoutBattleInput | BattleWinCreateOrConnectWithoutBattleInput[]
    createMany?: BattleWinCreateManyBattleInputEnvelope
    connect?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
  }

  export type BattleHistoryUncheckedCreateNestedOneWithoutBattleInput = {
    create?: XOR<BattleHistoryCreateWithoutBattleInput, BattleHistoryUncheckedCreateWithoutBattleInput>
    connectOrCreate?: BattleHistoryCreateOrConnectWithoutBattleInput
    connect?: BattleHistoryWhereUniqueInput
  }

  export type EnumBattleStatusFieldUpdateOperationsInput = {
    set?: $Enums.BattleStatus
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BattleParticipationUpdateManyWithoutBattleNestedInput = {
    create?: XOR<BattleParticipationCreateWithoutBattleInput, BattleParticipationUncheckedCreateWithoutBattleInput> | BattleParticipationCreateWithoutBattleInput[] | BattleParticipationUncheckedCreateWithoutBattleInput[]
    connectOrCreate?: BattleParticipationCreateOrConnectWithoutBattleInput | BattleParticipationCreateOrConnectWithoutBattleInput[]
    upsert?: BattleParticipationUpsertWithWhereUniqueWithoutBattleInput | BattleParticipationUpsertWithWhereUniqueWithoutBattleInput[]
    createMany?: BattleParticipationCreateManyBattleInputEnvelope
    set?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
    disconnect?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
    delete?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
    connect?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
    update?: BattleParticipationUpdateWithWhereUniqueWithoutBattleInput | BattleParticipationUpdateWithWhereUniqueWithoutBattleInput[]
    updateMany?: BattleParticipationUpdateManyWithWhereWithoutBattleInput | BattleParticipationUpdateManyWithWhereWithoutBattleInput[]
    deleteMany?: BattleParticipationScalarWhereInput | BattleParticipationScalarWhereInput[]
  }

  export type CastUpdateManyWithoutBattleNestedInput = {
    create?: XOR<CastCreateWithoutBattleInput, CastUncheckedCreateWithoutBattleInput> | CastCreateWithoutBattleInput[] | CastUncheckedCreateWithoutBattleInput[]
    connectOrCreate?: CastCreateOrConnectWithoutBattleInput | CastCreateOrConnectWithoutBattleInput[]
    upsert?: CastUpsertWithWhereUniqueWithoutBattleInput | CastUpsertWithWhereUniqueWithoutBattleInput[]
    createMany?: CastCreateManyBattleInputEnvelope
    set?: CastWhereUniqueInput | CastWhereUniqueInput[]
    disconnect?: CastWhereUniqueInput | CastWhereUniqueInput[]
    delete?: CastWhereUniqueInput | CastWhereUniqueInput[]
    connect?: CastWhereUniqueInput | CastWhereUniqueInput[]
    update?: CastUpdateWithWhereUniqueWithoutBattleInput | CastUpdateWithWhereUniqueWithoutBattleInput[]
    updateMany?: CastUpdateManyWithWhereWithoutBattleInput | CastUpdateManyWithWhereWithoutBattleInput[]
    deleteMany?: CastScalarWhereInput | CastScalarWhereInput[]
  }

  export type BattleWinUpdateManyWithoutBattleNestedInput = {
    create?: XOR<BattleWinCreateWithoutBattleInput, BattleWinUncheckedCreateWithoutBattleInput> | BattleWinCreateWithoutBattleInput[] | BattleWinUncheckedCreateWithoutBattleInput[]
    connectOrCreate?: BattleWinCreateOrConnectWithoutBattleInput | BattleWinCreateOrConnectWithoutBattleInput[]
    upsert?: BattleWinUpsertWithWhereUniqueWithoutBattleInput | BattleWinUpsertWithWhereUniqueWithoutBattleInput[]
    createMany?: BattleWinCreateManyBattleInputEnvelope
    set?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
    disconnect?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
    delete?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
    connect?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
    update?: BattleWinUpdateWithWhereUniqueWithoutBattleInput | BattleWinUpdateWithWhereUniqueWithoutBattleInput[]
    updateMany?: BattleWinUpdateManyWithWhereWithoutBattleInput | BattleWinUpdateManyWithWhereWithoutBattleInput[]
    deleteMany?: BattleWinScalarWhereInput | BattleWinScalarWhereInput[]
  }

  export type BattleHistoryUpdateOneWithoutBattleNestedInput = {
    create?: XOR<BattleHistoryCreateWithoutBattleInput, BattleHistoryUncheckedCreateWithoutBattleInput>
    connectOrCreate?: BattleHistoryCreateOrConnectWithoutBattleInput
    upsert?: BattleHistoryUpsertWithoutBattleInput
    disconnect?: BattleHistoryWhereInput | boolean
    delete?: BattleHistoryWhereInput | boolean
    connect?: BattleHistoryWhereUniqueInput
    update?: XOR<XOR<BattleHistoryUpdateToOneWithWhereWithoutBattleInput, BattleHistoryUpdateWithoutBattleInput>, BattleHistoryUncheckedUpdateWithoutBattleInput>
  }

  export type BattleParticipationUncheckedUpdateManyWithoutBattleNestedInput = {
    create?: XOR<BattleParticipationCreateWithoutBattleInput, BattleParticipationUncheckedCreateWithoutBattleInput> | BattleParticipationCreateWithoutBattleInput[] | BattleParticipationUncheckedCreateWithoutBattleInput[]
    connectOrCreate?: BattleParticipationCreateOrConnectWithoutBattleInput | BattleParticipationCreateOrConnectWithoutBattleInput[]
    upsert?: BattleParticipationUpsertWithWhereUniqueWithoutBattleInput | BattleParticipationUpsertWithWhereUniqueWithoutBattleInput[]
    createMany?: BattleParticipationCreateManyBattleInputEnvelope
    set?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
    disconnect?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
    delete?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
    connect?: BattleParticipationWhereUniqueInput | BattleParticipationWhereUniqueInput[]
    update?: BattleParticipationUpdateWithWhereUniqueWithoutBattleInput | BattleParticipationUpdateWithWhereUniqueWithoutBattleInput[]
    updateMany?: BattleParticipationUpdateManyWithWhereWithoutBattleInput | BattleParticipationUpdateManyWithWhereWithoutBattleInput[]
    deleteMany?: BattleParticipationScalarWhereInput | BattleParticipationScalarWhereInput[]
  }

  export type CastUncheckedUpdateManyWithoutBattleNestedInput = {
    create?: XOR<CastCreateWithoutBattleInput, CastUncheckedCreateWithoutBattleInput> | CastCreateWithoutBattleInput[] | CastUncheckedCreateWithoutBattleInput[]
    connectOrCreate?: CastCreateOrConnectWithoutBattleInput | CastCreateOrConnectWithoutBattleInput[]
    upsert?: CastUpsertWithWhereUniqueWithoutBattleInput | CastUpsertWithWhereUniqueWithoutBattleInput[]
    createMany?: CastCreateManyBattleInputEnvelope
    set?: CastWhereUniqueInput | CastWhereUniqueInput[]
    disconnect?: CastWhereUniqueInput | CastWhereUniqueInput[]
    delete?: CastWhereUniqueInput | CastWhereUniqueInput[]
    connect?: CastWhereUniqueInput | CastWhereUniqueInput[]
    update?: CastUpdateWithWhereUniqueWithoutBattleInput | CastUpdateWithWhereUniqueWithoutBattleInput[]
    updateMany?: CastUpdateManyWithWhereWithoutBattleInput | CastUpdateManyWithWhereWithoutBattleInput[]
    deleteMany?: CastScalarWhereInput | CastScalarWhereInput[]
  }

  export type BattleWinUncheckedUpdateManyWithoutBattleNestedInput = {
    create?: XOR<BattleWinCreateWithoutBattleInput, BattleWinUncheckedCreateWithoutBattleInput> | BattleWinCreateWithoutBattleInput[] | BattleWinUncheckedCreateWithoutBattleInput[]
    connectOrCreate?: BattleWinCreateOrConnectWithoutBattleInput | BattleWinCreateOrConnectWithoutBattleInput[]
    upsert?: BattleWinUpsertWithWhereUniqueWithoutBattleInput | BattleWinUpsertWithWhereUniqueWithoutBattleInput[]
    createMany?: BattleWinCreateManyBattleInputEnvelope
    set?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
    disconnect?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
    delete?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
    connect?: BattleWinWhereUniqueInput | BattleWinWhereUniqueInput[]
    update?: BattleWinUpdateWithWhereUniqueWithoutBattleInput | BattleWinUpdateWithWhereUniqueWithoutBattleInput[]
    updateMany?: BattleWinUpdateManyWithWhereWithoutBattleInput | BattleWinUpdateManyWithWhereWithoutBattleInput[]
    deleteMany?: BattleWinScalarWhereInput | BattleWinScalarWhereInput[]
  }

  export type BattleHistoryUncheckedUpdateOneWithoutBattleNestedInput = {
    create?: XOR<BattleHistoryCreateWithoutBattleInput, BattleHistoryUncheckedCreateWithoutBattleInput>
    connectOrCreate?: BattleHistoryCreateOrConnectWithoutBattleInput
    upsert?: BattleHistoryUpsertWithoutBattleInput
    disconnect?: BattleHistoryWhereInput | boolean
    delete?: BattleHistoryWhereInput | boolean
    connect?: BattleHistoryWhereUniqueInput
    update?: XOR<XOR<BattleHistoryUpdateToOneWithWhereWithoutBattleInput, BattleHistoryUpdateWithoutBattleInput>, BattleHistoryUncheckedUpdateWithoutBattleInput>
  }

  export type UserCreateNestedOneWithoutParticipationsInput = {
    create?: XOR<UserCreateWithoutParticipationsInput, UserUncheckedCreateWithoutParticipationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutParticipationsInput
    connect?: UserWhereUniqueInput
  }

  export type BattleCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<BattleCreateWithoutParticipantsInput, BattleUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: BattleCreateOrConnectWithoutParticipantsInput
    connect?: BattleWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutParticipationsNestedInput = {
    create?: XOR<UserCreateWithoutParticipationsInput, UserUncheckedCreateWithoutParticipationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutParticipationsInput
    upsert?: UserUpsertWithoutParticipationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutParticipationsInput, UserUpdateWithoutParticipationsInput>, UserUncheckedUpdateWithoutParticipationsInput>
  }

  export type BattleUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<BattleCreateWithoutParticipantsInput, BattleUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: BattleCreateOrConnectWithoutParticipantsInput
    upsert?: BattleUpsertWithoutParticipantsInput
    connect?: BattleWhereUniqueInput
    update?: XOR<XOR<BattleUpdateToOneWithWhereWithoutParticipantsInput, BattleUpdateWithoutParticipantsInput>, BattleUncheckedUpdateWithoutParticipantsInput>
  }

  export type UserCreateNestedOneWithoutCastsInput = {
    create?: XOR<UserCreateWithoutCastsInput, UserUncheckedCreateWithoutCastsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCastsInput
    connect?: UserWhereUniqueInput
  }

  export type BattleCreateNestedOneWithoutCastsInput = {
    create?: XOR<BattleCreateWithoutCastsInput, BattleUncheckedCreateWithoutCastsInput>
    connectOrCreate?: BattleCreateOrConnectWithoutCastsInput
    connect?: BattleWhereUniqueInput
  }

  export type EnumCastSideFieldUpdateOperationsInput = {
    set?: $Enums.CastSide
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutCastsNestedInput = {
    create?: XOR<UserCreateWithoutCastsInput, UserUncheckedCreateWithoutCastsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCastsInput
    upsert?: UserUpsertWithoutCastsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCastsInput, UserUpdateWithoutCastsInput>, UserUncheckedUpdateWithoutCastsInput>
  }

  export type BattleUpdateOneRequiredWithoutCastsNestedInput = {
    create?: XOR<BattleCreateWithoutCastsInput, BattleUncheckedCreateWithoutCastsInput>
    connectOrCreate?: BattleCreateOrConnectWithoutCastsInput
    upsert?: BattleUpsertWithoutCastsInput
    connect?: BattleWhereUniqueInput
    update?: XOR<XOR<BattleUpdateToOneWithWhereWithoutCastsInput, BattleUpdateWithoutCastsInput>, BattleUncheckedUpdateWithoutCastsInput>
  }

  export type BattleCreateNestedOneWithoutWinnersInput = {
    create?: XOR<BattleCreateWithoutWinnersInput, BattleUncheckedCreateWithoutWinnersInput>
    connectOrCreate?: BattleCreateOrConnectWithoutWinnersInput
    connect?: BattleWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWinsInput = {
    create?: XOR<UserCreateWithoutWinsInput, UserUncheckedCreateWithoutWinsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWinsInput
    connect?: UserWhereUniqueInput
  }

  export type BattleUpdateOneRequiredWithoutWinnersNestedInput = {
    create?: XOR<BattleCreateWithoutWinnersInput, BattleUncheckedCreateWithoutWinnersInput>
    connectOrCreate?: BattleCreateOrConnectWithoutWinnersInput
    upsert?: BattleUpsertWithoutWinnersInput
    connect?: BattleWhereUniqueInput
    update?: XOR<XOR<BattleUpdateToOneWithWhereWithoutWinnersInput, BattleUpdateWithoutWinnersInput>, BattleUncheckedUpdateWithoutWinnersInput>
  }

  export type UserUpdateOneRequiredWithoutWinsNestedInput = {
    create?: XOR<UserCreateWithoutWinsInput, UserUncheckedCreateWithoutWinsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWinsInput
    upsert?: UserUpsertWithoutWinsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWinsInput, UserUpdateWithoutWinsInput>, UserUncheckedUpdateWithoutWinsInput>
  }

  export type BattleCreateNestedOneWithoutHistoryInput = {
    create?: XOR<BattleCreateWithoutHistoryInput, BattleUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: BattleCreateOrConnectWithoutHistoryInput
    connect?: BattleWhereUniqueInput
  }

  export type BattleUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<BattleCreateWithoutHistoryInput, BattleUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: BattleCreateOrConnectWithoutHistoryInput
    upsert?: BattleUpsertWithoutHistoryInput
    connect?: BattleWhereUniqueInput
    update?: XOR<XOR<BattleUpdateToOneWithWhereWithoutHistoryInput, BattleUpdateWithoutHistoryInput>, BattleUncheckedUpdateWithoutHistoryInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumBattleStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BattleStatus | EnumBattleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BattleStatus[] | ListEnumBattleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BattleStatus[] | ListEnumBattleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBattleStatusFilter<$PrismaModel> | $Enums.BattleStatus
  }

  export type NestedEnumBattleStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BattleStatus | EnumBattleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BattleStatus[] | ListEnumBattleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BattleStatus[] | ListEnumBattleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBattleStatusWithAggregatesFilter<$PrismaModel> | $Enums.BattleStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBattleStatusFilter<$PrismaModel>
    _max?: NestedEnumBattleStatusFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumCastSideFilter<$PrismaModel = never> = {
    equals?: $Enums.CastSide | EnumCastSideFieldRefInput<$PrismaModel>
    in?: $Enums.CastSide[] | ListEnumCastSideFieldRefInput<$PrismaModel>
    notIn?: $Enums.CastSide[] | ListEnumCastSideFieldRefInput<$PrismaModel>
    not?: NestedEnumCastSideFilter<$PrismaModel> | $Enums.CastSide
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumCastSideWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CastSide | EnumCastSideFieldRefInput<$PrismaModel>
    in?: $Enums.CastSide[] | ListEnumCastSideFieldRefInput<$PrismaModel>
    notIn?: $Enums.CastSide[] | ListEnumCastSideFieldRefInput<$PrismaModel>
    not?: NestedEnumCastSideWithAggregatesFilter<$PrismaModel> | $Enums.CastSide
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCastSideFilter<$PrismaModel>
    _max?: NestedEnumCastSideFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BattleParticipationCreateWithoutUserInput = {
    id?: string
    joinedAt?: Date | string
    battle: BattleCreateNestedOneWithoutParticipantsInput
  }

  export type BattleParticipationUncheckedCreateWithoutUserInput = {
    id?: string
    battleId: string
    joinedAt?: Date | string
  }

  export type BattleParticipationCreateOrConnectWithoutUserInput = {
    where: BattleParticipationWhereUniqueInput
    create: XOR<BattleParticipationCreateWithoutUserInput, BattleParticipationUncheckedCreateWithoutUserInput>
  }

  export type BattleParticipationCreateManyUserInputEnvelope = {
    data: BattleParticipationCreateManyUserInput | BattleParticipationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BattleWinCreateWithoutUserInput = {
    id?: string
    position: number
    prize?: string | null
    battle: BattleCreateNestedOneWithoutWinnersInput
  }

  export type BattleWinUncheckedCreateWithoutUserInput = {
    id?: string
    battleId: string
    position: number
    prize?: string | null
  }

  export type BattleWinCreateOrConnectWithoutUserInput = {
    where: BattleWinWhereUniqueInput
    create: XOR<BattleWinCreateWithoutUserInput, BattleWinUncheckedCreateWithoutUserInput>
  }

  export type BattleWinCreateManyUserInputEnvelope = {
    data: BattleWinCreateManyUserInput | BattleWinCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CastCreateWithoutUserInput = {
    id?: string
    content: string
    side: $Enums.CastSide
    qualityScore?: number | null
    relevanceScore?: number | null
    isAppropriate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    battle: BattleCreateNestedOneWithoutCastsInput
  }

  export type CastUncheckedCreateWithoutUserInput = {
    id?: string
    battleId: string
    content: string
    side: $Enums.CastSide
    qualityScore?: number | null
    relevanceScore?: number | null
    isAppropriate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CastCreateOrConnectWithoutUserInput = {
    where: CastWhereUniqueInput
    create: XOR<CastCreateWithoutUserInput, CastUncheckedCreateWithoutUserInput>
  }

  export type CastCreateManyUserInputEnvelope = {
    data: CastCreateManyUserInput | CastCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BattleParticipationUpsertWithWhereUniqueWithoutUserInput = {
    where: BattleParticipationWhereUniqueInput
    update: XOR<BattleParticipationUpdateWithoutUserInput, BattleParticipationUncheckedUpdateWithoutUserInput>
    create: XOR<BattleParticipationCreateWithoutUserInput, BattleParticipationUncheckedCreateWithoutUserInput>
  }

  export type BattleParticipationUpdateWithWhereUniqueWithoutUserInput = {
    where: BattleParticipationWhereUniqueInput
    data: XOR<BattleParticipationUpdateWithoutUserInput, BattleParticipationUncheckedUpdateWithoutUserInput>
  }

  export type BattleParticipationUpdateManyWithWhereWithoutUserInput = {
    where: BattleParticipationScalarWhereInput
    data: XOR<BattleParticipationUpdateManyMutationInput, BattleParticipationUncheckedUpdateManyWithoutUserInput>
  }

  export type BattleParticipationScalarWhereInput = {
    AND?: BattleParticipationScalarWhereInput | BattleParticipationScalarWhereInput[]
    OR?: BattleParticipationScalarWhereInput[]
    NOT?: BattleParticipationScalarWhereInput | BattleParticipationScalarWhereInput[]
    id?: StringFilter<"BattleParticipation"> | string
    userId?: StringFilter<"BattleParticipation"> | string
    battleId?: StringFilter<"BattleParticipation"> | string
    joinedAt?: DateTimeFilter<"BattleParticipation"> | Date | string
  }

  export type BattleWinUpsertWithWhereUniqueWithoutUserInput = {
    where: BattleWinWhereUniqueInput
    update: XOR<BattleWinUpdateWithoutUserInput, BattleWinUncheckedUpdateWithoutUserInput>
    create: XOR<BattleWinCreateWithoutUserInput, BattleWinUncheckedCreateWithoutUserInput>
  }

  export type BattleWinUpdateWithWhereUniqueWithoutUserInput = {
    where: BattleWinWhereUniqueInput
    data: XOR<BattleWinUpdateWithoutUserInput, BattleWinUncheckedUpdateWithoutUserInput>
  }

  export type BattleWinUpdateManyWithWhereWithoutUserInput = {
    where: BattleWinScalarWhereInput
    data: XOR<BattleWinUpdateManyMutationInput, BattleWinUncheckedUpdateManyWithoutUserInput>
  }

  export type BattleWinScalarWhereInput = {
    AND?: BattleWinScalarWhereInput | BattleWinScalarWhereInput[]
    OR?: BattleWinScalarWhereInput[]
    NOT?: BattleWinScalarWhereInput | BattleWinScalarWhereInput[]
    id?: StringFilter<"BattleWin"> | string
    battleId?: StringFilter<"BattleWin"> | string
    userId?: StringFilter<"BattleWin"> | string
    position?: IntFilter<"BattleWin"> | number
    prize?: StringNullableFilter<"BattleWin"> | string | null
  }

  export type CastUpsertWithWhereUniqueWithoutUserInput = {
    where: CastWhereUniqueInput
    update: XOR<CastUpdateWithoutUserInput, CastUncheckedUpdateWithoutUserInput>
    create: XOR<CastCreateWithoutUserInput, CastUncheckedCreateWithoutUserInput>
  }

  export type CastUpdateWithWhereUniqueWithoutUserInput = {
    where: CastWhereUniqueInput
    data: XOR<CastUpdateWithoutUserInput, CastUncheckedUpdateWithoutUserInput>
  }

  export type CastUpdateManyWithWhereWithoutUserInput = {
    where: CastScalarWhereInput
    data: XOR<CastUpdateManyMutationInput, CastUncheckedUpdateManyWithoutUserInput>
  }

  export type CastScalarWhereInput = {
    AND?: CastScalarWhereInput | CastScalarWhereInput[]
    OR?: CastScalarWhereInput[]
    NOT?: CastScalarWhereInput | CastScalarWhereInput[]
    id?: StringFilter<"Cast"> | string
    userId?: StringFilter<"Cast"> | string
    battleId?: StringFilter<"Cast"> | string
    content?: StringFilter<"Cast"> | string
    side?: EnumCastSideFilter<"Cast"> | $Enums.CastSide
    qualityScore?: IntNullableFilter<"Cast"> | number | null
    relevanceScore?: IntNullableFilter<"Cast"> | number | null
    isAppropriate?: BoolFilter<"Cast"> | boolean
    createdAt?: DateTimeFilter<"Cast"> | Date | string
    updatedAt?: DateTimeFilter<"Cast"> | Date | string
  }

  export type BattleParticipationCreateWithoutBattleInput = {
    id?: string
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutParticipationsInput
  }

  export type BattleParticipationUncheckedCreateWithoutBattleInput = {
    id?: string
    userId: string
    joinedAt?: Date | string
  }

  export type BattleParticipationCreateOrConnectWithoutBattleInput = {
    where: BattleParticipationWhereUniqueInput
    create: XOR<BattleParticipationCreateWithoutBattleInput, BattleParticipationUncheckedCreateWithoutBattleInput>
  }

  export type BattleParticipationCreateManyBattleInputEnvelope = {
    data: BattleParticipationCreateManyBattleInput | BattleParticipationCreateManyBattleInput[]
    skipDuplicates?: boolean
  }

  export type CastCreateWithoutBattleInput = {
    id?: string
    content: string
    side: $Enums.CastSide
    qualityScore?: number | null
    relevanceScore?: number | null
    isAppropriate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCastsInput
  }

  export type CastUncheckedCreateWithoutBattleInput = {
    id?: string
    userId: string
    content: string
    side: $Enums.CastSide
    qualityScore?: number | null
    relevanceScore?: number | null
    isAppropriate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CastCreateOrConnectWithoutBattleInput = {
    where: CastWhereUniqueInput
    create: XOR<CastCreateWithoutBattleInput, CastUncheckedCreateWithoutBattleInput>
  }

  export type CastCreateManyBattleInputEnvelope = {
    data: CastCreateManyBattleInput | CastCreateManyBattleInput[]
    skipDuplicates?: boolean
  }

  export type BattleWinCreateWithoutBattleInput = {
    id?: string
    position: number
    prize?: string | null
    user: UserCreateNestedOneWithoutWinsInput
  }

  export type BattleWinUncheckedCreateWithoutBattleInput = {
    id?: string
    userId: string
    position: number
    prize?: string | null
  }

  export type BattleWinCreateOrConnectWithoutBattleInput = {
    where: BattleWinWhereUniqueInput
    create: XOR<BattleWinCreateWithoutBattleInput, BattleWinUncheckedCreateWithoutBattleInput>
  }

  export type BattleWinCreateManyBattleInputEnvelope = {
    data: BattleWinCreateManyBattleInput | BattleWinCreateManyBattleInput[]
    skipDuplicates?: boolean
  }

  export type BattleHistoryCreateWithoutBattleInput = {
    id?: string
    completedAt?: Date | string
    totalParticipants: number
    totalCasts: number
    winnerAddress?: string | null
  }

  export type BattleHistoryUncheckedCreateWithoutBattleInput = {
    id?: string
    completedAt?: Date | string
    totalParticipants: number
    totalCasts: number
    winnerAddress?: string | null
  }

  export type BattleHistoryCreateOrConnectWithoutBattleInput = {
    where: BattleHistoryWhereUniqueInput
    create: XOR<BattleHistoryCreateWithoutBattleInput, BattleHistoryUncheckedCreateWithoutBattleInput>
  }

  export type BattleParticipationUpsertWithWhereUniqueWithoutBattleInput = {
    where: BattleParticipationWhereUniqueInput
    update: XOR<BattleParticipationUpdateWithoutBattleInput, BattleParticipationUncheckedUpdateWithoutBattleInput>
    create: XOR<BattleParticipationCreateWithoutBattleInput, BattleParticipationUncheckedCreateWithoutBattleInput>
  }

  export type BattleParticipationUpdateWithWhereUniqueWithoutBattleInput = {
    where: BattleParticipationWhereUniqueInput
    data: XOR<BattleParticipationUpdateWithoutBattleInput, BattleParticipationUncheckedUpdateWithoutBattleInput>
  }

  export type BattleParticipationUpdateManyWithWhereWithoutBattleInput = {
    where: BattleParticipationScalarWhereInput
    data: XOR<BattleParticipationUpdateManyMutationInput, BattleParticipationUncheckedUpdateManyWithoutBattleInput>
  }

  export type CastUpsertWithWhereUniqueWithoutBattleInput = {
    where: CastWhereUniqueInput
    update: XOR<CastUpdateWithoutBattleInput, CastUncheckedUpdateWithoutBattleInput>
    create: XOR<CastCreateWithoutBattleInput, CastUncheckedCreateWithoutBattleInput>
  }

  export type CastUpdateWithWhereUniqueWithoutBattleInput = {
    where: CastWhereUniqueInput
    data: XOR<CastUpdateWithoutBattleInput, CastUncheckedUpdateWithoutBattleInput>
  }

  export type CastUpdateManyWithWhereWithoutBattleInput = {
    where: CastScalarWhereInput
    data: XOR<CastUpdateManyMutationInput, CastUncheckedUpdateManyWithoutBattleInput>
  }

  export type BattleWinUpsertWithWhereUniqueWithoutBattleInput = {
    where: BattleWinWhereUniqueInput
    update: XOR<BattleWinUpdateWithoutBattleInput, BattleWinUncheckedUpdateWithoutBattleInput>
    create: XOR<BattleWinCreateWithoutBattleInput, BattleWinUncheckedCreateWithoutBattleInput>
  }

  export type BattleWinUpdateWithWhereUniqueWithoutBattleInput = {
    where: BattleWinWhereUniqueInput
    data: XOR<BattleWinUpdateWithoutBattleInput, BattleWinUncheckedUpdateWithoutBattleInput>
  }

  export type BattleWinUpdateManyWithWhereWithoutBattleInput = {
    where: BattleWinScalarWhereInput
    data: XOR<BattleWinUpdateManyMutationInput, BattleWinUncheckedUpdateManyWithoutBattleInput>
  }

  export type BattleHistoryUpsertWithoutBattleInput = {
    update: XOR<BattleHistoryUpdateWithoutBattleInput, BattleHistoryUncheckedUpdateWithoutBattleInput>
    create: XOR<BattleHistoryCreateWithoutBattleInput, BattleHistoryUncheckedCreateWithoutBattleInput>
    where?: BattleHistoryWhereInput
  }

  export type BattleHistoryUpdateToOneWithWhereWithoutBattleInput = {
    where?: BattleHistoryWhereInput
    data: XOR<BattleHistoryUpdateWithoutBattleInput, BattleHistoryUncheckedUpdateWithoutBattleInput>
  }

  export type BattleHistoryUpdateWithoutBattleInput = {
    id?: StringFieldUpdateOperationsInput | string
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalParticipants?: IntFieldUpdateOperationsInput | number
    totalCasts?: IntFieldUpdateOperationsInput | number
    winnerAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BattleHistoryUncheckedUpdateWithoutBattleInput = {
    id?: StringFieldUpdateOperationsInput | string
    completedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    totalParticipants?: IntFieldUpdateOperationsInput | number
    totalCasts?: IntFieldUpdateOperationsInput | number
    winnerAddress?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateWithoutParticipationsInput = {
    id?: string
    address: string
    username?: string | null
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    wins?: BattleWinCreateNestedManyWithoutUserInput
    casts?: CastCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutParticipationsInput = {
    id?: string
    address: string
    username?: string | null
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    wins?: BattleWinUncheckedCreateNestedManyWithoutUserInput
    casts?: CastUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutParticipationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutParticipationsInput, UserUncheckedCreateWithoutParticipationsInput>
  }

  export type BattleCreateWithoutParticipantsInput = {
    id?: string
    title: string
    description: string
    category: string
    source: string
    sourceUrl?: string | null
    status?: $Enums.BattleStatus
    startTime: Date | string
    endTime: Date | string
    durationHours: number
    maxParticipants?: number
    debatePoints: JsonNullValueInput | InputJsonValue
    overallScore?: number | null
    balanceScore?: number | null
    complexity?: string | null
    controversyLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    casts?: CastCreateNestedManyWithoutBattleInput
    winners?: BattleWinCreateNestedManyWithoutBattleInput
    history?: BattleHistoryCreateNestedOneWithoutBattleInput
  }

  export type BattleUncheckedCreateWithoutParticipantsInput = {
    id?: string
    title: string
    description: string
    category: string
    source: string
    sourceUrl?: string | null
    status?: $Enums.BattleStatus
    startTime: Date | string
    endTime: Date | string
    durationHours: number
    maxParticipants?: number
    debatePoints: JsonNullValueInput | InputJsonValue
    overallScore?: number | null
    balanceScore?: number | null
    complexity?: string | null
    controversyLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    casts?: CastUncheckedCreateNestedManyWithoutBattleInput
    winners?: BattleWinUncheckedCreateNestedManyWithoutBattleInput
    history?: BattleHistoryUncheckedCreateNestedOneWithoutBattleInput
  }

  export type BattleCreateOrConnectWithoutParticipantsInput = {
    where: BattleWhereUniqueInput
    create: XOR<BattleCreateWithoutParticipantsInput, BattleUncheckedCreateWithoutParticipantsInput>
  }

  export type UserUpsertWithoutParticipationsInput = {
    update: XOR<UserUpdateWithoutParticipationsInput, UserUncheckedUpdateWithoutParticipationsInput>
    create: XOR<UserCreateWithoutParticipationsInput, UserUncheckedCreateWithoutParticipationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutParticipationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutParticipationsInput, UserUncheckedUpdateWithoutParticipationsInput>
  }

  export type UserUpdateWithoutParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wins?: BattleWinUpdateManyWithoutUserNestedInput
    casts?: CastUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutParticipationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wins?: BattleWinUncheckedUpdateManyWithoutUserNestedInput
    casts?: CastUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BattleUpsertWithoutParticipantsInput = {
    update: XOR<BattleUpdateWithoutParticipantsInput, BattleUncheckedUpdateWithoutParticipantsInput>
    create: XOR<BattleCreateWithoutParticipantsInput, BattleUncheckedCreateWithoutParticipantsInput>
    where?: BattleWhereInput
  }

  export type BattleUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: BattleWhereInput
    data: XOR<BattleUpdateWithoutParticipantsInput, BattleUncheckedUpdateWithoutParticipantsInput>
  }

  export type BattleUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationHours?: FloatFieldUpdateOperationsInput | number
    maxParticipants?: IntFieldUpdateOperationsInput | number
    debatePoints?: JsonNullValueInput | InputJsonValue
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: NullableStringFieldUpdateOperationsInput | string | null
    controversyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    casts?: CastUpdateManyWithoutBattleNestedInput
    winners?: BattleWinUpdateManyWithoutBattleNestedInput
    history?: BattleHistoryUpdateOneWithoutBattleNestedInput
  }

  export type BattleUncheckedUpdateWithoutParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationHours?: FloatFieldUpdateOperationsInput | number
    maxParticipants?: IntFieldUpdateOperationsInput | number
    debatePoints?: JsonNullValueInput | InputJsonValue
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: NullableStringFieldUpdateOperationsInput | string | null
    controversyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    casts?: CastUncheckedUpdateManyWithoutBattleNestedInput
    winners?: BattleWinUncheckedUpdateManyWithoutBattleNestedInput
    history?: BattleHistoryUncheckedUpdateOneWithoutBattleNestedInput
  }

  export type UserCreateWithoutCastsInput = {
    id?: string
    address: string
    username?: string | null
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    participations?: BattleParticipationCreateNestedManyWithoutUserInput
    wins?: BattleWinCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCastsInput = {
    id?: string
    address: string
    username?: string | null
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    participations?: BattleParticipationUncheckedCreateNestedManyWithoutUserInput
    wins?: BattleWinUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCastsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCastsInput, UserUncheckedCreateWithoutCastsInput>
  }

  export type BattleCreateWithoutCastsInput = {
    id?: string
    title: string
    description: string
    category: string
    source: string
    sourceUrl?: string | null
    status?: $Enums.BattleStatus
    startTime: Date | string
    endTime: Date | string
    durationHours: number
    maxParticipants?: number
    debatePoints: JsonNullValueInput | InputJsonValue
    overallScore?: number | null
    balanceScore?: number | null
    complexity?: string | null
    controversyLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: BattleParticipationCreateNestedManyWithoutBattleInput
    winners?: BattleWinCreateNestedManyWithoutBattleInput
    history?: BattleHistoryCreateNestedOneWithoutBattleInput
  }

  export type BattleUncheckedCreateWithoutCastsInput = {
    id?: string
    title: string
    description: string
    category: string
    source: string
    sourceUrl?: string | null
    status?: $Enums.BattleStatus
    startTime: Date | string
    endTime: Date | string
    durationHours: number
    maxParticipants?: number
    debatePoints: JsonNullValueInput | InputJsonValue
    overallScore?: number | null
    balanceScore?: number | null
    complexity?: string | null
    controversyLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: BattleParticipationUncheckedCreateNestedManyWithoutBattleInput
    winners?: BattleWinUncheckedCreateNestedManyWithoutBattleInput
    history?: BattleHistoryUncheckedCreateNestedOneWithoutBattleInput
  }

  export type BattleCreateOrConnectWithoutCastsInput = {
    where: BattleWhereUniqueInput
    create: XOR<BattleCreateWithoutCastsInput, BattleUncheckedCreateWithoutCastsInput>
  }

  export type UserUpsertWithoutCastsInput = {
    update: XOR<UserUpdateWithoutCastsInput, UserUncheckedUpdateWithoutCastsInput>
    create: XOR<UserCreateWithoutCastsInput, UserUncheckedCreateWithoutCastsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCastsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCastsInput, UserUncheckedUpdateWithoutCastsInput>
  }

  export type UserUpdateWithoutCastsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participations?: BattleParticipationUpdateManyWithoutUserNestedInput
    wins?: BattleWinUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCastsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participations?: BattleParticipationUncheckedUpdateManyWithoutUserNestedInput
    wins?: BattleWinUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BattleUpsertWithoutCastsInput = {
    update: XOR<BattleUpdateWithoutCastsInput, BattleUncheckedUpdateWithoutCastsInput>
    create: XOR<BattleCreateWithoutCastsInput, BattleUncheckedCreateWithoutCastsInput>
    where?: BattleWhereInput
  }

  export type BattleUpdateToOneWithWhereWithoutCastsInput = {
    where?: BattleWhereInput
    data: XOR<BattleUpdateWithoutCastsInput, BattleUncheckedUpdateWithoutCastsInput>
  }

  export type BattleUpdateWithoutCastsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationHours?: FloatFieldUpdateOperationsInput | number
    maxParticipants?: IntFieldUpdateOperationsInput | number
    debatePoints?: JsonNullValueInput | InputJsonValue
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: NullableStringFieldUpdateOperationsInput | string | null
    controversyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: BattleParticipationUpdateManyWithoutBattleNestedInput
    winners?: BattleWinUpdateManyWithoutBattleNestedInput
    history?: BattleHistoryUpdateOneWithoutBattleNestedInput
  }

  export type BattleUncheckedUpdateWithoutCastsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationHours?: FloatFieldUpdateOperationsInput | number
    maxParticipants?: IntFieldUpdateOperationsInput | number
    debatePoints?: JsonNullValueInput | InputJsonValue
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: NullableStringFieldUpdateOperationsInput | string | null
    controversyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: BattleParticipationUncheckedUpdateManyWithoutBattleNestedInput
    winners?: BattleWinUncheckedUpdateManyWithoutBattleNestedInput
    history?: BattleHistoryUncheckedUpdateOneWithoutBattleNestedInput
  }

  export type BattleCreateWithoutWinnersInput = {
    id?: string
    title: string
    description: string
    category: string
    source: string
    sourceUrl?: string | null
    status?: $Enums.BattleStatus
    startTime: Date | string
    endTime: Date | string
    durationHours: number
    maxParticipants?: number
    debatePoints: JsonNullValueInput | InputJsonValue
    overallScore?: number | null
    balanceScore?: number | null
    complexity?: string | null
    controversyLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: BattleParticipationCreateNestedManyWithoutBattleInput
    casts?: CastCreateNestedManyWithoutBattleInput
    history?: BattleHistoryCreateNestedOneWithoutBattleInput
  }

  export type BattleUncheckedCreateWithoutWinnersInput = {
    id?: string
    title: string
    description: string
    category: string
    source: string
    sourceUrl?: string | null
    status?: $Enums.BattleStatus
    startTime: Date | string
    endTime: Date | string
    durationHours: number
    maxParticipants?: number
    debatePoints: JsonNullValueInput | InputJsonValue
    overallScore?: number | null
    balanceScore?: number | null
    complexity?: string | null
    controversyLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: BattleParticipationUncheckedCreateNestedManyWithoutBattleInput
    casts?: CastUncheckedCreateNestedManyWithoutBattleInput
    history?: BattleHistoryUncheckedCreateNestedOneWithoutBattleInput
  }

  export type BattleCreateOrConnectWithoutWinnersInput = {
    where: BattleWhereUniqueInput
    create: XOR<BattleCreateWithoutWinnersInput, BattleUncheckedCreateWithoutWinnersInput>
  }

  export type UserCreateWithoutWinsInput = {
    id?: string
    address: string
    username?: string | null
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    participations?: BattleParticipationCreateNestedManyWithoutUserInput
    casts?: CastCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWinsInput = {
    id?: string
    address: string
    username?: string | null
    points?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    participations?: BattleParticipationUncheckedCreateNestedManyWithoutUserInput
    casts?: CastUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWinsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWinsInput, UserUncheckedCreateWithoutWinsInput>
  }

  export type BattleUpsertWithoutWinnersInput = {
    update: XOR<BattleUpdateWithoutWinnersInput, BattleUncheckedUpdateWithoutWinnersInput>
    create: XOR<BattleCreateWithoutWinnersInput, BattleUncheckedCreateWithoutWinnersInput>
    where?: BattleWhereInput
  }

  export type BattleUpdateToOneWithWhereWithoutWinnersInput = {
    where?: BattleWhereInput
    data: XOR<BattleUpdateWithoutWinnersInput, BattleUncheckedUpdateWithoutWinnersInput>
  }

  export type BattleUpdateWithoutWinnersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationHours?: FloatFieldUpdateOperationsInput | number
    maxParticipants?: IntFieldUpdateOperationsInput | number
    debatePoints?: JsonNullValueInput | InputJsonValue
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: NullableStringFieldUpdateOperationsInput | string | null
    controversyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: BattleParticipationUpdateManyWithoutBattleNestedInput
    casts?: CastUpdateManyWithoutBattleNestedInput
    history?: BattleHistoryUpdateOneWithoutBattleNestedInput
  }

  export type BattleUncheckedUpdateWithoutWinnersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationHours?: FloatFieldUpdateOperationsInput | number
    maxParticipants?: IntFieldUpdateOperationsInput | number
    debatePoints?: JsonNullValueInput | InputJsonValue
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: NullableStringFieldUpdateOperationsInput | string | null
    controversyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: BattleParticipationUncheckedUpdateManyWithoutBattleNestedInput
    casts?: CastUncheckedUpdateManyWithoutBattleNestedInput
    history?: BattleHistoryUncheckedUpdateOneWithoutBattleNestedInput
  }

  export type UserUpsertWithoutWinsInput = {
    update: XOR<UserUpdateWithoutWinsInput, UserUncheckedUpdateWithoutWinsInput>
    create: XOR<UserCreateWithoutWinsInput, UserUncheckedCreateWithoutWinsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWinsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWinsInput, UserUncheckedUpdateWithoutWinsInput>
  }

  export type UserUpdateWithoutWinsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participations?: BattleParticipationUpdateManyWithoutUserNestedInput
    casts?: CastUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWinsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    points?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participations?: BattleParticipationUncheckedUpdateManyWithoutUserNestedInput
    casts?: CastUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BattleCreateWithoutHistoryInput = {
    id?: string
    title: string
    description: string
    category: string
    source: string
    sourceUrl?: string | null
    status?: $Enums.BattleStatus
    startTime: Date | string
    endTime: Date | string
    durationHours: number
    maxParticipants?: number
    debatePoints: JsonNullValueInput | InputJsonValue
    overallScore?: number | null
    balanceScore?: number | null
    complexity?: string | null
    controversyLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: BattleParticipationCreateNestedManyWithoutBattleInput
    casts?: CastCreateNestedManyWithoutBattleInput
    winners?: BattleWinCreateNestedManyWithoutBattleInput
  }

  export type BattleUncheckedCreateWithoutHistoryInput = {
    id?: string
    title: string
    description: string
    category: string
    source: string
    sourceUrl?: string | null
    status?: $Enums.BattleStatus
    startTime: Date | string
    endTime: Date | string
    durationHours: number
    maxParticipants?: number
    debatePoints: JsonNullValueInput | InputJsonValue
    overallScore?: number | null
    balanceScore?: number | null
    complexity?: string | null
    controversyLevel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    participants?: BattleParticipationUncheckedCreateNestedManyWithoutBattleInput
    casts?: CastUncheckedCreateNestedManyWithoutBattleInput
    winners?: BattleWinUncheckedCreateNestedManyWithoutBattleInput
  }

  export type BattleCreateOrConnectWithoutHistoryInput = {
    where: BattleWhereUniqueInput
    create: XOR<BattleCreateWithoutHistoryInput, BattleUncheckedCreateWithoutHistoryInput>
  }

  export type BattleUpsertWithoutHistoryInput = {
    update: XOR<BattleUpdateWithoutHistoryInput, BattleUncheckedUpdateWithoutHistoryInput>
    create: XOR<BattleCreateWithoutHistoryInput, BattleUncheckedCreateWithoutHistoryInput>
    where?: BattleWhereInput
  }

  export type BattleUpdateToOneWithWhereWithoutHistoryInput = {
    where?: BattleWhereInput
    data: XOR<BattleUpdateWithoutHistoryInput, BattleUncheckedUpdateWithoutHistoryInput>
  }

  export type BattleUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationHours?: FloatFieldUpdateOperationsInput | number
    maxParticipants?: IntFieldUpdateOperationsInput | number
    debatePoints?: JsonNullValueInput | InputJsonValue
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: NullableStringFieldUpdateOperationsInput | string | null
    controversyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: BattleParticipationUpdateManyWithoutBattleNestedInput
    casts?: CastUpdateManyWithoutBattleNestedInput
    winners?: BattleWinUpdateManyWithoutBattleNestedInput
  }

  export type BattleUncheckedUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    sourceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBattleStatusFieldUpdateOperationsInput | $Enums.BattleStatus
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    durationHours?: FloatFieldUpdateOperationsInput | number
    maxParticipants?: IntFieldUpdateOperationsInput | number
    debatePoints?: JsonNullValueInput | InputJsonValue
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    balanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    complexity?: NullableStringFieldUpdateOperationsInput | string | null
    controversyLevel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: BattleParticipationUncheckedUpdateManyWithoutBattleNestedInput
    casts?: CastUncheckedUpdateManyWithoutBattleNestedInput
    winners?: BattleWinUncheckedUpdateManyWithoutBattleNestedInput
  }

  export type BattleParticipationCreateManyUserInput = {
    id?: string
    battleId: string
    joinedAt?: Date | string
  }

  export type BattleWinCreateManyUserInput = {
    id?: string
    battleId: string
    position: number
    prize?: string | null
  }

  export type CastCreateManyUserInput = {
    id?: string
    battleId: string
    content: string
    side: $Enums.CastSide
    qualityScore?: number | null
    relevanceScore?: number | null
    isAppropriate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BattleParticipationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    battle?: BattleUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type BattleParticipationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BattleParticipationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BattleWinUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    prize?: NullableStringFieldUpdateOperationsInput | string | null
    battle?: BattleUpdateOneRequiredWithoutWinnersNestedInput
  }

  export type BattleWinUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    prize?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BattleWinUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    prize?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CastUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    side?: EnumCastSideFieldUpdateOperationsInput | $Enums.CastSide
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    relevanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    isAppropriate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    battle?: BattleUpdateOneRequiredWithoutCastsNestedInput
  }

  export type CastUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    side?: EnumCastSideFieldUpdateOperationsInput | $Enums.CastSide
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    relevanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    isAppropriate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CastUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    battleId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    side?: EnumCastSideFieldUpdateOperationsInput | $Enums.CastSide
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    relevanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    isAppropriate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BattleParticipationCreateManyBattleInput = {
    id?: string
    userId: string
    joinedAt?: Date | string
  }

  export type CastCreateManyBattleInput = {
    id?: string
    userId: string
    content: string
    side: $Enums.CastSide
    qualityScore?: number | null
    relevanceScore?: number | null
    isAppropriate?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BattleWinCreateManyBattleInput = {
    id?: string
    userId: string
    position: number
    prize?: string | null
  }

  export type BattleParticipationUpdateWithoutBattleInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutParticipationsNestedInput
  }

  export type BattleParticipationUncheckedUpdateWithoutBattleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BattleParticipationUncheckedUpdateManyWithoutBattleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CastUpdateWithoutBattleInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    side?: EnumCastSideFieldUpdateOperationsInput | $Enums.CastSide
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    relevanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    isAppropriate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCastsNestedInput
  }

  export type CastUncheckedUpdateWithoutBattleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    side?: EnumCastSideFieldUpdateOperationsInput | $Enums.CastSide
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    relevanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    isAppropriate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CastUncheckedUpdateManyWithoutBattleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    side?: EnumCastSideFieldUpdateOperationsInput | $Enums.CastSide
    qualityScore?: NullableIntFieldUpdateOperationsInput | number | null
    relevanceScore?: NullableIntFieldUpdateOperationsInput | number | null
    isAppropriate?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BattleWinUpdateWithoutBattleInput = {
    id?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    prize?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutWinsNestedInput
  }

  export type BattleWinUncheckedUpdateWithoutBattleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    prize?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BattleWinUncheckedUpdateManyWithoutBattleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    prize?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BattleCountOutputTypeDefaultArgs instead
     */
    export type BattleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BattleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BattleDefaultArgs instead
     */
    export type BattleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BattleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BattleParticipationDefaultArgs instead
     */
    export type BattleParticipationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BattleParticipationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CastDefaultArgs instead
     */
    export type CastArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CastDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BattleWinDefaultArgs instead
     */
    export type BattleWinArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BattleWinDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BattleHistoryDefaultArgs instead
     */
    export type BattleHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BattleHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SystemConfigDefaultArgs instead
     */
    export type SystemConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SystemConfigDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SharedStateDefaultArgs instead
     */
    export type SharedStateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SharedStateDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}