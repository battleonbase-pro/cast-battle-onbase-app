/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IDebatePoolV2 {
  export type WinnerResultStruct = {
    debateId: BigNumberish;
    winner: AddressLike;
    timestamp: BigNumberish;
    signature: BytesLike;
  };

  export type WinnerResultStructOutput = [
    debateId: bigint,
    winner: string,
    timestamp: bigint,
    signature: string
  ] & {
    debateId: bigint;
    winner: string;
    timestamp: bigint;
    signature: string;
  };

  export type DebateStruct = {
    id: BigNumberish;
    topic: string;
    entryFee: BigNumberish;
    maxParticipants: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    participants: AddressLike[];
    winner: AddressLike;
    isActive: boolean;
    isCompleted: boolean;
  };

  export type DebateStructOutput = [
    id: bigint,
    topic: string,
    entryFee: bigint,
    maxParticipants: bigint,
    startTime: bigint,
    endTime: bigint,
    participants: string[],
    winner: string,
    isActive: boolean,
    isCompleted: boolean
  ] & {
    id: bigint;
    topic: string;
    entryFee: bigint;
    maxParticipants: bigint;
    startTime: bigint;
    endTime: bigint;
    participants: string[];
    winner: string;
    isActive: boolean;
    isCompleted: boolean;
  };
}

export interface IDebatePoolV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "awardLikePoints"
      | "awardPoints"
      | "awardSharePoints"
      | "claimAirdrop"
      | "createDebate"
      | "declareWinner"
      | "emergencyRefund"
      | "getDebate"
      | "getUserDebates"
      | "getUserPoints"
      | "isParticipant"
      | "joinDebate"
      | "processExpiredDebate"
      | "requestRefund"
      | "setupAirdrop"
      | "toggleEmergencyPause"
      | "withdrawPlatformFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AirdropClaimed"
      | "AirdropSetup"
      | "DebateCreated"
      | "EmergencyPauseToggled"
      | "ParticipantJoined"
      | "PointsAwarded"
      | "RefundProcessed"
      | "WinnerDeclared"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "awardLikePoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "awardPoints",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "awardSharePoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAirdrop",
    values: [BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDebate",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "declareWinner",
    values: [IDebatePoolV2.WinnerResultStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDebates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPoints",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isParticipant",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinDebate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processExpiredDebate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setupAirdrop",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleEmergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPlatformFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "awardLikePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "awardPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "awardSharePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDebate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declareWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDebate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserDebates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinDebate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processExpiredDebate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupAirdrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleEmergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPlatformFees",
    data: BytesLike
  ): Result;
}

export namespace AirdropClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    points: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, points: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    points: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AirdropSetupEvent {
  export type InputTuple = [
    token: AddressLike,
    totalAmount: BigNumberish,
    snapshotBlock: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    totalAmount: bigint,
    snapshotBlock: bigint
  ];
  export interface OutputObject {
    token: string;
    totalAmount: bigint;
    snapshotBlock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DebateCreatedEvent {
  export type InputTuple = [
    debateId: BigNumberish,
    topic: string,
    entryFee: BigNumberish
  ];
  export type OutputTuple = [debateId: bigint, topic: string, entryFee: bigint];
  export interface OutputObject {
    debateId: bigint;
    topic: string;
    entryFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPauseToggledEvent {
  export type InputTuple = [paused: boolean];
  export type OutputTuple = [paused: boolean];
  export interface OutputObject {
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParticipantJoinedEvent {
  export type InputTuple = [debateId: BigNumberish, participant: AddressLike];
  export type OutputTuple = [debateId: bigint, participant: string];
  export interface OutputObject {
    debateId: bigint;
    participant: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PointsAwardedEvent {
  export type InputTuple = [
    user: AddressLike,
    points: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [user: string, points: bigint, reason: string];
  export interface OutputObject {
    user: string;
    points: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundProcessedEvent {
  export type InputTuple = [
    debateId: BigNumberish,
    participant: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    debateId: bigint,
    participant: string,
    amount: bigint
  ];
  export interface OutputObject {
    debateId: bigint;
    participant: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerDeclaredEvent {
  export type InputTuple = [
    debateId: BigNumberish,
    winner: AddressLike,
    prize: BigNumberish
  ];
  export type OutputTuple = [debateId: bigint, winner: string, prize: bigint];
  export interface OutputObject {
    debateId: bigint;
    winner: string;
    prize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDebatePoolV2 extends BaseContract {
  connect(runner?: ContractRunner | null): IDebatePoolV2;
  waitForDeployment(): Promise<this>;

  interface: IDebatePoolV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  awardLikePoints: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  awardPoints: TypedContractMethod<
    [user: AddressLike, points: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  awardSharePoints: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  claimAirdrop: TypedContractMethod<
    [
      userPointsAmount: BigNumberish,
      totalPoints: BigNumberish,
      messageHash: BytesLike,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  createDebate: TypedContractMethod<
    [
      topic: string,
      entryFee: BigNumberish,
      maxParticipants: BigNumberish,
      duration: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  declareWinner: TypedContractMethod<
    [result: IDebatePoolV2.WinnerResultStruct],
    [void],
    "nonpayable"
  >;

  emergencyRefund: TypedContractMethod<
    [debateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getDebate: TypedContractMethod<
    [debateId: BigNumberish],
    [IDebatePoolV2.DebateStructOutput],
    "view"
  >;

  getUserDebates: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  getUserPoints: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  isParticipant: TypedContractMethod<
    [debateId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;

  joinDebate: TypedContractMethod<
    [debateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  processExpiredDebate: TypedContractMethod<
    [debateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestRefund: TypedContractMethod<
    [debateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setupAirdrop: TypedContractMethod<
    [_airdropToken: AddressLike, _totalAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  toggleEmergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  withdrawPlatformFees: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "awardLikePoints"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "awardPoints"
  ): TypedContractMethod<
    [user: AddressLike, points: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "awardSharePoints"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimAirdrop"
  ): TypedContractMethod<
    [
      userPointsAmount: BigNumberish,
      totalPoints: BigNumberish,
      messageHash: BytesLike,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createDebate"
  ): TypedContractMethod<
    [
      topic: string,
      entryFee: BigNumberish,
      maxParticipants: BigNumberish,
      duration: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "declareWinner"
  ): TypedContractMethod<
    [result: IDebatePoolV2.WinnerResultStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyRefund"
  ): TypedContractMethod<[debateId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDebate"
  ): TypedContractMethod<
    [debateId: BigNumberish],
    [IDebatePoolV2.DebateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserDebates"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getUserPoints"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isParticipant"
  ): TypedContractMethod<
    [debateId: BigNumberish, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinDebate"
  ): TypedContractMethod<[debateId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "processExpiredDebate"
  ): TypedContractMethod<[debateId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestRefund"
  ): TypedContractMethod<[debateId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setupAirdrop"
  ): TypedContractMethod<
    [_airdropToken: AddressLike, _totalAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "toggleEmergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPlatformFees"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AirdropClaimed"
  ): TypedContractEvent<
    AirdropClaimedEvent.InputTuple,
    AirdropClaimedEvent.OutputTuple,
    AirdropClaimedEvent.OutputObject
  >;
  getEvent(
    key: "AirdropSetup"
  ): TypedContractEvent<
    AirdropSetupEvent.InputTuple,
    AirdropSetupEvent.OutputTuple,
    AirdropSetupEvent.OutputObject
  >;
  getEvent(
    key: "DebateCreated"
  ): TypedContractEvent<
    DebateCreatedEvent.InputTuple,
    DebateCreatedEvent.OutputTuple,
    DebateCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPauseToggled"
  ): TypedContractEvent<
    EmergencyPauseToggledEvent.InputTuple,
    EmergencyPauseToggledEvent.OutputTuple,
    EmergencyPauseToggledEvent.OutputObject
  >;
  getEvent(
    key: "ParticipantJoined"
  ): TypedContractEvent<
    ParticipantJoinedEvent.InputTuple,
    ParticipantJoinedEvent.OutputTuple,
    ParticipantJoinedEvent.OutputObject
  >;
  getEvent(
    key: "PointsAwarded"
  ): TypedContractEvent<
    PointsAwardedEvent.InputTuple,
    PointsAwardedEvent.OutputTuple,
    PointsAwardedEvent.OutputObject
  >;
  getEvent(
    key: "RefundProcessed"
  ): TypedContractEvent<
    RefundProcessedEvent.InputTuple,
    RefundProcessedEvent.OutputTuple,
    RefundProcessedEvent.OutputObject
  >;
  getEvent(
    key: "WinnerDeclared"
  ): TypedContractEvent<
    WinnerDeclaredEvent.InputTuple,
    WinnerDeclaredEvent.OutputTuple,
    WinnerDeclaredEvent.OutputObject
  >;

  filters: {
    "AirdropClaimed(address,uint256,uint256)": TypedContractEvent<
      AirdropClaimedEvent.InputTuple,
      AirdropClaimedEvent.OutputTuple,
      AirdropClaimedEvent.OutputObject
    >;
    AirdropClaimed: TypedContractEvent<
      AirdropClaimedEvent.InputTuple,
      AirdropClaimedEvent.OutputTuple,
      AirdropClaimedEvent.OutputObject
    >;

    "AirdropSetup(address,uint256,uint256)": TypedContractEvent<
      AirdropSetupEvent.InputTuple,
      AirdropSetupEvent.OutputTuple,
      AirdropSetupEvent.OutputObject
    >;
    AirdropSetup: TypedContractEvent<
      AirdropSetupEvent.InputTuple,
      AirdropSetupEvent.OutputTuple,
      AirdropSetupEvent.OutputObject
    >;

    "DebateCreated(uint256,string,uint256)": TypedContractEvent<
      DebateCreatedEvent.InputTuple,
      DebateCreatedEvent.OutputTuple,
      DebateCreatedEvent.OutputObject
    >;
    DebateCreated: TypedContractEvent<
      DebateCreatedEvent.InputTuple,
      DebateCreatedEvent.OutputTuple,
      DebateCreatedEvent.OutputObject
    >;

    "EmergencyPauseToggled(bool)": TypedContractEvent<
      EmergencyPauseToggledEvent.InputTuple,
      EmergencyPauseToggledEvent.OutputTuple,
      EmergencyPauseToggledEvent.OutputObject
    >;
    EmergencyPauseToggled: TypedContractEvent<
      EmergencyPauseToggledEvent.InputTuple,
      EmergencyPauseToggledEvent.OutputTuple,
      EmergencyPauseToggledEvent.OutputObject
    >;

    "ParticipantJoined(uint256,address)": TypedContractEvent<
      ParticipantJoinedEvent.InputTuple,
      ParticipantJoinedEvent.OutputTuple,
      ParticipantJoinedEvent.OutputObject
    >;
    ParticipantJoined: TypedContractEvent<
      ParticipantJoinedEvent.InputTuple,
      ParticipantJoinedEvent.OutputTuple,
      ParticipantJoinedEvent.OutputObject
    >;

    "PointsAwarded(address,uint256,string)": TypedContractEvent<
      PointsAwardedEvent.InputTuple,
      PointsAwardedEvent.OutputTuple,
      PointsAwardedEvent.OutputObject
    >;
    PointsAwarded: TypedContractEvent<
      PointsAwardedEvent.InputTuple,
      PointsAwardedEvent.OutputTuple,
      PointsAwardedEvent.OutputObject
    >;

    "RefundProcessed(uint256,address,uint256)": TypedContractEvent<
      RefundProcessedEvent.InputTuple,
      RefundProcessedEvent.OutputTuple,
      RefundProcessedEvent.OutputObject
    >;
    RefundProcessed: TypedContractEvent<
      RefundProcessedEvent.InputTuple,
      RefundProcessedEvent.OutputTuple,
      RefundProcessedEvent.OutputObject
    >;

    "WinnerDeclared(uint256,address,uint256)": TypedContractEvent<
      WinnerDeclaredEvent.InputTuple,
      WinnerDeclaredEvent.OutputTuple,
      WinnerDeclaredEvent.OutputObject
    >;
    WinnerDeclared: TypedContractEvent<
      WinnerDeclaredEvent.InputTuple,
      WinnerDeclaredEvent.OutputTuple,
      WinnerDeclaredEvent.OutputObject
    >;
  };
}
