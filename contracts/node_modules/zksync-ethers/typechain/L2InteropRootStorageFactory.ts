/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer } from "ethers";
import { Provider } from "@ethersproject/providers";

import type { L2InteropRootStorage } from "./L2InteropRootStorage";

export class L2InteropRootStorageFactory {
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): L2InteropRootStorage {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as L2InteropRootStorage;
  }
}

const _abi = [
  {
    type: "function",
    name: "addInteropRoot",
    inputs: [
      {
        name: "chainId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "blockOrBatchNumber",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "sides",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "interopRoots",
    inputs: [
      {
        name: "chainId",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "blockOrBatchNumber",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "interopRoot",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "InteropRootAdded",
    inputs: [
      {
        name: "chainId",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "blockNumber",
        type: "uint256",
        indexed: true,
        internalType: "uint256",
      },
      {
        name: "sides",
        type: "bytes32[]",
        indexed: false,
        internalType: "bytes32[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "CallerMustBeBootloader",
    inputs: [],
  },
  {
    type: "error",
    name: "InteropRootAlreadyExists",
    inputs: [],
  },
  {
    type: "error",
    name: "MessageRootIsZero",
    inputs: [],
  },
  {
    type: "error",
    name: "SidesLengthNotOne",
    inputs: [],
  },
];
