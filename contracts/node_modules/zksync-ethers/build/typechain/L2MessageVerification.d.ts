/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface L2MessageVerificationInterface extends ethers.utils.Interface {
  functions: {
    "proveL2LeafInclusionShared(uint256,uint256,uint256,bytes32,bytes32[])": FunctionFragment;
    "proveL2LogInclusionShared(uint256,uint256,uint256,tuple,bytes32[])": FunctionFragment;
    "proveL2MessageInclusionShared(uint256,uint256,uint256,tuple,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "proveL2LeafInclusionShared",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2LogInclusionShared",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveL2MessageInclusionShared",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      { txNumberInBatch: BigNumberish; sender: string; data: BytesLike },
      BytesLike[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "proveL2LeafInclusionShared",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2LogInclusionShared",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proveL2MessageInclusionShared",
    data: BytesLike
  ): Result;

  events: {};
}

export class L2MessageVerification extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: L2MessageVerificationInterface;

  functions: {
    proveL2LeafInclusionShared(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _leafProofMask: BigNumberish,
      _leaf: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL2LeafInclusionShared(uint256,uint256,uint256,bytes32,bytes32[])"(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _leafProofMask: BigNumberish,
      _leaf: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    proveL2LogInclusionShared(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL2LogInclusionShared(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    proveL2MessageInclusionShared(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "proveL2MessageInclusionShared(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;
  };

  proveL2LeafInclusionShared(
    _chainId: BigNumberish,
    _blockOrBatchNumber: BigNumberish,
    _leafProofMask: BigNumberish,
    _leaf: BytesLike,
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL2LeafInclusionShared(uint256,uint256,uint256,bytes32,bytes32[])"(
    _chainId: BigNumberish,
    _blockOrBatchNumber: BigNumberish,
    _leafProofMask: BigNumberish,
    _leaf: BytesLike,
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  proveL2LogInclusionShared(
    _chainId: BigNumberish,
    _blockOrBatchNumber: BigNumberish,
    _index: BigNumberish,
    _log: {
      l2ShardId: BigNumberish;
      isService: boolean;
      txNumberInBatch: BigNumberish;
      sender: string;
      key: BytesLike;
      value: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL2LogInclusionShared(uint256,uint256,uint256,tuple,bytes32[])"(
    _chainId: BigNumberish,
    _blockOrBatchNumber: BigNumberish,
    _index: BigNumberish,
    _log: {
      l2ShardId: BigNumberish;
      isService: boolean;
      txNumberInBatch: BigNumberish;
      sender: string;
      key: BytesLike;
      value: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  proveL2MessageInclusionShared(
    _chainId: BigNumberish,
    _blockOrBatchNumber: BigNumberish,
    _index: BigNumberish,
    _message: {
      txNumberInBatch: BigNumberish;
      sender: string;
      data: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "proveL2MessageInclusionShared(uint256,uint256,uint256,tuple,bytes32[])"(
    _chainId: BigNumberish,
    _blockOrBatchNumber: BigNumberish,
    _index: BigNumberish,
    _message: {
      txNumberInBatch: BigNumberish;
      sender: string;
      data: BytesLike;
    },
    _proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    proveL2LeafInclusionShared(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _leafProofMask: BigNumberish,
      _leaf: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL2LeafInclusionShared(uint256,uint256,uint256,bytes32,bytes32[])"(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _leafProofMask: BigNumberish,
      _leaf: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    proveL2LogInclusionShared(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL2LogInclusionShared(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    proveL2MessageInclusionShared(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "proveL2MessageInclusionShared(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    proveL2LeafInclusionShared(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _leafProofMask: BigNumberish,
      _leaf: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL2LeafInclusionShared(uint256,uint256,uint256,bytes32,bytes32[])"(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _leafProofMask: BigNumberish,
      _leaf: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL2LogInclusionShared(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL2LogInclusionShared(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proveL2MessageInclusionShared(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proveL2MessageInclusionShared(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    proveL2LeafInclusionShared(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _leafProofMask: BigNumberish,
      _leaf: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL2LeafInclusionShared(uint256,uint256,uint256,bytes32,bytes32[])"(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _leafProofMask: BigNumberish,
      _leaf: BytesLike,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL2LogInclusionShared(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL2LogInclusionShared(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _index: BigNumberish,
      _log: {
        l2ShardId: BigNumberish;
        isService: boolean;
        txNumberInBatch: BigNumberish;
        sender: string;
        key: BytesLike;
        value: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proveL2MessageInclusionShared(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proveL2MessageInclusionShared(uint256,uint256,uint256,tuple,bytes32[])"(
      _chainId: BigNumberish,
      _blockOrBatchNumber: BigNumberish,
      _index: BigNumberish,
      _message: {
        txNumberInBatch: BigNumberish;
        sender: string;
        data: BytesLike;
      },
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
