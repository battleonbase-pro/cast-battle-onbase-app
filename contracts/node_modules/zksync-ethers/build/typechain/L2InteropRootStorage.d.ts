/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface L2InteropRootStorageInterface extends ethers.utils.Interface {
  functions: {
    "addInteropRoot(uint256,uint256,bytes32[])": FunctionFragment;
    "interopRoots(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addInteropRoot",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "interopRoots",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addInteropRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interopRoots",
    data: BytesLike
  ): Result;

  events: {
    "InteropRootAdded(uint256,uint256,bytes32[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InteropRootAdded"): EventFragment;
}

export class L2InteropRootStorage extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: L2InteropRootStorageInterface;

  functions: {
    addInteropRoot(
      chainId: BigNumberish,
      blockOrBatchNumber: BigNumberish,
      sides: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addInteropRoot(uint256,uint256,bytes32[])"(
      chainId: BigNumberish,
      blockOrBatchNumber: BigNumberish,
      sides: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    interopRoots(
      chainId: BigNumberish,
      blockOrBatchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      interopRoot: string;
      0: string;
    }>;

    "interopRoots(uint256,uint256)"(
      chainId: BigNumberish,
      blockOrBatchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      interopRoot: string;
      0: string;
    }>;
  };

  addInteropRoot(
    chainId: BigNumberish,
    blockOrBatchNumber: BigNumberish,
    sides: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addInteropRoot(uint256,uint256,bytes32[])"(
    chainId: BigNumberish,
    blockOrBatchNumber: BigNumberish,
    sides: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  interopRoots(
    chainId: BigNumberish,
    blockOrBatchNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "interopRoots(uint256,uint256)"(
    chainId: BigNumberish,
    blockOrBatchNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addInteropRoot(
      chainId: BigNumberish,
      blockOrBatchNumber: BigNumberish,
      sides: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addInteropRoot(uint256,uint256,bytes32[])"(
      chainId: BigNumberish,
      blockOrBatchNumber: BigNumberish,
      sides: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    interopRoots(
      chainId: BigNumberish,
      blockOrBatchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "interopRoots(uint256,uint256)"(
      chainId: BigNumberish,
      blockOrBatchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    InteropRootAdded(
      chainId: BigNumberish | null,
      blockNumber: BigNumberish | null,
      sides: null
    ): EventFilter;
  };

  estimateGas: {
    addInteropRoot(
      chainId: BigNumberish,
      blockOrBatchNumber: BigNumberish,
      sides: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addInteropRoot(uint256,uint256,bytes32[])"(
      chainId: BigNumberish,
      blockOrBatchNumber: BigNumberish,
      sides: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    interopRoots(
      chainId: BigNumberish,
      blockOrBatchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "interopRoots(uint256,uint256)"(
      chainId: BigNumberish,
      blockOrBatchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addInteropRoot(
      chainId: BigNumberish,
      blockOrBatchNumber: BigNumberish,
      sides: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addInteropRoot(uint256,uint256,bytes32[])"(
      chainId: BigNumberish,
      blockOrBatchNumber: BigNumberish,
      sides: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    interopRoots(
      chainId: BigNumberish,
      blockOrBatchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "interopRoots(uint256,uint256)"(
      chainId: BigNumberish,
      blockOrBatchNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
