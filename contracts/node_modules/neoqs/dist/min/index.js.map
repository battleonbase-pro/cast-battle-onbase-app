{"version":3,"sources":["../../src/formats.ts","../../src/utils.ts","../../src/parse.ts","../../src/stringify.ts","../../src/index.ts"],"sourcesContent":["import type { Format } from './types';\n\nexport const default_format: Format = 'RFC3986';\nexport const formatters: Record<Format, (str: PropertyKey) => string> = {\n\tRFC1738: (v: PropertyKey) => String(v).replace(/%20/g, '+'),\n\tRFC3986: (v: PropertyKey) => String(v),\n};\nexport const RFC1738 = 'RFC1738';\nexport const RFC3986 = 'RFC3986';\n","import { RFC1738 } from './formats.ts';\nimport type { DefaultEncoder, Format, StringifyBaseOptions } from './types.ts';\n\nconst has = Object.prototype.hasOwnProperty;\nconst is_array = Array.isArray;\n\nconst hex_table = (() => {\n\tconst array = [];\n\tfor (let i = 0; i < 256; ++i) {\n\t\tarray.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());\n\t}\n\n\treturn array;\n})();\n\nfunction compact_queue<T extends Record<string, any>>(queue: Array<{ obj: T; prop: string }>) {\n\twhile (queue.length > 1) {\n\t\tconst item = queue.pop();\n\t\tif (!item) continue;\n\n\t\tconst obj = item.obj[item.prop];\n\n\t\tif (is_array(obj)) {\n\t\t\tconst compacted: unknown[] = [];\n\n\t\t\tfor (let j = 0; j < obj.length; ++j) {\n\t\t\t\tif (typeof obj[j] !== 'undefined') {\n\t\t\t\t\tcompacted.push(obj[j]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// @ts-ignore\n\t\t\titem.obj[item.prop] = compacted;\n\t\t}\n\t}\n}\n\nfunction array_to_object(source: any[], options: { plainObjects: boolean }) {\n\tconst obj = options && options.plainObjects ? Object.create(null) : {};\n\tfor (let i = 0; i < source.length; ++i) {\n\t\tif (typeof source[i] !== 'undefined') {\n\t\t\tobj[i] = source[i];\n\t\t}\n\t}\n\n\treturn obj;\n}\n\nexport function merge(\n\ttarget: any,\n\tsource: any,\n\toptions: { plainObjects?: boolean; allowPrototypes?: boolean } = {},\n) {\n\tif (!source) {\n\t\treturn target;\n\t}\n\n\tif (typeof source !== 'object') {\n\t\tif (is_array(target)) {\n\t\t\ttarget.push(source);\n\t\t} else if (target && typeof target === 'object') {\n\t\t\tif (\n\t\t\t\t(options && (options.plainObjects || options.allowPrototypes)) ||\n\t\t\t\t!has.call(Object.prototype, source)\n\t\t\t) {\n\t\t\t\ttarget[source] = true;\n\t\t\t}\n\t\t} else {\n\t\t\treturn [target, source];\n\t\t}\n\n\t\treturn target;\n\t}\n\n\tif (!target || typeof target !== 'object') {\n\t\treturn [target].concat(source);\n\t}\n\n\tlet mergeTarget = target;\n\tif (is_array(target) && !is_array(source)) {\n\t\t// @ts-ignore\n\t\tmergeTarget = array_to_object(target, options);\n\t}\n\n\tif (is_array(target) && is_array(source)) {\n\t\tsource.forEach(function (item, i) {\n\t\t\tif (has.call(target, i)) {\n\t\t\t\tconst targetItem = target[i];\n\t\t\t\tif (targetItem && typeof targetItem === 'object' && item && typeof item === 'object') {\n\t\t\t\t\ttarget[i] = merge(targetItem, item, options);\n\t\t\t\t} else {\n\t\t\t\t\ttarget.push(item);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttarget[i] = item;\n\t\t\t}\n\t\t});\n\t\treturn target;\n\t}\n\n\treturn Object.keys(source).reduce(function (acc, key) {\n\t\tconst value = source[key];\n\n\t\tif (has.call(acc, key)) {\n\t\t\tacc[key] = merge(acc[key], value, options);\n\t\t} else {\n\t\t\tacc[key] = value;\n\t\t}\n\t\treturn acc;\n\t}, mergeTarget);\n}\n\nexport function assign_single_source(target: any, source: any) {\n\treturn Object.keys(source).reduce(function (acc, key) {\n\t\tacc[key] = source[key];\n\t\treturn acc;\n\t}, target);\n}\n\nexport function decode(str: string, _: any, charset: string) {\n\tconst strWithoutPlus = str.replace(/\\+/g, ' ');\n\tif (charset === 'iso-8859-1') {\n\t\t// unescape never throws, no try...catch needed:\n\t\treturn strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);\n\t}\n\t// utf-8\n\ttry {\n\t\treturn decodeURIComponent(strWithoutPlus);\n\t} catch (e) {\n\t\treturn strWithoutPlus;\n\t}\n}\n\nconst limit = 1024;\n\nexport const encode: (\n\tstr: any,\n\tdefaultEncoder: DefaultEncoder,\n\tcharset: string,\n\ttype: 'key' | 'value',\n\tformat: Format,\n) => string = (str, _defaultEncoder, charset, _kind, format: Format) => {\n\t// This code was originally written by Brian White (mscdex) for the io.js core querystring library.\n\t// It has been adapted here for stricter adherence to RFC 3986\n\tif (str.length === 0) {\n\t\treturn str;\n\t}\n\n\tlet string = str;\n\tif (typeof str === 'symbol') {\n\t\tstring = Symbol.prototype.toString.call(str);\n\t} else if (typeof str !== 'string') {\n\t\tstring = String(str);\n\t}\n\n\tif (charset === 'iso-8859-1') {\n\t\treturn escape(string).replace(/%u[0-9a-f]{4}/gi, function ($0) {\n\t\t\treturn '%26%23' + parseInt($0.slice(2), 16) + '%3B';\n\t\t});\n\t}\n\n\tlet out = '';\n\tfor (let j = 0; j < string.length; j += limit) {\n\t\tconst segment = string.length >= limit ? string.slice(j, j + limit) : string;\n\t\tconst arr = [];\n\n\t\tfor (let i = 0; i < segment.length; ++i) {\n\t\t\tlet c = segment.charCodeAt(i);\n\t\t\tif (\n\t\t\t\tc === 0x2d || // -\n\t\t\t\tc === 0x2e || // .\n\t\t\t\tc === 0x5f || // _\n\t\t\t\tc === 0x7e || // ~\n\t\t\t\t(c >= 0x30 && c <= 0x39) || // 0-9\n\t\t\t\t(c >= 0x41 && c <= 0x5a) || // a-z\n\t\t\t\t(c >= 0x61 && c <= 0x7a) || // A-Z\n\t\t\t\t(format === RFC1738 && (c === 0x28 || c === 0x29)) // ( )\n\t\t\t) {\n\t\t\t\tarr[arr.length] = segment.charAt(i);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (c < 0x80) {\n\t\t\t\tarr[arr.length] = hex_table[c];\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (c < 0x800) {\n\t\t\t\tarr[arr.length] = hex_table[0xc0 | (c >> 6)] + hex_table[0x80 | (c & 0x3f)];\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (c < 0xd800 || c >= 0xe000) {\n\t\t\t\tarr[arr.length] =\n\t\t\t\t\thex_table[0xe0 | (c >> 12)] +\n\t\t\t\t\thex_table[0x80 | ((c >> 6) & 0x3f)] +\n\t\t\t\t\thex_table[0x80 | (c & 0x3f)];\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ti += 1;\n\t\t\tc = 0x10000 + (((c & 0x3ff) << 10) | (segment.charCodeAt(i) & 0x3ff));\n\n\t\t\tarr[arr.length] =\n\t\t\t\thex_table[0xf0 | (c >> 18)] +\n\t\t\t\thex_table[0x80 | ((c >> 12) & 0x3f)] +\n\t\t\t\thex_table[0x80 | ((c >> 6) & 0x3f)] +\n\t\t\t\thex_table[0x80 | (c & 0x3f)];\n\t\t}\n\n\t\tout += arr.join('');\n\t}\n\n\treturn out;\n};\n\nexport function compact(value: any) {\n\tconst queue = [{ obj: { o: value }, prop: 'o' }];\n\tconst refs = [];\n\n\tfor (let i = 0; i < queue.length; ++i) {\n\t\tconst item = queue[i];\n\t\t// @ts-ignore\n\t\tconst obj = item.obj[item.prop];\n\n\t\tconst keys = Object.keys(obj);\n\t\tfor (let j = 0; j < keys.length; ++j) {\n\t\t\tconst key = keys[j];\n\t\t\tconst val = obj[key];\n\t\t\tif (typeof val === 'object' && val !== null && refs.indexOf(val) === -1) {\n\t\t\t\tqueue.push({ obj: obj, prop: key });\n\t\t\t\trefs.push(val);\n\t\t\t}\n\t\t}\n\t}\n\n\tcompact_queue(queue);\n\n\treturn value;\n}\n\nexport function is_regexp(obj: any) {\n\treturn Object.prototype.toString.call(obj) === '[object RegExp]';\n}\n\nexport function is_buffer(obj: any) {\n\tif (!obj || typeof obj !== 'object') {\n\t\treturn false;\n\t}\n\n\treturn !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));\n}\n\nexport function combine(a: any, b: any) {\n\treturn [].concat(a, b);\n}\n\nexport function maybe_map<T>(val: T[], fn: (v: T) => T) {\n\tif (is_array(val)) {\n\t\tconst mapped = [];\n\t\tfor (let i = 0; i < val.length; i += 1) {\n\t\t\tmapped.push(fn(val[i]));\n\t\t}\n\t\treturn mapped;\n\t}\n\treturn fn(val);\n}\n","import type { NonNullableProperties, ParseOptions } from './types.ts';\nimport { combine, compact, decode, is_regexp, maybe_map, merge } from './utils.ts';\n\nconst has = Object.prototype.hasOwnProperty;\nconst isArray = Array.isArray;\n\nconst defaults = {\n\tallowDots: false,\n\tallowEmptyArrays: false,\n\tallowPrototypes: false,\n\tallowSparse: false,\n\tarrayLimit: 20,\n\tcharset: 'utf-8',\n\tcharsetSentinel: false,\n\tcomma: false,\n\tdecodeDotInKeys: false,\n\tdecoder: decode,\n\tdelimiter: '&',\n\tdepth: 5,\n\tduplicates: 'combine',\n\tignoreQueryPrefix: false,\n\tinterpretNumericEntities: false,\n\tparameterLimit: 1000,\n\tparseArrays: true,\n\tplainObjects: false,\n\tstrictDepth: false,\n\tstrictNullHandling: false,\n} as NonNullableProperties<ParseOptions>;\n\nfunction interpret_numeric_entities(str: string) {\n\treturn str.replace(/&#(\\d+);/g, function (_, numberStr) {\n\t\treturn String.fromCharCode(parseInt(numberStr, 10));\n\t});\n}\n\nfunction parse_array_value(val: string | string[], options: ParseOptions): string[] {\n\tif (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) {\n\t\treturn val.split(',');\n\t}\n\n\t// @ts-ignore\n\treturn val;\n}\n\n// This is what browsers will submit when the ✓ character occurs in an\n// application/x-www-form-urlencoded body and the encoding of the page containing\n// the form is iso-8859-1, or when the submitted form has an accept-charset\n// attribute of iso-8859-1. Presumably also with other charsets that do not contain\n// the ✓ character, such as us-ascii.\nconst iso_sentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')\n\n// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.\nconst charset_sentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')\n\nfunction parse_values(str: string, options: ParseOptions) {\n\tconst obj = { __proto__: null };\n\n\tlet clean_str = options.ignoreQueryPrefix ? str.replace(/^\\?/, '') : str;\n\tclean_str = clean_str.replace(/%5B/gi, '[').replace(/%5D/gi, ']');\n\tconst limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;\n\tconst parts = clean_str.split(options.delimiter!, limit);\n\tlet skip_index = -1; // Keep track of where the utf8 sentinel was found\n\tlet i;\n\n\tlet charset = options.charset;\n\tif (options.charsetSentinel) {\n\t\tfor (i = 0; i < parts.length; ++i) {\n\t\t\tif (parts[i].indexOf('utf8=') === 0) {\n\t\t\t\tif (parts[i] === charset_sentinel) {\n\t\t\t\t\tcharset = 'utf-8';\n\t\t\t\t} else if (parts[i] === iso_sentinel) {\n\t\t\t\t\tcharset = 'iso-8859-1';\n\t\t\t\t}\n\t\t\t\tskip_index = i;\n\t\t\t\ti = parts.length; // The eslint settings do not allow break;\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (i = 0; i < parts.length; ++i) {\n\t\tif (i === skip_index) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst part = parts[i];\n\n\t\tconst bracket_equals_pos = part.indexOf(']=');\n\t\tconst pos = bracket_equals_pos === -1 ? part.indexOf('=') : bracket_equals_pos + 1;\n\n\t\tlet key: string, val: string | string[] | null;\n\t\tif (pos === -1) {\n\t\t\t// @ts-expect-error\n\t\t\tkey = options.decoder!(part, defaults.decoder, charset, 'key');\n\t\t\tval = options.strictNullHandling ? null : '';\n\t\t} else {\n\t\t\t// @ts-expect-error\n\t\t\tkey = options.decoder!(part.slice(0, pos), defaults.decoder, charset, 'key');\n\n\t\t\tval = maybe_map(parse_array_value(part.slice(pos + 1), options), function (encodedVal) {\n\t\t\t\t// @ts-expect-error\n\t\t\t\treturn options.decoder!(encodedVal, defaults.decoder, charset, 'value');\n\t\t\t});\n\t\t}\n\n\t\tif (val && options.interpretNumericEntities && charset === 'iso-8859-1') {\n\t\t\t// @ts-expect-error this is such a terrible codebase, nothing makes sense\n\t\t\tval = interpret_numeric_entities(val);\n\t\t}\n\n\t\tif (part.indexOf('[]=') > -1) {\n\t\t\t// @ts-expect-error again, this is such a terrible codebase\n\t\t\tval = isArray(val) ? [val] : val;\n\t\t}\n\n\t\tconst existing = has.call(obj, key);\n\t\tif (existing && options.duplicates === 'combine') {\n\t\t\t// @ts-ignore\n\t\t\tobj[key] = combine(obj[key], val);\n\t\t} else if (!existing || options.duplicates === 'last') {\n\t\t\t// @ts-ignore\n\t\t\tobj[key] = val;\n\t\t}\n\t}\n\n\treturn obj;\n}\n\nfunction parse_object(\n\tchain: string[],\n\tval: string | string[],\n\toptions: ParseOptions,\n\tvalues_parsed: boolean,\n) {\n\tlet leaf = values_parsed ? val : parse_array_value(val, options);\n\n\tfor (let i = chain.length - 1; i >= 0; --i) {\n\t\tlet obj;\n\t\tconst root = chain[i];\n\n\t\tif (root === '[]' && options.parseArrays) {\n\t\t\tobj =\n\t\t\t\toptions.allowEmptyArrays && (leaf === '' || (options.strictNullHandling && leaf === null))\n\t\t\t\t\t? []\n\t\t\t\t\t: ([] as string[]).concat(leaf);\n\t\t} else {\n\t\t\tobj = options.plainObjects ? Object.create(null) : {};\n\t\t\tconst clean_root =\n\t\t\t\troot.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;\n\t\t\tconst decoded_root = options.decodeDotInKeys ? clean_root.replace(/%2E/g, '.') : clean_root;\n\t\t\tconst index = parseInt(decoded_root, 10);\n\t\t\tif (!options.parseArrays && decoded_root === '') {\n\t\t\t\tobj = { 0: leaf };\n\t\t\t} else if (\n\t\t\t\t!isNaN(index) &&\n\t\t\t\troot !== decoded_root &&\n\t\t\t\tString(index) === decoded_root &&\n\t\t\t\tindex >= 0 &&\n\t\t\t\toptions.parseArrays &&\n\t\t\t\tindex <= options.arrayLimit!\n\t\t\t) {\n\t\t\t\tobj = [];\n\t\t\t\tobj[index] = leaf;\n\t\t\t} else if (decoded_root !== '__proto__') {\n\t\t\t\tobj[decoded_root] = leaf;\n\t\t\t}\n\t\t}\n\n\t\tleaf = obj;\n\t}\n\n\treturn leaf;\n}\n\nfunction parseKeys(\n\tgiven_key: string,\n\tval: string | string[],\n\toptions: NonNullableProperties<ParseOptions>,\n\tvalues_parsed: boolean,\n) {\n\tif (!given_key) {\n\t\treturn;\n\t}\n\n\t// Transform dot notation to bracket notation\n\tconst key = options.allowDots ? given_key.replace(/\\.([^.[]+)/g, '[$1]') : given_key;\n\n\t// The regex chunks\n\n\tconst brackets = /(\\[[^[\\]]*])/;\n\tconst child = /(\\[[^[\\]]*])/g;\n\n\t// Get the parent\n\n\tlet segment = +options.depth > 0 && brackets.exec(key);\n\tconst parent = segment ? key.slice(0, segment.index) : key;\n\n\t// Stash the parent if it exists\n\n\tconst keys = [];\n\tif (parent) {\n\t\t// If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties\n\t\tif (!options.plainObjects && has.call(Object.prototype, parent)) {\n\t\t\tif (!options.allowPrototypes) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tkeys.push(parent);\n\t}\n\n\t// Loop through children appending to the array until we hit depth\n\n\tlet i = 0;\n\twhile (+options.depth > 0 && (segment = child.exec(key)) !== null && i < +options.depth) {\n\t\ti += 1;\n\t\tif (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {\n\t\t\tif (!options.allowPrototypes) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tkeys.push(segment[1]);\n\t}\n\n\t// If there's a remainder, check strictDepth option for throw, else just add whatever is left\n\n\tif (segment) {\n\t\tif (options.strictDepth) {\n\t\t\tthrow new RangeError(\n\t\t\t\t'Input depth exceeded depth option of ' + options.depth + ' and strictDepth is true',\n\t\t\t);\n\t\t}\n\t\tkeys.push('[' + key.slice(segment.index) + ']');\n\t}\n\n\treturn parse_object(keys, val, options, values_parsed);\n}\n\nfunction normalize_parse_options(\n\topts: ParseOptions | undefined,\n): NonNullableProperties<ParseOptions> {\n\tif (!opts) {\n\t\treturn defaults;\n\t}\n\n\tif (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n\t\tthrow new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n\t}\n\n\tif (typeof opts.decodeDotInKeys !== 'undefined' && typeof opts.decodeDotInKeys !== 'boolean') {\n\t\tthrow new TypeError('`decodeDotInKeys` option can only be `true` or `false`, when provided');\n\t}\n\n\tif (\n\t\topts.decoder !== null &&\n\t\ttypeof opts.decoder !== 'undefined' &&\n\t\ttypeof opts.decoder !== 'function'\n\t) {\n\t\tthrow new TypeError('Decoder has to be a function.');\n\t}\n\n\tif (\n\t\ttypeof opts.charset !== 'undefined' &&\n\t\topts.charset !== 'utf-8' &&\n\t\topts.charset !== 'iso-8859-1'\n\t) {\n\t\tthrow new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n\t}\n\tconst charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;\n\n\tconst duplicates = typeof opts.duplicates === 'undefined' ? defaults.duplicates : opts.duplicates;\n\n\tif (duplicates !== 'combine' && duplicates !== 'first' && duplicates !== 'last') {\n\t\tthrow new TypeError('The duplicates option must be either combine, first, or last');\n\t}\n\n\tconst allow_dots =\n\t\ttypeof opts.allowDots === 'undefined'\n\t\t\t? opts.decodeDotInKeys === true\n\t\t\t\t? true\n\t\t\t\t: defaults.allowDots\n\t\t\t: !!opts.allowDots;\n\n\treturn {\n\t\tallowDots: allow_dots,\n\t\tallowEmptyArrays:\n\t\t\ttypeof opts.allowEmptyArrays === 'boolean'\n\t\t\t\t? !!opts.allowEmptyArrays\n\t\t\t\t: defaults.allowEmptyArrays,\n\t\tallowPrototypes:\n\t\t\ttypeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,\n\t\tallowSparse: typeof opts.allowSparse === 'boolean' ? opts.allowSparse : defaults.allowSparse,\n\t\tarrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,\n\t\tcharset: charset,\n\t\tcharsetSentinel:\n\t\t\ttypeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n\t\tcomma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,\n\t\tdecodeDotInKeys:\n\t\t\ttypeof opts.decodeDotInKeys === 'boolean' ? opts.decodeDotInKeys : defaults.decodeDotInKeys,\n\t\tdecoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,\n\t\tdelimiter:\n\t\t\ttypeof opts.delimiter === 'string' || is_regexp(opts.delimiter)\n\t\t\t\t? opts.delimiter!\n\t\t\t\t: defaults.delimiter,\n\t\t// eslint-disable-next-line no-implicit-coercion, no-extra-parens\n\t\tdepth: typeof opts.depth === 'number' || opts.depth === false ? +opts.depth : defaults.depth,\n\t\tduplicates: duplicates,\n\t\tignoreQueryPrefix: opts.ignoreQueryPrefix === true,\n\t\tinterpretNumericEntities:\n\t\t\ttypeof opts.interpretNumericEntities === 'boolean'\n\t\t\t\t? opts.interpretNumericEntities\n\t\t\t\t: defaults.interpretNumericEntities,\n\t\tparameterLimit:\n\t\t\ttypeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,\n\t\tparseArrays: opts.parseArrays !== false,\n\t\tplainObjects:\n\t\t\ttypeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,\n\t\tstrictDepth: typeof opts.strictDepth === 'boolean' ? !!opts.strictDepth : defaults.strictDepth,\n\t\tstrictNullHandling:\n\t\t\ttypeof opts.strictNullHandling === 'boolean'\n\t\t\t\t? opts.strictNullHandling\n\t\t\t\t: defaults.strictNullHandling,\n\t};\n}\n\nexport function parse(str: string, opts: ParseOptions = {}) {\n\tconst options = normalize_parse_options(opts);\n\n\tif (str === '' || str === null || typeof str === 'undefined') {\n\t\treturn options.plainObjects ? Object.create(null) : {};\n\t}\n\n\tconst temp_obj = typeof str === 'string' ? parse_values(str, options) : str;\n\tlet obj = options.plainObjects ? Object.create(null) : {};\n\n\t// Iterate over the keys and setup the new object\n\n\tconst keys = Object.keys(temp_obj);\n\tfor (let i = 0; i < keys.length; ++i) {\n\t\tconst key = keys[i];\n\t\t// @ts-expect-error\n\t\tconst newObj = parseKeys(key, temp_obj[key], options, typeof str === 'string');\n\t\tobj = merge(obj, newObj, options);\n\t}\n\n\tif (options.allowSparse === true) {\n\t\treturn obj;\n\t}\n\n\treturn compact(obj);\n}\n","import { encode, is_buffer, maybe_map } from './utils.ts';\nimport { default_format, formatters } from './formats.ts';\nimport type { NonNullableProperties, StringifyOptions } from './types.ts';\n\nconst has = Object.prototype.hasOwnProperty;\n\nconst array_prefix_generators = {\n\tbrackets(prefix: PropertyKey) {\n\t\treturn String(prefix) + '[]';\n\t},\n\tcomma: 'comma',\n\tindices(prefix: PropertyKey, key: string) {\n\t\treturn String(prefix) + '[' + key + ']';\n\t},\n\trepeat(prefix: PropertyKey) {\n\t\treturn String(prefix);\n\t},\n};\n\nconst is_array = Array.isArray;\nconst push = Array.prototype.push;\nconst push_to_array = function (arr: any[], value_or_array: any) {\n\tpush.apply(arr, is_array(value_or_array) ? value_or_array : [value_or_array]);\n};\n\nconst to_ISO = Date.prototype.toISOString;\n\nconst defaults = {\n\taddQueryPrefix: false,\n\tallowDots: false,\n\tallowEmptyArrays: false,\n\tarrayFormat: 'indices',\n\tcharset: 'utf-8',\n\tcharsetSentinel: false,\n\tdelimiter: '&',\n\tencode: true,\n\tencodeDotInKeys: false,\n\tencoder: encode,\n\tencodeValuesOnly: false,\n\tformat: default_format,\n\tformatter: formatters[default_format],\n\t/** @deprecated */\n\tindices: false,\n\tserializeDate(date) {\n\t\treturn to_ISO.call(date);\n\t},\n\tskipNulls: false,\n\tstrictNullHandling: false,\n} as NonNullableProperties<StringifyOptions & { formatter: (typeof formatters)['RFC1738'] }>;\n\nfunction is_non_nullish_primitive(v: unknown): v is string | number | boolean | symbol | bigint {\n\treturn (\n\t\ttypeof v === 'string' ||\n\t\ttypeof v === 'number' ||\n\t\ttypeof v === 'boolean' ||\n\t\ttypeof v === 'symbol' ||\n\t\ttypeof v === 'bigint'\n\t);\n}\n\nconst sentinel = {};\n\nfunction inner_stringify(\n\tobject: any,\n\tprefix: PropertyKey,\n\tgenerateArrayPrefix: StringifyOptions['arrayFormat'] | ((prefix: string, key: string) => string),\n\tcommaRoundTrip: boolean,\n\tallowEmptyArrays: boolean,\n\tstrictNullHandling: boolean,\n\tskipNulls: boolean,\n\tencodeDotInKeys: boolean,\n\tencoder: StringifyOptions['encoder'],\n\tfilter: StringifyOptions['filter'],\n\tsort: StringifyOptions['sort'],\n\tallowDots: StringifyOptions['allowDots'],\n\tserializeDate: StringifyOptions['serializeDate'],\n\tformat: StringifyOptions['format'],\n\tformatter: StringifyOptions['formatter'],\n\tencodeValuesOnly: boolean,\n\tcharset: StringifyOptions['charset'],\n\tsideChannel: WeakMap<any, any>,\n) {\n\tlet obj = object;\n\n\tlet tmp_sc = sideChannel;\n\tlet step = 0;\n\tlet find_flag = false;\n\twhile ((tmp_sc = tmp_sc.get(sentinel)) !== void undefined && !find_flag) {\n\t\t// Where object last appeared in the ref tree\n\t\tconst pos = tmp_sc.get(object);\n\t\tstep += 1;\n\t\tif (typeof pos !== 'undefined') {\n\t\t\tif (pos === step) {\n\t\t\t\tthrow new RangeError('Cyclic object value');\n\t\t\t} else {\n\t\t\t\tfind_flag = true; // Break while\n\t\t\t}\n\t\t}\n\t\tif (typeof tmp_sc.get(sentinel) === 'undefined') {\n\t\t\tstep = 0;\n\t\t}\n\t}\n\n\tif (typeof filter === 'function') {\n\t\tobj = filter(prefix, obj);\n\t} else if (obj instanceof Date) {\n\t\tobj = serializeDate?.(obj);\n\t} else if (generateArrayPrefix === 'comma' && is_array(obj)) {\n\t\tobj = maybe_map(obj, function (value) {\n\t\t\tif (value instanceof Date) {\n\t\t\t\treturn serializeDate?.(value);\n\t\t\t}\n\t\t\treturn value;\n\t\t});\n\t}\n\n\tif (obj === null) {\n\t\tif (strictNullHandling) {\n\t\t\treturn encoder && !encodeValuesOnly\n\t\t\t\t? // @ts-expect-error\n\t\t\t\t\tencoder(prefix, defaults.encoder, charset, 'key', format)\n\t\t\t\t: prefix;\n\t\t}\n\n\t\tobj = '';\n\t}\n\n\tif (is_non_nullish_primitive(obj) || is_buffer(obj)) {\n\t\tif (encoder) {\n\t\t\tconst key_value = encodeValuesOnly\n\t\t\t\t? prefix\n\t\t\t\t: // @ts-expect-error\n\t\t\t\t\tencoder(prefix, defaults.encoder, charset, 'key', format);\n\t\t\treturn [\n\t\t\t\tformatter?.(key_value) +\n\t\t\t\t\t'=' +\n\t\t\t\t\t// @ts-expect-error\n\t\t\t\t\tformatter?.(encoder(obj, defaults.encoder, charset, 'value', format)),\n\t\t\t];\n\t\t}\n\t\treturn [formatter?.(prefix) + '=' + formatter?.(String(obj))];\n\t}\n\n\tconst values: string[] = [];\n\n\tif (typeof obj === 'undefined') {\n\t\treturn values;\n\t}\n\n\tlet obj_keys;\n\tif (generateArrayPrefix === 'comma' && is_array(obj)) {\n\t\t// we need to join elements in\n\t\tif (encodeValuesOnly && encoder) {\n\t\t\t// @ts-expect-error values only\n\t\t\tobj = maybe_map(obj, encoder);\n\t\t}\n\t\tobj_keys = [{ value: obj.length > 0 ? obj.join(',') || null : void undefined }];\n\t} else if (is_array(filter)) {\n\t\tobj_keys = filter;\n\t} else {\n\t\tconst keys = Object.keys(obj);\n\t\tobj_keys = sort ? keys.sort(sort) : keys;\n\t}\n\n\tconst encoded_prefix = encodeDotInKeys ? String(prefix).replace(/\\./g, '%2E') : String(prefix);\n\n\tconst adjusted_prefix =\n\t\tcommaRoundTrip && is_array(obj) && obj.length === 1 ? encoded_prefix + '[]' : encoded_prefix;\n\n\tif (allowEmptyArrays && is_array(obj) && obj.length === 0) {\n\t\treturn adjusted_prefix + '[]';\n\t}\n\n\tfor (let j = 0; j < obj_keys.length; ++j) {\n\t\tconst key = obj_keys[j];\n\t\tconst value =\n\t\t\t// @ts-expect-error\n\t\t\ttypeof key === 'object' && typeof key.value !== 'undefined' ? key.value : obj[key];\n\n\t\tif (skipNulls && value === null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// @ts-expect-error\n\t\tconst encoded_key = allowDots && encodeDotInKeys ? key.replace(/\\./g, '%2E') : key;\n\t\tconst key_prefix = is_array(obj)\n\t\t\t? typeof generateArrayPrefix === 'function'\n\t\t\t\t? generateArrayPrefix(adjusted_prefix, encoded_key)\n\t\t\t\t: adjusted_prefix\n\t\t\t: adjusted_prefix + (allowDots ? '.' + encoded_key : '[' + encoded_key + ']');\n\n\t\tsideChannel.set(object, step);\n\t\tconst valueSideChannel = new WeakMap();\n\t\tvalueSideChannel.set(sentinel, sideChannel);\n\t\tpush_to_array(\n\t\t\tvalues,\n\t\t\tinner_stringify(\n\t\t\t\tvalue,\n\t\t\t\tkey_prefix,\n\t\t\t\tgenerateArrayPrefix,\n\t\t\t\tcommaRoundTrip,\n\t\t\t\tallowEmptyArrays,\n\t\t\t\tstrictNullHandling,\n\t\t\t\tskipNulls,\n\t\t\t\tencodeDotInKeys,\n\t\t\t\t// @ts-expect-error\n\t\t\t\tgenerateArrayPrefix === 'comma' && encodeValuesOnly && is_array(obj) ? null : encoder,\n\t\t\t\tfilter,\n\t\t\t\tsort,\n\t\t\t\tallowDots,\n\t\t\t\tserializeDate,\n\t\t\t\tformat,\n\t\t\t\tformatter,\n\t\t\t\tencodeValuesOnly,\n\t\t\t\tcharset,\n\t\t\t\tvalueSideChannel,\n\t\t\t),\n\t\t);\n\t}\n\n\treturn values;\n}\n\nfunction normalize_stringify_options(\n\topts: StringifyOptions = defaults,\n): NonNullableProperties<StringifyOptions> {\n\tif (typeof opts.allowEmptyArrays !== 'undefined' && typeof opts.allowEmptyArrays !== 'boolean') {\n\t\tthrow new TypeError('`allowEmptyArrays` option can only be `true` or `false`, when provided');\n\t}\n\n\tif (typeof opts.encodeDotInKeys !== 'undefined' && typeof opts.encodeDotInKeys !== 'boolean') {\n\t\tthrow new TypeError('`encodeDotInKeys` option can only be `true` or `false`, when provided');\n\t}\n\n\tif (\n\t\topts.encoder !== null &&\n\t\ttypeof opts.encoder !== 'undefined' &&\n\t\ttypeof opts.encoder !== 'function'\n\t) {\n\t\tthrow new TypeError('Encoder has to be a function.');\n\t}\n\n\tconst charset = opts.charset || defaults.charset;\n\tif (\n\t\ttypeof opts.charset !== 'undefined' &&\n\t\topts.charset !== 'utf-8' &&\n\t\topts.charset !== 'iso-8859-1'\n\t) {\n\t\tthrow new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');\n\t}\n\n\tlet format = default_format;\n\tif (typeof opts.format !== 'undefined') {\n\t\tif (!has.call(formatters, opts.format)) {\n\t\t\tthrow new TypeError('Unknown format option provided.');\n\t\t}\n\t\tformat = opts.format;\n\t}\n\tconst formatter = formatters[format];\n\n\tlet filter = defaults.filter;\n\tif (typeof opts.filter === 'function' || is_array(opts.filter)) {\n\t\tfilter = opts.filter;\n\t}\n\n\tlet arrayFormat: StringifyOptions['arrayFormat'];\n\tif (opts.arrayFormat && opts.arrayFormat in array_prefix_generators) {\n\t\tarrayFormat = opts.arrayFormat;\n\t} else if ('indices' in opts) {\n\t\tarrayFormat = opts.indices ? 'indices' : 'repeat';\n\t} else {\n\t\tarrayFormat = defaults.arrayFormat;\n\t}\n\n\tif ('commaRoundTrip' in opts && typeof opts.commaRoundTrip !== 'boolean') {\n\t\tthrow new TypeError('`commaRoundTrip` must be a boolean, or absent');\n\t}\n\n\tconst allowDots =\n\t\ttypeof opts.allowDots === 'undefined'\n\t\t\t? !!opts.encodeDotInKeys === true\n\t\t\t\t? true\n\t\t\t\t: defaults.allowDots\n\t\t\t: !!opts.allowDots;\n\n\treturn {\n\t\taddQueryPrefix:\n\t\t\ttypeof opts.addQueryPrefix === 'boolean' ? opts.addQueryPrefix : defaults.addQueryPrefix,\n\t\t// @ts-ignore\n\t\tallowDots: allowDots,\n\t\tallowEmptyArrays:\n\t\t\ttypeof opts.allowEmptyArrays === 'boolean'\n\t\t\t\t? !!opts.allowEmptyArrays\n\t\t\t\t: defaults.allowEmptyArrays,\n\t\tarrayFormat: arrayFormat,\n\t\tcharset: charset,\n\t\tcharsetSentinel:\n\t\t\ttypeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,\n\t\tcommaRoundTrip: !!opts.commaRoundTrip,\n\t\tdelimiter: typeof opts.delimiter === 'undefined' ? defaults.delimiter : opts.delimiter,\n\t\tencode: typeof opts.encode === 'boolean' ? opts.encode : defaults.encode,\n\t\tencodeDotInKeys:\n\t\t\ttypeof opts.encodeDotInKeys === 'boolean' ? opts.encodeDotInKeys : defaults.encodeDotInKeys,\n\t\tencoder: typeof opts.encoder === 'function' ? opts.encoder : defaults.encoder,\n\t\tencodeValuesOnly:\n\t\t\ttypeof opts.encodeValuesOnly === 'boolean'\n\t\t\t\t? opts.encodeValuesOnly\n\t\t\t\t: defaults.encodeValuesOnly,\n\t\tfilter: filter,\n\t\tformat: format,\n\t\tformatter: formatter,\n\t\tserializeDate:\n\t\t\ttypeof opts.serializeDate === 'function' ? opts.serializeDate : defaults.serializeDate,\n\t\tskipNulls: typeof opts.skipNulls === 'boolean' ? opts.skipNulls : defaults.skipNulls,\n\t\t// @ts-expect-error\n\t\tsort: typeof opts.sort === 'function' ? opts.sort : null,\n\t\tstrictNullHandling:\n\t\t\ttypeof opts.strictNullHandling === 'boolean'\n\t\t\t\t? opts.strictNullHandling\n\t\t\t\t: defaults.strictNullHandling,\n\t};\n}\n\nexport function stringify(object: any, opts: StringifyOptions = {}) {\n\tlet obj = object;\n\tconst options = normalize_stringify_options(opts);\n\n\tlet obj_keys: PropertyKey[] | undefined;\n\tlet filter;\n\n\tif (typeof options.filter === 'function') {\n\t\tfilter = options.filter;\n\t\tobj = filter('', obj);\n\t} else if (is_array(options.filter)) {\n\t\tfilter = options.filter;\n\t\tobj_keys = filter;\n\t}\n\n\tconst keys: string[] = [];\n\n\tif (typeof obj !== 'object' || obj === null) {\n\t\treturn '';\n\t}\n\n\tconst generateArrayPrefix = array_prefix_generators[options.arrayFormat];\n\tconst commaRoundTrip = generateArrayPrefix === 'comma' && options.commaRoundTrip;\n\n\tif (!obj_keys) {\n\t\tobj_keys = Object.keys(obj);\n\t}\n\n\tif (options.sort) {\n\t\tobj_keys.sort(options.sort);\n\t}\n\n\tconst sideChannel = new WeakMap();\n\tfor (let i = 0; i < obj_keys.length; ++i) {\n\t\tconst key = obj_keys[i];\n\n\t\tif (options.skipNulls && obj[key] === null) {\n\t\t\tcontinue;\n\t\t}\n\t\tpush_to_array(\n\t\t\tkeys,\n\t\t\tinner_stringify(\n\t\t\t\tobj[key],\n\t\t\t\tkey,\n\t\t\t\t// @ts-expect-error\n\t\t\t\tgenerateArrayPrefix,\n\t\t\t\tcommaRoundTrip,\n\t\t\t\toptions.allowEmptyArrays,\n\t\t\t\toptions.strictNullHandling,\n\t\t\t\toptions.skipNulls,\n\t\t\t\toptions.encodeDotInKeys,\n\t\t\t\toptions.encode ? options.encoder : null,\n\t\t\t\toptions.filter,\n\t\t\t\toptions.sort,\n\t\t\t\toptions.allowDots,\n\t\t\t\toptions.serializeDate,\n\t\t\t\toptions.format,\n\t\t\t\toptions.formatter,\n\t\t\t\toptions.encodeValuesOnly,\n\t\t\t\toptions.charset,\n\t\t\t\tsideChannel,\n\t\t\t),\n\t\t);\n\t}\n\n\tconst joined = keys.join(options.delimiter);\n\tlet prefix = options.addQueryPrefix === true ? '?' : '';\n\n\tif (options.charsetSentinel) {\n\t\tif (options.charset === 'iso-8859-1') {\n\t\t\t// encodeURIComponent('&#10003;'), the \"numeric entity\" representation of a checkmark\n\t\t\tprefix += 'utf8=%26%2310003%3B&';\n\t\t} else {\n\t\t\t// encodeURIComponent('✓')\n\t\t\tprefix += 'utf8=%E2%9C%93&';\n\t\t}\n\t}\n\n\treturn joined.length > 0 ? prefix + joined : '';\n}\n","import { default_format, formatters, RFC1738, RFC3986 } from './formats';\n\nconst formats = {\n\tformatters,\n\tRFC1738,\n\tRFC3986,\n\tdefault: default_format,\n};\n\nexport { parse } from './parse';\nexport { stringify } from './stringify';\nexport { formats };\n\nexport type {\n\tDefaultDecoder,\n\tDefaultEncoder,\n\tFormat,\n\tParseOptions,\n\tStringifyOptions,\n} from './types';\n"],"mappings":"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","names":["has","limit","has","is_array","defaults"]}